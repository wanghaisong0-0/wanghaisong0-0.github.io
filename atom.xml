<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿松与阿妞</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wanghaisong0-0.github.io/"/>
  <updated>2020-05-03T05:21:26.208Z</updated>
  <id>https://wanghaisong0-0.github.io/</id>
  
  <author>
    <name>阿松</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web总结</title>
    <link href="https://wanghaisong0-0.github.io/2020/04/29/summary_Web/"/>
    <id>https://wanghaisong0-0.github.io/2020/04/29/summary_Web/</id>
    <published>2020-04-29T00:00:00.000Z</published>
    <updated>2020-05-03T05:21:26.208Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>HTML超文本标记语言，用于编写前端页面、结构搭建，CSS专门用于美化页面，实现了样式和内容的分离，提高了显示效果和样式的复用性、降低耦合性，分工更加明确。js用于在HTML页面编写一些业务逻辑，增加互动性，操作html的DOM树，不需要提前编译，运行在浏览器。</p><a id="more"></a><p>jQuery框架用于简化JS代码。</p><p>JSON是JS的对象表现形式，取代xml作为数据的载体，在网络中传输。</p><p>AJAX用于解决传统网站中存在的问题，提高用户浏览网站的体验。</p><p>Tomcat是web服务器的一种，用于将本地资源发布到互联网。</p><p>HTTP协议：超文本传输协议（Hyper Text Transfer Protocol)，规范了数据传输的格式，包含了用户请求信息<strong>request</strong>和浏览器响应信息<strong>response</strong>。</p><p>四大域对象：</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面中共享数据</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求中共享数据</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话中共享数据</td></tr><tr><td>application</td><td>ServletContext</td><td>整个web应用共享数据</td></tr></tbody></table><h3 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h3><p><strong>超文本标记语言(Hyper Text Markup Language)</strong></p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><h5 id="1-1-标准前端目录结构"><a href="#1-1-标准前端目录结构" class="headerlink" title="1.1 标准前端目录结构"></a>1.1 标准前端目录结构</h5><p>|– 项目名<br>            |- css 目录<br>            |- js  目录<br>            |- img 目录<br>            index.html</p><h5 id="1-2书写规范"><a href="#1-2书写规范" class="headerlink" title="1.2书写规范"></a>1.2书写规范</h5><ol><li><p>文档声明<br> 要求：必须在第一行，固定格式</p></li><li><p>标签<br> 要求：正确嵌套，正确闭合<br> 双标签</p><pre><code>&lt;开始&gt;&lt;/结束&gt;</code></pre><p> 单标签</p><pre><code>&lt;开始/&gt;</code></pre></li><li><p>属性<br> 要求：必须在开始标签中编写，属性值单双引都可</p><pre><code>&lt;开始 属性名=&quot;属性值&quot;&gt;&lt;/结束&gt;</code></pre></li><li><p>文本<br> 要求：在标签体内编写</p></li><li><p>注释</p><pre><code>&lt;!-- 注释内容 --&gt;</code></pre></li></ol><h4 id="2-常用HTML标签"><a href="#2-常用HTML标签" class="headerlink" title="2.常用HTML标签"></a>2.常用HTML标签</h4><h5 id="2-1标题"><a href="#2-1标题" class="headerlink" title="2.1标题"></a>2.1标题</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hn</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">hn</span>&gt;</span></span></span><br><span class="line">常用属性：</span><br><span class="line"><span class="code">    align：对齐方式</span></span><br><span class="line"><span class="code">     取值：left（左）、center（中）、right（右）</span></span><br></pre></td></tr></table></figure><h5 id="2-2水平线"><a href="#2-2水平线" class="headerlink" title="2.2水平线"></a>2.2水平线</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">水平线:<span class="xml"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="code">     常用属性：</span></span><br><span class="line"><span class="code">         color：颜色</span></span><br><span class="line"><span class="code">             1.英语单词，例如：红色 red</span></span><br><span class="line"><span class="code">             2.光三原色，R（0~255）G（0~255）B（0~255），通过代码6位十六进制数标识 #ff ff ff</span></span><br><span class="line"><span class="code">         width：宽度</span></span><br><span class="line"><span class="code">             1.像素 px 固定值</span></span><br><span class="line"><span class="code">             2.百分比 % ，屏幕自适应</span></span><br></pre></td></tr></table></figure><h5 id="2-3段落和换行标签"><a href="#2-3段落和换行标签" class="headerlink" title="2.3段落和换行标签"></a>2.3段落和换行标签</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">换行：<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">段落：<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="code">     特点：上下留白</span></span><br></pre></td></tr></table></figure><h5 id="2-3超链接"><a href="#2-3超链接" class="headerlink" title="2.3超链接"></a>2.3超链接</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">超链接：<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="code">        常用属性：</span></span><br><span class="line"><span class="code">            href：页面跳转地址</span></span><br><span class="line"><span class="code">                1.绝对地址（外部资源）</span></span><br><span class="line"><span class="code">                    http://www.itcast.cn</span></span><br><span class="line"><span class="code">                2.相对地址（内部资源）</span></span><br><span class="line"><span class="code">                    ./（省略） 当前目录</span></span><br><span class="line"><span class="code">                    ../ 上级目录</span></span><br><span class="line"><span class="code">                    ../../ 上上级</span></span><br><span class="line"><span class="code">            target：打开方式</span></span><br><span class="line"><span class="code">                _self（默认值）：当前窗口跳转</span></span><br><span class="line"><span class="code">                _blank：打开新窗口</span></span><br></pre></td></tr></table></figure><h5 id="2-4图像"><a href="#2-4图像" class="headerlink" title="2.4图像"></a>2.4图像</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">图像：<span class="xml"><span class="tag">&lt;<span class="name">img</span>/&gt;</span></span></span><br><span class="line"><span class="code">        常用属性：</span></span><br><span class="line"><span class="code">            src：图片资源地址</span></span><br><span class="line"><span class="code">                相对地址</span></span><br><span class="line"><span class="code">                绝对地址</span></span><br><span class="line"><span class="code">            alt：图片资源丢失后，文字提示</span></span><br><span class="line"></span><br><span class="line"><span class="code">            width：图片宽度，特点：纵横比缩放</span></span><br><span class="line"><span class="code">                1.px像素固定值</span></span><br><span class="line"><span class="code">                2.%百分比</span></span><br><span class="line"><span class="code">            height：高度</span></span><br></pre></td></tr></table></figure><h5 id="2-5列表"><a href="#2-5列表" class="headerlink" title="2.5列表"></a>2.5列表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有序列表：<span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span> orderline</span><br><span class="line">无序列表：<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span> UNorderline</span><br><span class="line"></span><br><span class="line"><span class="code">    共同的子标签：&lt;li&gt;&lt;/li&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6div和span"><a href="#2-6div和span" class="headerlink" title="2.6div和span"></a>2.6div和span</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span> 和 <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span> 是没有语义的，它们就是一个盒子，用来装内容的，通常结合css样式实现网页布局...</span><br><span class="line"></span><br><span class="line"><span class="code">        div（块级元素）：是一个大盒子，特点：独自占用一行</span></span><br><span class="line"><span class="code">        span（行内元素）：是一个小盒子，特点：内容有多大就占用多大</span></span><br></pre></td></tr></table></figure><h5 id="2-7转义（实体）字符"><a href="#2-7转义（实体）字符" class="headerlink" title="2.7转义（实体）字符"></a>2.7转义（实体）字符</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在html中有两种特殊的转义符号</span><br><span class="line"><span class="code">    1.与html语法有冲突 例如  a&lt;b&gt;c  小于号 &amp;lt;</span></span><br><span class="line"><span class="code">    2.输入法不方便输入 例如 ♥ &amp;hearts;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    半个英语字母英文空格 &amp;nbsp;</span></span><br><span class="line"><span class="code">一个汉字中文空格  &amp;emsp;</span></span><br><span class="line"><span class="code">小于号 &amp;lt;</span></span><br><span class="line"><span class="code">大于号 &amp;gt;</span></span><br><span class="line"><span class="code">&amp;符号 &amp;amp;</span></span><br></pre></td></tr></table></figure><h5 id="2-8基本表格"><a href="#2-8基本表格" class="headerlink" title="2.8基本表格"></a>2.8基本表格</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">table -- 表格</span><br><span class="line"><span class="code">        tr -- 行</span></span><br><span class="line"><span class="code">            td -- 普通单元格</span></span><br><span class="line"><span class="code">            th -- 列标题单元格（居中，加粗）</span></span><br><span class="line"></span><br><span class="line"><span class="code">    table常用属性</span></span><br><span class="line"><span class="code">        border：边框</span></span><br><span class="line"><span class="code">        width:宽度</span></span><br><span class="line"><span class="code">        height:高度</span></span><br><span class="line"><span class="code">        align：表格对齐方式</span></span><br><span class="line"><span class="code">            取值：left、center、right</span></span><br><span class="line"><span class="code">        cellspacing：单元格外边距，通常取值：0</span></span><br><span class="line"><span class="code">        cellpadding：单元格内边距，通常取值：0</span></span><br><span class="line"><span class="code">        bgcolor：表格背景色</span></span><br><span class="line"><span class="code">    tr常用属性</span></span><br><span class="line"><span class="code">        bgcolor：表格背景色</span></span><br><span class="line"><span class="code">        align:内容对齐方式</span></span><br><span class="line"><span class="code">        height:行高</span></span><br><span class="line"><span class="code">    td常用属性</span></span><br><span class="line"><span class="code">        bgcolor：表格背景色</span></span><br><span class="line"><span class="code">        align:内容对齐方式</span></span><br><span class="line"></span><br><span class="line">绘制一个 6行1列表格</span><br><span class="line"><span class="code">table&gt;tr*6&gt;td   + tab 快速创建表格方式</span></span><br></pre></td></tr></table></figure><h5 id="2-9表格合并"><a href="#2-9表格合并" class="headerlink" title="2.9表格合并"></a>2.9表格合并</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">跨行合并：rowspan="合并行数"</span><br><span class="line">夸列合并：colspan="合并列数"</span><br></pre></td></tr></table></figure><h4 id="3-HTML表单"><a href="#3-HTML表单" class="headerlink" title="3.HTML表单"></a>3.HTML表单</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">表单：<span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span>（容器）</span><br><span class="line"><span class="code">    常用属性：</span></span><br><span class="line"><span class="code">       action：表单提交服务器的地址，今天暂时使用 # （当前页面）</span></span><br><span class="line"><span class="code">       method：表单提交方式，有二种：get（默认）、post</span></span><br><span class="line"><span class="code">          get：</span></span><br><span class="line"><span class="code">              格式：提交地址?username=张三 &amp; password=999 &amp; birthday=2020-04-11</span></span><br><span class="line"><span class="code">              特点：</span></span><br><span class="line"><span class="code">                  参数在地址栏拼接，不太安全</span></span><br><span class="line"><span class="code">                  浏览器地址栏大小有限制，几KB左右</span></span><br><span class="line"><span class="code">          post：</span></span><br><span class="line"><span class="code">              格式：username=张三 &amp; password=999 &amp; birthday=2020-04-11</span></span><br><span class="line"><span class="code">              特点：</span></span><br><span class="line"><span class="code">                  参数没有在地址栏拼接，相对安全（请求体）</span></span><br><span class="line"><span class="code">                  浏览器不会对请求体做大小限制</span></span><br><span class="line"></span><br><span class="line"><span class="code">    表单项标签</span></span><br><span class="line"><span class="code">        1）文本框：&lt;input/&gt;</span></span><br><span class="line"><span class="code">            常用属性：</span></span><br><span class="line"><span class="code">                name:表单项的参数名（要想被表单提交，必须知道name的值）</span></span><br><span class="line"><span class="code">                value:表单项的值（用户输入、用户选择）</span></span><br><span class="line"><span class="code">                type:表单项类型，有很多种，不同的类型功能和展示效果也有所不同，常用：</span></span><br><span class="line"><span class="code">                    a）text 文本框（默认）</span></span><br><span class="line"><span class="code">                    b）password 密码框 特点：掩码</span></span><br><span class="line"><span class="code">                    c）date 日期选择框</span></span><br><span class="line"><span class="code">                    d）radio 单选框 特点：同一组（name的值相等）只能选择一个  checked="checked" 设置为默认选中</span></span><br><span class="line"><span class="code">                    e）checkbox 复选框 特点：同一组（name的值相等）可以选择多个 checked="checked" 设置为默认选中</span></span><br><span class="line"><span class="code">                    f）file 文件上传 特点：必须post方式</span></span><br><span class="line"><span class="code">                    g）reset 重置按钮（清空表单），特点：value属性就是按钮名称</span></span><br><span class="line"><span class="code">                    h）submit 提交按钮，特点：value属性就是按钮名称</span></span><br><span class="line"></span><br><span class="line"><span class="code">        2）下拉框：&lt;select&gt;&lt;/select&gt;</span></span><br><span class="line"><span class="code">            列表项：&lt;option&gt;&lt;/option&gt;</span></span><br><span class="line"><span class="code">                常用属性：selected="selected" 默认列表项被选中</span></span><br><span class="line"><span class="code">        3）文本域：&lt;textarea&gt;&lt;/textarea&gt;</span></span><br><span class="line"><span class="code">            常用属性：</span></span><br><span class="line"><span class="code">                rows：行高</span></span><br><span class="line"><span class="code">                cols：列宽</span></span><br></pre></td></tr></table></figure><h3 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h3><p><strong>层叠样式表（Cascading Style Sheet）</strong></p><p>作用：美化页面</p><blockquote><p>层叠样式: 对同一个标签添加多个不同的样式,所有样式会叠加在一起展示出效果</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">优点：</span><br><span class="line">1. 实现了样式和内容的分离，提高了显示效果和样式的复用性。</span><br><span class="line">2. 降低耦合性，分工更加明确，CSS专门用于美化，HTML专门用于结构搭建。</span><br></pre></td></tr></table></figure><h4 id="1-HTML引入CSS"><a href="#1-HTML引入CSS" class="headerlink" title="1.HTML引入CSS"></a>1.HTML引入CSS</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HTML引入CSS的三种方式</span><br><span class="line"><span class="code">        1）行内样式：所有的标签都有一个共有的属性style</span></span><br><span class="line"><span class="code">            语法：&lt;h1 style="css样式"&gt;&lt;/h1&gt;</span></span><br><span class="line"><span class="code">            作用范围：当前标签</span></span><br><span class="line"><span class="code">        2）内部样式：使用style</span></span><br><span class="line"><span class="code">            语法：&lt;style type="text/css"&gt;css样式&lt;/style&gt;</span></span><br><span class="line"><span class="code">                type="text/css" 告知浏览器把解析器切换为css类型</span></span><br><span class="line"><span class="code">            作用范围：当前页面</span></span><br><span class="line"><span class="code">        3）外部样式：使用link标签引入外部css样式</span></span><br><span class="line"><span class="code">            语法：&lt;link rel="stylesheet"  href="外部css文件地址"/&gt;</span></span><br><span class="line"><span class="code">                rel="stylesheet" 告知浏览器我引入文件的类型是css样式表</span></span><br><span class="line"><span class="code">            作用范围：所有引入的html页面</span></span><br><span class="line"></span><br><span class="line"><span class="code">        css样式优先级：就近原则.....  浏览器的执行顺序自上而下</span></span><br><span class="line"><span class="code">        style标签可以在html的任意位置,推荐放在head头部</span></span><br></pre></td></tr></table></figure><h4 id="2-基本选择器"><a href="#2-基本选择器" class="headerlink" title="2.基本选择器"></a>2.基本选择器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">选择器：作用选定一组特有的标签</span><br><span class="line"><span class="code">        1）标签 特点：此名称的所有标签</span></span><br><span class="line"><span class="code">            语法：标签名&#123;css样式&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        2）class（类）特点：具有分组的特性</span></span><br><span class="line"><span class="code">            语法：.class&#123;css样式&#125;</span></span><br><span class="line"><span class="code">        3）id 特点：具有唯一性</span></span><br><span class="line"><span class="code">            语法：#id&#123;css样式&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-扩展选择器"><a href="#3-扩展选择器" class="headerlink" title="3.扩展选择器"></a>3.扩展选择器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">扩展选择器</span><br><span class="line"><span class="code">        1）并集</span></span><br><span class="line"><span class="code">            语法：选择器1,选择器2....&#123;css样式&#125;</span></span><br><span class="line"><span class="code">        2）后代</span></span><br><span class="line"><span class="code">            语法：父 子（孙子）&#123;样式&#125;</span></span><br><span class="line"><span class="code">       3）父子</span></span><br><span class="line"><span class="code">            语法：父&gt;子&#123;css样式&#125;</span></span><br><span class="line"><span class="code">       4）属性</span></span><br><span class="line"><span class="code">            语法：选择器[属性名="属性值"]&#123;css样式&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-背景属性"><a href="#4-背景属性" class="headerlink" title="4.背景属性"></a>4.背景属性</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">背景属性</span><br><span class="line"><span class="code">        background-color：背景色</span></span><br><span class="line"><span class="code">        background-image：背景图片</span></span><br><span class="line"><span class="code">            取值：url('图片地址')</span></span><br><span class="line"><span class="code">       background-repeat：平铺方式</span></span><br><span class="line"><span class="code">            取值：repeat（水平和垂直）、repeat-x（水平）、repeat-y（垂直）、no-repeat（不平铺）</span></span><br><span class="line"></span><br><span class="line">   简写方式</span><br><span class="line"><span class="code">        background:color image repeat;</span></span><br></pre></td></tr></table></figure><h4 id="5-显示属性"><a href="#5-显示属性" class="headerlink" title="5.显示属性"></a>5.显示属性</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">显示属性：display</span><br><span class="line"><span class="code">        1）inline：将标签改为行内元素</span></span><br><span class="line"><span class="code">        2）block：将标签改为块级元素</span></span><br><span class="line"><span class="code">        3）none：隐藏此标签</span></span><br></pre></td></tr></table></figure><h4 id="6-浮动属性"><a href="#6-浮动属性" class="headerlink" title="6.浮动属性"></a>6.浮动属性</h4><p><strong>打破常规，让div也能变小（实际大小跟 宽和高）</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">浮动：float</span><br><span class="line"><span class="code">        取值：left、right</span></span><br><span class="line"><span class="code">    清除浮动：clear</span></span><br><span class="line"><span class="code">        取值：both</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"long"</span>&gt;</span></span>左青龙<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"hu"</span>&gt;</span></span>右白虎<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span>最后砍成米老鼠<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="7-盒子模型"><a href="#7-盒子模型" class="headerlink" title="7.盒子模型"></a>7.盒子模型</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">盒子模型</span><br><span class="line"><span class="code">        1）宽和高</span></span><br><span class="line"><span class="code">            width：300px</span></span><br><span class="line"><span class="code">            height：300px</span></span><br><span class="line"><span class="code">        2）边框</span></span><br><span class="line"><span class="code">            border：宽度 类型 颜色</span></span><br><span class="line"><span class="code">                类型：solid 单线、double 双线、dashed 虚线</span></span><br><span class="line"><span class="code">        3）内边距</span></span><br><span class="line"><span class="code">            padding-top 上</span></span><br><span class="line"><span class="code">            padding-right 右</span></span><br><span class="line"><span class="code">            padding-bottom 下</span></span><br><span class="line"><span class="code">            padding-left 左</span></span><br><span class="line"><span class="code">            简写：padding: 上右下左</span></span><br><span class="line"><span class="code">        4）外边距</span></span><br><span class="line"><span class="code">            margin-top 上</span></span><br><span class="line"><span class="code">            margin-right 右</span></span><br><span class="line"><span class="code">            margin-bottom 下</span></span><br><span class="line"><span class="code">            margin-left 左</span></span><br><span class="line"><span class="code">            简写：margin：上右下左</span></span><br><span class="line"><span class="code">            特殊：margin:auto 水平居中</span></span><br><span class="line"></span><br><span class="line"><span class="code">        5）盒子类型</span></span><br><span class="line"><span class="code">            box-sizing：content-box（默认）  盒子大小（宽和高+内边距+边框） ，计算起来就比较麻烦</span></span><br><span class="line"><span class="code">            box-sizing：border-box 盒子大小（宽和高）包含（内边距和边框），计算方法就比较简单了</span></span><br></pre></td></tr></table></figure><h3 id="三、JavaScript"><a href="#三、JavaScript" class="headerlink" title="三、JavaScript"></a>三、JavaScript</h3><p><strong>JavaScript特点</strong></p><ol><li><p>js源码不需要编译，浏览器可以直接解释运行</p></li><li><p>js是弱类型语言，js变量声明不需要指明类型</p><p><strong>JavaScript组成</strong></p></li></ol><table><thead><tr><th><strong>组成部分</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>ECMA Script</strong></td><td>构成了JS核心的语法基础</td></tr><tr><td><strong>BOM</strong></td><td>Browser Object Model 浏览器对象模型，用来操作浏览器上的对象</td></tr><tr><td><strong>DOM</strong></td><td>Document Object Model 文档对象模型，用来操作网页中的元素（标签）</td></tr></tbody></table><h4 id="1-HTML引入JS"><a href="#1-HTML引入JS" class="headerlink" title="1.HTML引入JS"></a>1.HTML引入JS</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTML引入js的二种方式</span><br><span class="line"><span class="code">        1）内部脚本</span></span><br><span class="line"><span class="code">            语法：&lt;script type="text/javascript"&gt;js代码&lt;/script&gt;</span></span><br><span class="line"><span class="code">        2）外部脚本</span></span><br><span class="line"><span class="code">            语法：&lt;script src="外部js文件地址"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="code">        补充：script标签可以在页面任意位置，推荐放在body尾部... 页面顺序：css、html、js</span></span><br><span class="line"><span class="code">        经验值：</span></span><br><span class="line"><span class="code">            1）script标签不能自闭合</span></span><br><span class="line"><span class="code">            2）如果script标签使用src属性，那么浏览器将不会解析此标签体的js代码...</span></span><br></pre></td></tr></table></figure><h4 id="2-JS三种输出方式"><a href="#2-JS三种输出方式" class="headerlink" title="2.JS三种输出方式"></a>2.JS三种输出方式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">JS三种输出方式</span></span><br><span class="line"><span class="xml">1. 浏览器弹框输出字符</span></span><br><span class="line"><span class="xml">2. 输出html内容到页面</span></span><br><span class="line"><span class="xml">3. 输出到浏览器控制台</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="code">    // 1. 浏览器弹框输出字符</span></span><br><span class="line"><span class="code">    alert('浏览器弹框输出字符');</span></span><br><span class="line"><span class="code">    // 2. 输出html内容到页面</span></span><br><span class="line"><span class="code">    document.write('输出html内容到页面')</span></span><br><span class="line"><span class="code">    // 3. 输出到浏览器控制台</span></span><br><span class="line"><span class="code">    console.log('输出到浏览器控制台')</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-JS变量声明"><a href="#3-JS变量声明" class="headerlink" title="3.JS变量声明"></a>3.JS变量声明</h4><p>ECMAScript6之前所有的遍历声明使用var就可以了<br>        es6之后 开始推出 let 声明变量，const 声明常量</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 字符串：String str = "用心做教育";</span><br><span class="line">  let str = "用心做教育";</span><br><span class="line">  console.log(str);</span><br><span class="line">  // 整型：int i = 1314;</span><br><span class="line">  let i = 1314;</span><br><span class="line">  console.log(i);</span><br><span class="line">  // 浮点型：double d = 521.1314;</span><br><span class="line">  let d = 521.1314;</span><br><span class="line">  console.log(d);</span><br><span class="line">  // 常量：final Integer PI = 3.14;</span><br><span class="line">  const  PI =3.14;</span><br><span class="line">  console.log(PI);</span><br><span class="line">  // 布尔：boolean b = true;</span><br><span class="line">  let b = true;</span><br><span class="line">  console.log(b);</span><br></pre></td></tr></table></figure><h4 id="4-JS数据类型"><a href="#4-JS数据类型" class="headerlink" title="4.JS数据类型"></a>4.JS数据类型</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">基本数据类型</span><br><span class="line"><span class="code">        1.number 数值（整型、浮点）</span></span><br><span class="line"><span class="code">        2.string 字符串 （单引号、双引号） 在js中没有字符的概念，都是字符串...</span></span><br><span class="line"><span class="code">        3.boolean 布尔（true、false）</span></span><br><span class="line"><span class="code">        4.undefined 未定义；例如：let a;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    引用数据类型</span></span><br><span class="line"><span class="code">        let obj = new Object();</span></span><br><span class="line"><span class="code">        let date = new Date();</span></span><br><span class="line"></span><br><span class="line"><span class="code">    判断变量的数据类型</span></span><br><span class="line"><span class="code">        语法：typeof 变量名</span></span><br></pre></td></tr></table></figure><h4 id="5-JS运算符"><a href="#5-JS运算符" class="headerlink" title="5.JS运算符"></a>5.JS运算符</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>算数运算符</span><br><span class="line"><span class="bullet">+ </span>- * / % ++ --</span><br><span class="line"><span class="bullet">2. </span>赋值运算符</span><br><span class="line"><span class="code">= += -= *= /=</span></span><br><span class="line"><span class="bullet">3. </span>比较运算符</span><br><span class="line"><span class="code">&gt; &lt; ==(===) !=(!==)</span></span><br><span class="line"><span class="bullet">4. </span>逻辑运算符</span><br><span class="line"><span class="code">&amp;&amp; ||  !</span></span><br><span class="line"><span class="bullet">5. </span>三元（目）运算符</span><br><span class="line"><span class="code">条件表达式？为真:为假</span></span><br></pre></td></tr></table></figure><p><strong>关注js与java区别的运算符</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="code">    // 算数运算符</span></span><br><span class="line"><span class="code">    // 在js中数值可与字符串进行数学运算，底层实现隐式转换</span></span><br><span class="line"><span class="code">    let a = 10; // number</span></span><br><span class="line"><span class="code">    let b = '4'; // string</span></span><br><span class="line"><span class="code">    console.log(a + b); // 104 字符串拼接</span></span><br><span class="line"><span class="code">    console.log(a - b); // 6</span></span><br><span class="line"><span class="code">    console.log(a * b); // 40</span></span><br><span class="line"><span class="code">    console.log(a / b); // 2.5 保留小数位</span></span><br><span class="line"></span><br><span class="line"><span class="code">    // 比较运算符</span></span><br><span class="line"><span class="code">    let c = '10'; // string</span></span><br><span class="line"><span class="code">    console.log(a == c); // true  比较的是内容</span></span><br><span class="line"><span class="code">    console.log(a === c); //  false  比较类型+内容</span></span><br><span class="line"></span><br><span class="line"><span class="code">    // !=  比较的是内容</span></span><br><span class="line"><span class="code">    // !== 比较类型+内容</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="6-JS流程控制"><a href="#6-JS流程控制" class="headerlink" title="6.JS流程控制"></a>6.JS流程控制</h4><p>高级语言中的三种基本结构：顺序、分支、循环 </p><h5 id="1-条件判断"><a href="#1-条件判断" class="headerlink" title="1.条件判断"></a>1.条件判断</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>if判断</span><br><span class="line"><span class="code">if (条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else if(条件表达式) &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125; else &#123;</span></span><br><span class="line"><span class="code">            代码块;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>switch判断</span><br><span class="line"><span class="code">switch(条件表达式)&#123;</span></span><br><span class="line"><span class="code">            case 满足条件1 :</span></span><br><span class="line"><span class="code">            代码块 break;</span></span><br><span class="line"><span class="code">            case 满足条件2 :</span></span><br><span class="line"><span class="code">            代码块 break;</span></span><br><span class="line"><span class="code">            default:</span></span><br><span class="line"><span class="code">            默认代码块;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">条件表达式</span><br><span class="line"><span class="code">            1）布尔型</span></span><br><span class="line"><span class="code">            2）数值型：非0为真</span></span><br><span class="line"><span class="code">            3）字符串：非空串为真</span></span><br><span class="line"><span class="code">            4）变量：null 和 undefined 都为假</span></span><br></pre></td></tr></table></figure><h5 id="2-循环语句"><a href="#2-循环语句" class="headerlink" title="2.循环语句"></a>2.循环语句</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>普通for循环</span><br><span class="line"><span class="code">for(let i= 0; i&lt;10; i++)&#123;</span></span><br><span class="line"><span class="code">    需要执行的代码;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>增强for循环</span><br><span class="line"><span class="code">for(let obj of array)&#123;</span></span><br><span class="line"><span class="code">            需要执行的代码;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>索引for循环</span><br><span class="line"><span class="code">for(let index in array)&#123;</span></span><br><span class="line"><span class="code">            需要执行的代码;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>while循环</span><br><span class="line"><span class="code">while (条件表达式) &#123;</span></span><br><span class="line"><span class="code">需要执行的代码;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5. </span>do..while循环</span><br><span class="line"><span class="code">do&#123;</span></span><br><span class="line"><span class="code">            需要执行的代码;</span></span><br><span class="line"><span class="code">&#125;while(条件表达式);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">6. </span>break和continue</span><br><span class="line"><span class="code">break: 跳出整个循环</span></span><br><span class="line"><span class="code">continue：跳出本次循环</span></span><br></pre></td></tr></table></figure><h4 id="7-js函数"><a href="#7-js函数" class="headerlink" title="7.js函数"></a>7.js函数</h4><h5 id="1-普通函数"><a href="#1-普通函数" class="headerlink" title="1.普通函数"></a>1.普通函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    [<span class="keyword">return</span> 返回值;] <span class="comment">// 中括号意思表示内容可以省略....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//js不支持方法重载，重名的会被覆盖....</span></span><br></pre></td></tr></table></figure><h5 id="2-匿名函数"><a href="#2-匿名函数" class="headerlink" title="2.匿名函数"></a>2.匿名函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">参数列表</span>)</span>&#123;</span><br><span class="line">    函数体;</span><br><span class="line">    [<span class="keyword">return</span> 返回值;] <span class="comment">// 中括号意思表示内容可以省略....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-js事件"><a href="#8-js事件" class="headerlink" title="8.js事件"></a>8.js事件</h4><h5 id="1-常用事件"><a href="#1-常用事件" class="headerlink" title="1.常用事件"></a>1.常用事件</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>点击事件：</span><br><span class="line"><span class="bullet">        1. </span>onclick：单击事件</span><br><span class="line"><span class="bullet">        2. </span>ondblclick：双击事件</span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">2. </span>焦点事件</span><br><span class="line"><span class="bullet">        1. </span>onblur：失去焦点</span><br><span class="line"><span class="bullet">        2. </span>onfocus:元素获得焦点。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>加载事件：</span><br><span class="line"><span class="bullet">        1. </span>onload：页面加载完成后立即发生。</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>鼠标事件：</span><br><span class="line"><span class="bullet">        1. </span>onmousedown鼠标按钮被按下。</span><br><span class="line"><span class="bullet">        2. </span>onmouseup鼠标按键被松开。</span><br><span class="line"><span class="bullet">        3. </span>onmousemove鼠标被移动。</span><br><span class="line"><span class="bullet">        4. </span>onmouseover鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">        5. </span>onmouseout鼠标从某元素移开。</span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">5. </span>键盘事件：</span><br><span class="line"><span class="bullet">1. </span>onkeydown某个键盘按键被按下。</span><br><span class="line"><span class="bullet">2. </span>onkeyup某个键盘按键被松开。</span><br><span class="line"><span class="bullet">3. </span>onkeypress某个键盘按键被按下并松开。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>改变事件</span><br><span class="line"><span class="bullet">        1. </span>onchange域的内容被改变。</span><br><span class="line"></span><br><span class="line"><span class="bullet">7. </span>表单事件：</span><br><span class="line"><span class="bullet">        1. </span>onsubmit提交按钮被点击。</span><br></pre></td></tr></table></figure><h5 id="2-事件绑定"><a href="#2-事件绑定" class="headerlink" title="2.事件绑定"></a>2.事件绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"普通函数"</span> <span class="attr">onclick</span>=<span class="string">"show()"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"匿名函数"</span> <span class="attr">id</span>=<span class="string">"myBtn"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 单击事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 普通函数 此种方案有耦合性....</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是普通函数触发的事件...'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 匿名函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 通过dom技术获得按钮标签的js对象</span></span></span><br><span class="line">   /* let myBtn = document.getElementById('myBtn');</span><br><span class="line"><span class="actionscript">    myBtn.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数触发的事件...'</span>)</span></span><br><span class="line">    &#125;*/</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myBtn'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 链式编程...</span></span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'我是匿名函数触发的事件...'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="9-js常用内置对象"><a href="#9-js常用内置对象" class="headerlink" title="9.js常用内置对象"></a>9.js常用内置对象</h4><h5 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>构造字符串对象可以使用</span><br><span class="line"><span class="code">    双引号,单引号,反引号</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>字符串常用方法</span><br><span class="line"><span class="code">    substring(startIndex,endIndex) 提取字符串中两个指定的索引号之间的字符。  包头不包尾</span></span><br><span class="line"><span class="code">    toLowerCase() 把字符串转换为小写。</span></span><br><span class="line"><span class="code">    toUpperCase() 把字符串转换为大写。</span></span><br><span class="line"><span class="code">    split() 把字符串分割为字符串数组。</span></span><br><span class="line"><span class="code">    trim() 去掉首尾空格</span></span><br></pre></td></tr></table></figure><h5 id="2-Array-对象"><a href="#2-Array-对象" class="headerlink" title="2. Array 对象"></a>2. Array 对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">数组</span><br><span class="line"><span class="code">    查询手册完成:</span></span><br><span class="line"><span class="bullet">        1. </span>创建数组</span><br><span class="line"><span class="code">            let array = [元素1，元素2，元素3];  -- 推荐</span></span><br><span class="line"><span class="code">            let array = new Array(元素1，元素2，元素3);</span></span><br><span class="line"></span><br><span class="line"><span class="code">            特点：数组元素的类型任意，数组的长度任意，当做java的list集合</span></span><br><span class="line"><span class="bullet">       2. </span>数组常用方法</span><br><span class="line"><span class="code">            concat() 连接两个或更多的数组，并返回结果。</span></span><br><span class="line"><span class="code">            push() 向数组的末尾添加一个或更多元素，并返回新的长度。</span></span><br><span class="line"><span class="code">            pop() 删除并返回数组的最后一个元素</span></span><br><span class="line"><span class="code">            join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span></span><br><span class="line"><span class="code">                与 字符串.split()切割为数组 方法相反</span></span><br><span class="line"><span class="code">            sort() 对数组的元素进行排序</span></span><br></pre></td></tr></table></figure><h5 id="3-Date对象"><a href="#3-Date对象" class="headerlink" title="3.Date对象"></a>3.Date对象</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    日期</span></span><br><span class="line"><span class="comment">        let date = new Date();</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date.toLocaleString()); <span class="comment">// 转换为本地日期格式的字符串</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date.getFullYear()); <span class="comment">// 年 四位</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date.getMonth()+<span class="number">1</span>);<span class="comment">// 月 范围：0~11</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date.getDate()); <span class="comment">// 日</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(date.getTime()); <span class="comment">// 1970年~今毫秒值</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-Math对象"><a href="#4-Math对象" class="headerlink" title="4.Math对象"></a>4.Math对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">数学运算</span></span><br><span class="line"><span class="xml">    查询手册完成</span></span><br><span class="line"><span class="xml">    1. 四舍五入 round()</span></span><br><span class="line"><span class="xml">    2. 向下取整 floor()</span></span><br><span class="line"><span class="xml">    3. 向上取整 ceil()</span></span><br><span class="line"><span class="xml">    4. 产生随机数 random() ：返回 [0,1) 之间的随机数。 [0,1) 左闭右开区间,包含0不包含1 （含头不含尾）</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-全局函数"><a href="#5-全局函数" class="headerlink" title="5.全局函数"></a>5.全局函数</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">全局函数</span><br><span class="line"><span class="bullet">    1. </span>字符串转为数字</span><br><span class="line"><span class="code">        parseInt() 解析一个字符串并返回一个整数。</span></span><br><span class="line"><span class="code">        parseFloat() 解析一个字符串并返回一个浮点数。</span></span><br><span class="line"><span class="code">            特点：从第一个字符开始转换，遇到非数值字符停止转换....</span></span><br><span class="line"><span class="code">            NaN  not a number 这不是一个数  （这哥们六亲不认）</span></span><br><span class="line"><span class="code">        isNaN()  判断一个字符串  如果不是数值返回true 否则返回false</span></span><br><span class="line"><span class="bullet">    2. </span>对字符串编码和解码</span><br><span class="line"><span class="code">        encodeURI() 把字符串编码为 URI。</span></span><br><span class="line"><span class="code">        decodeURI() 解码某个编码的 URI 。</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">    3. </span>把字符串当做js表达式来执行</span><br><span class="line"><span class="code">        eval() 计算 JavaScript 字符串，并把它作为脚本代码来执行。</span></span><br></pre></td></tr></table></figure><h4 id="10-BOM对象"><a href="#10-BOM对象" class="headerlink" title="10.BOM对象"></a>10.BOM对象</h4><p><strong>浏览器对象模型（Browser Object Model ）</strong></p><h5 id="1-三种弹框方式"><a href="#1-三种弹框方式" class="headerlink" title="1.三种弹框方式"></a>1.三种弹框方式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>警告框：提示信息</span><br><span class="line"><span class="code">alert()</span></span><br><span class="line"><span class="bullet">2. </span>确认框：确认信息</span><br><span class="line"><span class="code">confirm()</span></span><br><span class="line"><span class="bullet">3. </span>输入框：输入信息</span><br><span class="line"><span class="code">prompt()</span></span><br></pre></td></tr></table></figure><h5 id="2-二种定时器方式"><a href="#2-二种定时器方式" class="headerlink" title="2.二种定时器方式"></a>2.二种定时器方式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">JS两个定时器</span><br><span class="line"><span class="code">        1）一次性定时器</span></span><br><span class="line"><span class="code">            创建：let 定时器对象 = setTimeout('函数()',毫秒);</span></span><br><span class="line"><span class="code">            关闭：clearTimeout(定时器对象)</span></span><br><span class="line"></span><br><span class="line"><span class="code">        2）循环性定时器</span></span><br><span class="line"><span class="code">            创建：let 定时器对象 = setInterval(函数,毫秒);</span></span><br><span class="line"><span class="code">            关闭：clearInterval(定时器对象);</span></span><br></pre></td></tr></table></figure><h5 id="3-Location对象"><a href="#3-Location对象" class="headerlink" title="3.Location对象"></a>3.Location对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location地址</span><br><span class="line"><span class="code">    1）获取当前窗口地址</span></span><br><span class="line"><span class="code">        location.href</span></span><br><span class="line"></span><br><span class="line"><span class="code">    2）刷新当前页面</span></span><br><span class="line"><span class="code">        location.reload()</span></span><br><span class="line"></span><br><span class="line"><span class="code">    3）跳转页面（重点）</span></span><br><span class="line"><span class="code">        location.href='新页面地址'</span></span><br></pre></td></tr></table></figure><h4 id="11-DOM对象"><a href="#11-DOM对象" class="headerlink" title="11.DOM对象"></a>11.DOM对象</h4><p><strong>文档对象模型（Document Object Model）</strong></p><h5 id="1-DOM获取元素"><a href="#1-DOM获取元素" class="headerlink" title="1.DOM获取元素"></a>1.DOM获取元素</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>第一种：es6之前获取方式</span><br><span class="line"><span class="code">1）获取一个</span></span><br><span class="line"><span class="code">document.getElementById(id属性值)</span></span><br><span class="line"><span class="code">2）获取多个（了解）</span></span><br><span class="line"><span class="code">document.getElementsByTagName(标签名)根据标签名获取，返回数组对象</span></span><br><span class="line"><span class="code">document.getElementsByClassName(class属性值)根据class属性获取，返回数组对象</span></span><br><span class="line"><span class="code">document.getElementsByName(name属性值)  根据name属性获取，返回数组对象</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>第二种：es6可根据CSS选择器获取</span><br><span class="line"><span class="code">1）获取一个</span></span><br><span class="line"><span class="code">document.querySelector(id选择器)</span></span><br><span class="line"><span class="code">2）获取多个</span></span><br><span class="line"><span class="code">document.querySelectorAll(css选择器)</span></span><br><span class="line"><span class="code">        标签</span></span><br><span class="line"><span class="code">        class</span></span><br><span class="line"><span class="code">        属性</span></span><br><span class="line"><span class="code">        后代</span></span><br><span class="line"><span class="code">        并集</span></span><br><span class="line"><span class="code">        父子</span></span><br><span class="line"><span class="code">        ....</span></span><br></pre></td></tr></table></figure><h5 id="2-DOM操作内容"><a href="#2-DOM操作内容" class="headerlink" title="2.DOM操作内容"></a>2.DOM操作内容</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>获取或者修改元素（标签）的纯文本内容</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">js对象.innerText; </span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>获取或者修改元素的html超文本内容</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">js对象.innerHTML; </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>获取或者修改包含自身的html内容（了解）</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">js对象.outerHTML;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>程序猿最讨厌的四件事：<span class="tag">&lt;<span class="name">br</span>&gt;</span>写注释、写文档……<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myDiv = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.innerText操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1 获取纯文本</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// console.log(myDiv.innerText);</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.2 设置纯文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    // myDiv.innerText='<span class="tag">&lt;<span class="name">h1</span>&gt;</span>别人不写注释，别人不写文档<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'; // 覆盖</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// myDiv.innerText+='别人不写注释，别人不写文档'; // 追加</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.innerHTML操作div内容</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.1 获取超文本内容</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(myDiv.innerHTML);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.2 设置超文本</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    // myDiv.innerHTML='<span class="tag">&lt;<span class="name">h1</span>&gt;</span>别人不写注释，别人不写文档<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'; // 覆盖</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    //  myDiv.innerHTML+='<span class="tag">&lt;<span class="name">h1</span>&gt;</span>别人不写注释，别人不写文档<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>'; // 追加</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3.outerHTML操作div （扩展）</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    myDiv.outerHTML = '<span class="tag">&lt;<span class="name">p</span>&gt;</span>我摇身一变，成了小P<span class="tag">&lt;/<span class="name">p</span>&gt;</span>';</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-DOM操作属性"><a href="#3-DOM操作属性" class="headerlink" title="3.DOM操作属性"></a>3.DOM操作属性</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>获取文本框的值,单选框或复选框的选中状态</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.属性名 获取属性值</span></span><br><span class="line"><span class="code">js对象.属性名='新属性值'</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>给元素设置自定义属性（了解）</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.setAttribute(属性名,属性值) </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取元素的自定义属性值（了解）</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.getAttribute(属性名) </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>移除元素的自定义属性（了解）</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.removeAttribute(属性名)</span></span><br></pre></td></tr></table></figure><h5 id="4-DOM操作样式"><a href="#4-DOM操作样式" class="headerlink" title="4.DOM操作样式"></a>4.DOM操作样式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置一个css样式【会用】</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.style.样式名='样式值'</span></span><br><span class="line"><span class="code">特点：样式名按照驼峰式命名</span></span><br><span class="line"><span class="code">css格式：font-size</span></span><br><span class="line"><span class="code">js格式：fontSize</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>批量设置css样式（了解）</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.style.cssText='css样式字符串'</span></span><br><span class="line"><span class="code">缺点：让开发者痛苦，有耦合性</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>通过class设置样式【重点】</span><br><span class="line"><span class="code">语法: </span></span><br><span class="line"><span class="code">js对象.className='class选择器名'</span></span><br><span class="line"><span class="code">特点：解耦</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">// 1. 设置一个css样式</span><br><span class="line"><span class="code">    p1.style.backgroundColor='black';</span></span><br><span class="line"><span class="code">    p1.style.color='white';</span></span><br><span class="line"></span><br><span class="line"><span class="code">    // 2. 批量设置css样式</span></span><br><span class="line"><span class="code">    p2.style.cssText='border:1px solid red;font-size:20px;';</span></span><br><span class="line"></span><br><span class="line"><span class="code">    // 3. 通过class设置样式</span></span><br><span class="line"><span class="code">    p3.className='mp mpp'; // 注意不要画蛇添足：不要给我加. class="mp mpp"</span></span><br></pre></td></tr></table></figure><h5 id="5-DOM操作元素（标签）"><a href="#5-DOM操作元素（标签）" class="headerlink" title="5.DOM操作元素（标签）"></a>5.DOM操作元素（标签）</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>创建一个标签对象</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">document.createElement(标签名称)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>给父标签添加一个子标签</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">父标签对象.appendChild(子标签对象)</span></span><br></pre></td></tr></table></figure><h5 id="6-正则表达式"><a href="#6-正则表达式" class="headerlink" title="6.正则表达式"></a>6.正则表达式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在js中使用正则表达式</span><br><span class="line"><span class="code">1.创建方式</span></span><br><span class="line"><span class="code">1）let rege = new RegExp(“正则表达式字符串”);</span></span><br><span class="line"><span class="code">2）let rege = /正则表达式/;</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">2.验证方法</span></span><br><span class="line"><span class="code">1）正则对象.test(字符串)</span></span><br><span class="line"><span class="code">符合正则规则就返回true，否则false</span></span><br><span class="line"><span class="code">2）字符串对象.match(正则对象)</span></span><br><span class="line"><span class="code">返回字符串中符合正则规则的内容。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>了解下正则修饰符</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>在线正则表达式</span><br><span class="line"><span class="code">    https://tool.oschina.net/regex/#</span></span><br></pre></td></tr></table></figure><h5 id="7-练习"><a href="#7-练习" class="headerlink" title="7.练习"></a>7.练习</h5><h6 id="1-密码校验"><a href="#1-密码校验" class="headerlink" title="1.密码校验"></a>1.密码校验</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// 密码校验</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 两次密码输入一致</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.1.获取密码框和确认密码框的js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pwd1 = <span class="built_in">document</span>.getElementById(<span class="string">'pwd1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pwd2 = <span class="built_in">document</span>.getElementById(<span class="string">'pwd2'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.2 校验密码是否一致的方法</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boo = pwd1.value == pwd2.value;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(boo == <span class="literal">true</span>)&#123;<span class="comment">// 密码一致</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'pwdwarn'</span>).style.display=<span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 密码不一致</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'pwdwarn'</span>).style.display=<span class="string">'inline'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> boo;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 1.3 给确认密码框绑定失去焦点事件</span></span></span><br><span class="line"><span class="actionscript">    pwd2.onblur=checkPwd; <span class="comment">// 这里绑定函数，不能加括号</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 邮箱格式正确</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.1 定义邮箱正则表达式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> emailReg = <span class="regexp">/^()@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.2 获取邮箱的js对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> email = <span class="built_in">document</span>.getElementById(<span class="string">'email'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.3 定义校验函数（方法）</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">checkEmail</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> boo = emailReg.test(email.value);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(boo ==  <span class="literal">true</span>)&#123; <span class="comment">// 校验通过</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'emailwarn'</span>).style.display=<span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 校验不通过</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'emailwarn'</span>).style.display=<span class="string">'inline'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> boo;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 2.4 给邮箱绑定失去焦点事件</span></span></span><br><span class="line">    email.onblur=checkEmail;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 3. 手机号格式正确 （课下作业....）</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> phone = <span class="built_in">document</span>.getElementById(<span class="string">"phone"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> phonereg = <span class="regexp">/^1[3456789]\d&#123;9&#125;$/</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">tel</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        let <span class="keyword">is</span> = phonereg.test(phone.value);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!<span class="keyword">is</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"phonewarn"</span>).style.display = <span class="string">"inline"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">is</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">    phone.onblur = tel;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 4.表单提交时 会触发这个 onsubmit事件</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'myForm'</span>).onsubmit=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> checkPwd()&amp;&amp;checkEmail()&amp;&amp;tel(); <span class="comment">// 返回true可以提交，返回false表单不做任何操作</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-商品全选"><a href="#2-商品全选" class="headerlink" title="2.商品全选"></a>2.商品全选</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取所有的商品复选框</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input[type="checkbox"]'</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1. 全选</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn1'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> b <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line"><span class="actionscript">            b.checked=<span class="literal">true</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 2. 反选</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'btn2'</span>).onclick=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> b <span class="keyword">of</span> boxs) &#123;</span></span><br><span class="line">            b.checked=!b.checked;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="3-省市联动"><a href="#3-省市联动" class="headerlink" title="3.省市联动"></a>3.省市联动</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">省市级联</span></span><br><span class="line"><span class="comment">1. 页面加载完成后自动装载省数据</span></span><br><span class="line"><span class="comment">2. 当选中省时,装载该省的市数据</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 准备数据</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">            data[<span class="string">'北京'</span>] = [<span class="string">'顺义区'</span>, <span class="string">'昌平区'</span>, <span class="string">'朝阳区'</span>];</span></span><br><span class="line"><span class="actionscript">            data[<span class="string">'河北'</span>] = [<span class="string">"保定"</span>,<span class="string">"石家庄"</span>,<span class="string">"廊坊"</span>];</span></span><br><span class="line"><span class="actionscript">            data[<span class="string">'辽宁'</span>] = [<span class="string">"沈阳"</span>,<span class="string">"铁岭"</span>,<span class="string">"抚顺"</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> provinceId = <span class="built_in">document</span>.getElementById(<span class="string">"provinceId"</span>);<span class="comment">//获取省下拉列表</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> cityId = <span class="built_in">document</span>.getElementById(<span class="string">"cityId"</span>);<span class="comment">//获取市下拉列表</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 1.页面加载成功后，初始化省份数据</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">in</span> data)&#123; <span class="comment">// 索引for</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="javascript">                    provinceId.innerHTML+=<span class="string">`&lt;option value="<span class="subst">$&#123;index&#125;</span>"&gt;<span class="subst">$&#123;index&#125;</span>&lt;/option&gt;`</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 2.给省份下拉框绑定onchange事件</span></span></span><br><span class="line"><span class="actionscript">            provinceId.onchange=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 清空上一次选择城市信息</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                cityId.innerHTML='<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>----请-选-择-市----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>';</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);<span class="comment">// 当前用户选中的value值 ，它就是二维数组的索引</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data[<span class="keyword">this</span>.value]); <span class="comment">// 城市列表</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> citys = data[<span class="keyword">this</span>.value];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> city <span class="keyword">of</span> citys)&#123; <span class="comment">// 增强for</span></span></span><br><span class="line"><span class="javascript">                    cityId.innerHTML+=<span class="string">`&lt;option value="<span class="subst">$&#123;city&#125;</span>"&gt;<span class="subst">$&#123;city&#125;</span>&lt;/option&gt;`</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-隔行换色"><a href="#4-隔行换色" class="headerlink" title="4.隔行换色"></a>4.隔行换色</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">隔行变色</span></span><br><span class="line"><span class="comment">1. 表格奇偶行颜色不同</span></span><br><span class="line"><span class="comment">2. 鼠标移入颜色高亮</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> oldColor;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 获取所有tr的js对象 数组</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> trs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'table tr'</span>);  <span class="comment">// 注意：这里使用的后代选择器  ，这里是js的一个小坑 table&gt;tr</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 普通for循环</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; trs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="comment">//偶数索引（奇数行）</span></span></span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor=<span class="string">'lightgrey'</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123; <span class="comment">// 奇数索引（偶数行）</span></span></span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor=<span class="string">'skyblue'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        trs[i].onmouseover=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123; <span class="comment">// 鼠标移入某一行</span></span></span><br><span class="line"><span class="actionscript">            oldColor=trs[i].style.backgroundColor<span class="comment">// 获取当前行的颜色</span></span></span><br><span class="line"><span class="actionscript">            trs[i].style.backgroundColor=<span class="string">'pink'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        trs[i].onmouseout=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;<span class="comment">// 鼠标移出某一行</span></span></span><br><span class="line">            trs[i].style.backgroundColor=oldColor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、JQuery框架"><a href="#四、JQuery框架" class="headerlink" title="四、JQuery框架"></a>四、JQuery框架</h3><h4 id="1-HTML引入jQuery"><a href="#1-HTML引入jQuery" class="headerlink" title="1.HTML引入jQuery"></a>1.HTML引入jQuery</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../js/jquery-3.2.1.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-jQuery与JS区别"><a href="#2-jQuery与JS区别" class="headerlink" title="2.jQuery与JS区别"></a>2.jQuery与JS区别</h4><p>jQuery虽然本质上也是js，但如果使用jQuery的属性和方法那么必须保证对象是jQuery对象而不是js对象。</p><p>通过js方式获取的是js对象，通过jQuery方式获取的是jQuery对象。两者的关系与区别总结如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>jQuery对象与js对象相互转换</span><br><span class="line"><span class="code">js --&gt; jq</span></span><br><span class="line"><span class="code">$(js对象) 或者 jQuery(js对象)</span></span><br><span class="line"><span class="code">jq --&gt; js</span></span><br><span class="line"><span class="code">jq对象[索引] 或者 jq对象.get(索引)</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">2. </span>页面加载事件</span><br><span class="line"><span class="code">js</span></span><br><span class="line"><span class="code">window.onload=function()&#123;&#125;</span></span><br><span class="line"><span class="code">jq</span></span><br><span class="line"><span class="code">$(function()&#123;&#125;)</span></span><br><span class="line"><span class="code">区别</span></span><br><span class="line"><span class="code">js：只能定义一次，如果定义多次，后加载会进行覆盖</span></span><br><span class="line"><span class="code">jq：可以定义多次</span></span><br></pre></td></tr></table></figure><h4 id="3-Jquery选择器"><a href="#3-Jquery选择器" class="headerlink" title="3.Jquery选择器"></a>3.Jquery选择器</h4><h5 id="1-基本选择器"><a href="#1-基本选择器" class="headerlink" title="1.基本选择器"></a>1.基本选择器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>标签（元素）选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("html标签名") 获得所有匹配标签名称的元素</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>id选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("#id的属性值") 获得与指定id属性值匹配的元素</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>类选择器</span><br><span class="line"><span class="bullet">* </span>语法：$(".class的属性值") 获得与指定的class属性值匹配的元素</span><br></pre></td></tr></table></figure><h5 id="2-层级关系选择器"><a href="#2-层级关系选择器" class="headerlink" title="2. 层级关系选择器"></a>2. 层级关系选择器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>后代选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("A B") 选择A元素内部的所有B元素</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>并集选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("选择器1,选择器2....") 获取多个选择器选中的所有元素</span><br></pre></td></tr></table></figure><h5 id="3-属性选择器"><a href="#3-属性选择器" class="headerlink" title="3.属性选择器"></a>3.属性选择器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>属性选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("A[属性名='值']") 包含指定属性等于指定值的选择器</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>复合属性选择器</span><br><span class="line"><span class="bullet">* </span>语法：$("A[<span class="string">属性名='值'</span>][<span class="symbol"></span>]...") 包含多个属性条件的选择器</span><br></pre></td></tr></table></figure><h5 id="4-过滤选择器"><a href="#4-过滤选择器" class="headerlink" title="4.过滤选择器"></a>4.过滤选择器</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>首元素选择器</span><br><span class="line"><span class="bullet">* </span>语法： :first 获得选择的元素中的第一个元素</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>尾元素选择器</span><br><span class="line"><span class="bullet">* </span>语法： :last 获得选择的元素中的最后一个元素</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>偶数选择器</span><br><span class="line"><span class="bullet">* </span>语法： :even 偶数，从 0 开始计数</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>奇数选择器</span><br><span class="line"><span class="bullet">* </span>语法： :odd 奇数，从 0 开始计数</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>指定索引选择器</span><br><span class="line"><span class="bullet">* </span>语法： :eq(index) 指定索引元素</span><br></pre></td></tr></table></figure><h5 id="5-对象遍历"><a href="#5-对象遍历" class="headerlink" title="5.对象遍历"></a>5.对象遍历</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>语法：</span><br><span class="line"><span class="code">jq对象.each(function(index,element)&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="五、Jquery的DOM操作"><a href="#五、Jquery的DOM操作" class="headerlink" title="五、Jquery的DOM操作"></a>五、Jquery的DOM操作</h3><h4 id="1-Jquery操作内容"><a href="#1-Jquery操作内容" class="headerlink" title="1.Jquery操作内容"></a>1.Jquery操作内容</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>text(): 获取/设置元素的标签体纯文本内容</span><br><span class="line"><span class="bullet">* </span>相当于js： innerText属性</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>html(): 获取/设置元素的标签体超文本内容</span><br><span class="line"><span class="bullet">* </span>相当于js： innerHTML属性</span><br></pre></td></tr></table></figure><h4 id="2-Jquery操作属性"><a href="#2-Jquery操作属性" class="headerlink" title="2.Jquery操作属性"></a>2.Jquery操作属性</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>val()： 获取/设置元素的value属性值</span><br><span class="line"><span class="bullet">* </span>相当于：js对象.value</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>attr(): 获取/设置元素的属性</span><br><span class="line"><span class="code">removeAttr()删除属性</span></span><br><span class="line"><span class="bullet">* </span>相当于：js对象.setAttribute() / js对象.getAttribute()</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">获取爱好的checked属性</span></span><br><span class="line"><span class="code">        使用attr() 获取</span></span><br><span class="line">  选中返回：checked</span><br><span class="line"><span class="code">            未选中：undefined      </span></span><br><span class="line"><span class="bullet">3. </span>prop():获取/设置元素的属性</span><br><span class="line"><span class="code">removeAttr()删除属性</span></span><br><span class="line"><span class="code">jq在1.6版本之后，提供另一组API prop 通常处理属性值为布尔类型操作</span></span><br><span class="line"><span class="code">例如：checked selected等</span></span><br></pre></td></tr></table></figure><h4 id="3-Jquery操作样式"><a href="#3-Jquery操作样式" class="headerlink" title="3. Jquery操作样式"></a>3. Jquery操作样式</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>直接修改jq对象样式属性</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">jq对象.css()</span></span><br><span class="line"><span class="code">css(样式名) 获取</span></span><br><span class="line"><span class="code">css(样式名,样式值) 设置</span></span><br><span class="line"><span class="code">优点：支持css语法</span></span><br><span class="line"><span class="code">举例：font-size</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>添加/删除jq对象样式</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">jq对象.addClass()</span></span><br><span class="line"><span class="code">jq对象.removeClass()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>切换jq对象样式</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="code">jq对象.toggleClass()  无添加，有删除</span></span><br></pre></td></tr></table></figure><h4 id="4-Jquery操作元素"><a href="#4-Jquery操作元素" class="headerlink" title="4.Jquery操作元素"></a>4.Jquery操作元素</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>$(标签) 创建一个标签</span><br><span class="line"><span class="code">$('&lt;li&gt;xxx&lt;/li&gt;')</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>$.prepend()  在父标签中将子标签放在第一个位置</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>$.append()   在父标签中将子标签放在最后一个位置</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>$.empty() 清空子元素 （断子绝孙脚）</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>$.remove() 删除自己   （满门抄斩）</span><br></pre></td></tr></table></figure><h4 id="5-Jquery事件绑定"><a href="#5-Jquery事件绑定" class="headerlink" title="5.Jquery事件绑定"></a>5.Jquery事件绑定</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jQuery的事件与js的事件的功能和作用一样，只是在使用语法上稍微有些差异。</span><br><span class="line">js对象.事件属性=function()&#123;&#125;</span><br><span class="line"></span><br><span class="line">jq对象.事件函数(function()&#123;&#125;)</span><br></pre></td></tr></table></figure><p><strong>常见事件</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>点击事件：</span><br><span class="line"><span class="bullet">        1. </span>click()：单击事件</span><br><span class="line"><span class="bullet">        2. </span>dblclick()：双击事件</span><br><span class="line"><span class="bullet">2. </span>焦点事件</span><br><span class="line"><span class="bullet">        1. </span>blur()：失去焦点</span><br><span class="line"><span class="bullet">        2. </span>focus():元素获得焦点。</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>鼠标事件：</span><br><span class="line"><span class="bullet">        1. </span>mousedown()鼠标按钮被按下。</span><br><span class="line"><span class="bullet">        2. </span>mouseup()鼠标按键被松开。</span><br><span class="line"><span class="bullet">        3. </span>mousemove()鼠标被移动。</span><br><span class="line"><span class="bullet">        4. </span>mouseover()鼠标移到某元素之上。</span><br><span class="line"><span class="bullet">        5. </span>mouseout()鼠标从某元素移开。</span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">4. </span>键盘事件：</span><br><span class="line"><span class="bullet">1. </span>keydown()某个键盘按键被按下。</span><br><span class="line"><span class="bullet">2. </span>keyup()某个键盘按键被松开。</span><br><span class="line"><span class="bullet">3. </span>keypress()某个键盘按键被按下并松开。</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>改变事件</span><br><span class="line"><span class="bullet">        1. </span>change()域的内容被改变。</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>表单事件：</span><br><span class="line"><span class="bullet">        1. </span>submit()提交按钮被点击。</span><br></pre></td></tr></table></figure><h4 id="6-案例"><a href="#6-案例" class="headerlink" title="6.案例"></a>6.案例</h4><h5 id="1-隔行换色"><a href="#1-隔行换色" class="headerlink" title="1.隔行换色"></a>1.隔行换色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 偶数索引 奇数行</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'tr:even'</span>).css(<span class="string">'background-color'</span>,<span class="string">'lightgray'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 奇数索引 偶数行</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'tr:odd'</span>).css(<span class="string">'background-color'</span>,<span class="string">'skyblue'</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-商品全选-1"><a href="#2-商品全选-1" class="headerlink" title="2.商品全选"></a>2.商品全选</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 全选</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn1'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'input[type="checkbox"]'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 反选，必须遍历才能实现</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn2'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'input[type="checkbox"]'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index,element</span>) </span>&#123; <span class="comment">// 注意：element</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// js方式  推荐</span></span></span><br><span class="line"><span class="actionscript">           <span class="comment">// element.checked = ! element.checked;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// jq方式 比较麻烦 了解</span></span></span><br><span class="line"><span class="javascript">            $(element).prop(<span class="string">'checked'</span>,!$(element).prop(<span class="string">'checked'</span>))</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> str = <span class="string">'哈哈'</span>+<span class="number">1</span>+<span class="string">"呵呵"</span>;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    let str = '<span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-QQ表情"><a href="#3-QQ表情" class="headerlink" title="3.QQ表情"></a>3.QQ表情</h5><p><img src="summary_Web.assets/image-20200502094449270.png" alt="image"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 给所有的图片绑定点击事件</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.emoji img'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// this 表示当前 img标签</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#word'</span>).append($(<span class="keyword">this</span>).clone())</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="六、JSON"><a href="#六、JSON" class="headerlink" title="六、JSON"></a>六、JSON</h3><p><strong>JavaScript对象表示形式（JavaScript Object Notation）</strong></p><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以取代XML笨重的数据结构，和xml相比：更小、更快，更易解析</span><br><span class="line">json、xml作用：作为数据的载体，在网络中传输</span><br></pre></td></tr></table></figure><h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>对象类型</span><br><span class="line"><span class="code">&#123;name:value,name:value&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>数组类型</span><br><span class="line"><span class="code">[</span></span><br><span class="line"><span class="code">            &#123;name:value,name:value&#125;,</span></span><br><span class="line"><span class="code">            &#123;name:value,name:value&#125;,</span></span><br><span class="line"><span class="code">            &#123;name:value,name:value&#125;</span></span><br><span class="line"><span class="code">]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>复杂对象</span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">            name:value,</span></span><br><span class="line"><span class="code">            list:[&#123;name:value&#125;,&#123;&#125;,&#123;&#125;]</span></span><br><span class="line"><span class="code">            user:&#123;name:value&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-JSON格式转换"><a href="#3-JSON格式转换" class="headerlink" title="3.JSON格式转换"></a>3.JSON格式转换</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>JSON对象与字符串转换的相关函数</span><br><span class="line"><span class="code">语法：</span></span><br><span class="line"><span class="bullet">    1. </span>JSON.stringify(object) 把json对象转为字符串</span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="bullet">    2. </span>JSON.parse(string) 把字符串转为json对象</span><br></pre></td></tr></table></figure><h3 id="七、AJAX"><a href="#七、AJAX" class="headerlink" title="七、AJAX"></a>七、AJAX</h3><p><strong>传统网站中存在的问题</strong></p><ul><li><p>网速慢的情况下，页面加载时间长，用户只能等待</p></li><li><p>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</p></li><li><p>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</p></li></ul><p><strong>AJAX可以解决以上问题</strong></p><p>​    ajax这哥们是==浏览器提供的一套方法==，在无需重新加载整个网页情况下，能够更新部分网页的技术，从而提高用户浏览网站应用的体验。</p><blockquote><p>中文音译：阿贾克斯</p></blockquote><p><strong>应用场景</strong></p><ul><li>搜索框提示</li><li>表单数据验证</li><li>无刷新分页</li></ul><h4 id="1-JS原生AJAX"><a href="#1-JS原生AJAX" class="headerlink" title="1.JS原生AJAX"></a>1.JS原生AJAX</h4><h5 id="1-案例需求"><a href="#1-案例需求" class="headerlink" title="1.案例需求"></a>1.案例需求</h5><p><img src="summary_Web.assets/image-20200502100930397.png" alt="image-20200502100930397"></p><h5 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>创建ajax对象</span><br><span class="line"><span class="code">let xhr = new XMLHttpRequest();</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>告诉ajax请求方式和请求地址</span><br><span class="line"><span class="code">xhr.open(请求方式，请求地址);</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>发送请求</span><br><span class="line"><span class="code">xhr.send();</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>获取服务器返回的数据</span><br><span class="line"><span class="code">xhr.onload=function()&#123;</span></span><br><span class="line"><span class="code">            xhr.responseText;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userwarn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'username'</span>).onblur=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 1.创建ajax对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 2.告诉ajax请求方式和请求地址</span></span></span><br><span class="line"><span class="actionscript">        xhr.open(<span class="string">'get'</span>,<span class="string">'http://localhost:8080/check?username='</span>+<span class="keyword">this</span>.value)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 3.发送请求</span></span></span><br><span class="line">        xhr.send();</span><br><span class="line"><span class="actionscript">        <span class="comment">// 4.获取服务器返回数据</span></span></span><br><span class="line"><span class="actionscript">        xhr.onload=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(xhr.responseText);<span class="comment">// 返回的字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'userwarn'</span>).innerText=xhr.responseText;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-JQuery的Ajax插件"><a href="#2-JQuery的Ajax插件" class="headerlink" title="2.JQuery的Ajax插件"></a>2.JQuery的Ajax插件</h4><h5 id="1-ajax函数"><a href="#1-ajax函数" class="headerlink" title="1.ajax函数"></a>1.ajax函数</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>语法：</span><br><span class="line"><span class="code">$.ajax(&#123;name:value,name:value&#125;)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>参数：</span><br><span class="line"><span class="code">url:请求地址</span></span><br><span class="line"><span class="code">type：请求方式  （get：大小有限制、post：大小没有限制）</span></span><br><span class="line"><span class="code">data：请求参数</span></span><br><span class="line"><span class="code">success：请求成功时，执行的回调函数</span></span><br><span class="line"><span class="code">-------</span></span><br><span class="line"><span class="code">error：请求失败时，执行的回调函数</span></span><br><span class="line"><span class="code">dataType：预期服务器返回的数据类型：text、json</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userwarn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 给文本框绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#username'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用ajax函数发送请求</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://localhost:8080/check"</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">            data:<span class="string">"username="</span>+$(<span class="keyword">this</span>).val(),</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 实现局部刷新</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#userwarn'</span>).text(resp);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            error:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'服务器繁忙，请稍后重试...'</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">           <span class="comment">// dataType:"json"  // 相当于把 json字符串 转为了json对象</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-get函数"><a href="#2-get函数" class="headerlink" title="2.get函数"></a>2.get函数</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>语法：</span><br><span class="line"><span class="code">$.get(url,success);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>参数：</span><br><span class="line"><span class="code">url:请求地址</span></span><br><span class="line"><span class="code">success：请求成功时的回调函数</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userwarn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 给文本框绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#username'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用get函数发送</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = <span class="string">'http://localhost:8080/check?username='</span>+$(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="actionscript">        $.get(url,<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 局部刷新</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#userwarn'</span>).text(resp);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-post函数"><a href="#3-post函数" class="headerlink" title="3.post函数"></a>3.post函数</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>语法：</span><br><span class="line"><span class="code">$.post(url,data,success);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>参数：</span><br><span class="line"><span class="code">url：请求地址</span></span><br><span class="line"><span class="code">data：请求参数</span></span><br><span class="line"><span class="code">success：请求成功时的回调函数</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userwarn"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 给文本框绑定失去焦点事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#username'</span>).blur(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用post函数发送请求</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url=<span class="string">'http://localhost:8080/check'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> data=<span class="string">'username='</span>+$(<span class="keyword">this</span>).val();</span></span><br><span class="line"><span class="javascript">        $.post(url,data,<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 局部刷新</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#userwarn'</span>).text(resp);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-同步和异步"><a href="#4-同步和异步" class="headerlink" title="4.同步和异步"></a>4.同步和异步</h5><p><strong>使用ajax发送的是异步请求</strong></p><p><strong>同步和异步请求指的是，客户端和服务器交互的行为</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>发送ajax<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 给按钮绑定点击事件</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#btn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 使用ajax函数发送请求，ajax默认的是异步提交，可以改为同步（了解）</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">'http://localhost:8080/sleep'</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">'get'</span>,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line">                alert(resp)</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="keyword">async</span>:<span class="literal">false</span><span class="comment">// 同步提交</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-案例"><a href="#5-案例" class="headerlink" title="5.案例"></a>5.案例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../img/logo.png"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"keyword"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"搜索一下"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//1.为文本框绑定键盘弹起事件 keyup</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">"#search"</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//10.第二次发送请求时对预选框进行重置</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">".show"</span>).show();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//测试有没有取到键盘录入的值</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log($(<span class="keyword">this</span>).val());</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//16.解决用户随意输入空格的问题</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim() == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.value = <span class="keyword">this</span>.value.trim();</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">//2.使用ajax函数，发送请求，请求方式为post</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"http://localhost:8080/search"</span>,</span></span><br><span class="line"><span class="actionscript">            type:<span class="string">"post"</span>,</span></span><br><span class="line"><span class="javascript">            data:<span class="string">"keyword="</span> + $(<span class="keyword">this</span>).val(),</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(resp)</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="comment">//6.清空上次搜索是显示的预选内容</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">".show"</span>).empty();</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//3.请求完成返回结果，得到的是数组，要进行遍历</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> ele <span class="keyword">of</span> resp) &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//4.多个元素一起展示，要进行拼接</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//5.运行时出现了问题，进行第二次搜索时，第一次搜索的内容还在。解决办法：要对第一预选的内容进行清空，使用empty</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//7.模拟百度搜索，点击预选框的词条，会添加进入搜索栏，预选框绑定单击事件，选中的进入搜索栏，其他的隐藏,</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 由于是多个词条，不能使用class选择器，所以不能使用匿名对象，而且需要确定当前词条是哪个，所以要使用this作为参数，传入函数；</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//11.改变鼠标样式，词条位置，靠左对齐，前面有间隙</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//12.优化，当鼠标放在词条上的时候，词条的背景颜色会发生改变，使用鼠标事件中的的mouseover和mouseout</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                    <span class="comment">//15.问题：当用户输入空格时，应该不做回应</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   $(".show").append(`<span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"getResp(this)"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;padding-left: 5px;text-align: left"</span> <span class="attr">onmouseover</span>=<span class="string">"over(this)"</span> <span class="attr">onmouseout</span>=<span class="string">"out(this)"</span>&gt;</span>$&#123;ele&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`)</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="comment">//8.实现选中词条进搜索框，其他隐藏的功能</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getResp</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">"#search"</span>).val($(obj).text());</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".show"</span>).hide();</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//9.出现的问题，第二次搜索，没有预选框显示，</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 解决办法：在第二次搜索的时候进行重置，重新显示</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//13.实现鼠标移入背景变色</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">over</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(obj).css(<span class="string">"background-color"</span>,<span class="string">"#f0f0f0"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//14.实现鼠标移出背景回复颜色</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">out</span><span class="params">(obj)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(obj).css(<span class="string">"background-color"</span>,<span class="string">"white"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="八、Tomcat"><a href="#八、Tomcat" class="headerlink" title="八、Tomcat"></a>八、Tomcat</h3><p><strong>C/S架构</strong></p><blockquote><p>Client/Server 客户端/服务器</p></blockquote><blockquote><p>访问服务器资源必须安装客户端软件</p></blockquote><p><img src="summary_Web.assets/image-20200502113627393.png" alt="image"></p><p><strong>B/S架构</strong></p><blockquote><p>Browser/Server 浏览器/服务器</p><p>访问服务器资源不需要专门安装客户端软件,而是直接通过浏览器访问服务器资源.</p></blockquote><p><img src="summary_Web.assets/image-20200502113738095.png" alt="image"></p><p><strong>资源的分类</strong></p><p><img src="summary_Web.assets/image-20200502113409089.png" alt="image"></p><h4 id="1-Tomcat使用"><a href="#1-Tomcat使用" class="headerlink" title="1. Tomcat使用"></a>1. Tomcat使用</h4><h5 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h5><p>Tomcat 官网下载地址：<a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p><p><img src="summary_Web.assets/image-20200502114117632.png" alt="image"></p><h5 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h5><p><img src="summary_Web.assets/image-20200502114212983.png" alt="image"></p><h5 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3.目录结构"></a>3.目录结构</h5><p><img src="summary_Web.assets/image-20200502114239148.png" alt="image"></p><h5 id="4-启动和关闭"><a href="#4-启动和关闭" class="headerlink" title="4.启动和关闭"></a>4.启动和关闭</h5><p><img src="summary_Web.assets/image-20200502114310660.png" alt="image"></p><h5 id="5-启动报错问题"><a href="#5-启动报错问题" class="headerlink" title="5.启动报错问题"></a>5.启动报错问题</h5><p><strong>Java环境变量</strong></p><p>现象: 黑窗口一闪而过(不到半秒)</p><blockquote><p>解决:<br>    配置好Java环境变量<br>        JAVA_HOME<br>        Path</p></blockquote><p><strong>8080端口被占用</strong></p><p>现象：启动时报错（黑框口等了一会就关闭）</p><p><img src="summary_Web.assets/image-20200502114452086.png" alt="image"></p><p><img src="summary_Web.assets/image-20200502114514715.png" alt="image"></p><p><strong>暴力：找到占用的端口号的对应进程，杀死进程</strong></p><p>cmd命令：<code>netstat -ano | findstr &quot;8080&quot;</code></p><p><img src="summary_Web.assets/image-20200502114606395.png" alt="image"></p><p><strong>进入到任务管理器，找到它，干掉它</strong></p><p><img src="summary_Web.assets/image-20200502114635514.png" alt="image"></p><p><strong>温柔：修改Tomcat端口号</strong></p><p>进入Tomcat安装目录/conf/server.xml 文件修改</p><p>==注意：如果是其他软件占用了8080，你可以直接修改这一个就行…==</p><p><img src="summary_Web.assets/image-20200502114715802.png" alt="image"></p><p>==注意：如果你想启动多个tomcat的话，需要修改三个端口号==</p><p><img src="summary_Web.assets/image-20200502114740941.png" alt="image"></p><p><strong>端口号：个人指定范围：1024~65535之间，只要不与其他软件冲入即可</strong></p><p><img src="summary_Web.assets/image-20200502114820218.png" alt="image"></p><h5 id="6-访问测试"><a href="#6-访问测试" class="headerlink" title="6.访问测试"></a>6.<strong>访问测试</strong></h5><p><img src="summary_Web.assets/image-20200502114910986.png" alt="image"></p><h4 id="2-发布项目三种方式"><a href="#2-发布项目三种方式" class="headerlink" title="2.发布项目三种方式"></a>2.发布项目三种方式</h4><h5 id="1-webapps-部署-最简单"><a href="#1-webapps-部署-最简单" class="headerlink" title="1.webapps 部署(最简单)"></a>1.webapps 部署(最简单)</h5><p><img src="summary_Web.assets/image-20200502115012110.png" alt="image"></p><p><img src="summary_Web.assets/image-20200502115039313.png" alt="image"></p><p><strong>这种方案(支持热更新)，一般在开发完毕后，来使用的</strong></p><h5 id="2-server-xml部署"><a href="#2-server-xml部署" class="headerlink" title="2.server.xml部署"></a>2.server.xml部署</h5><p>在tomcat/conf/server.xml中找到<Host>标签，添加<Context>标签</p><p><img src="summary_Web.assets/1586746435946.png" alt="image"></p><p><strong>缺点</strong></p><blockquote><p>1.配置文件修改完毕后，需要重启后生效…</p><p>2.server.xml是tomcat的核心配置文件，如果稍有不慎操作失误，整个tomcat启动失败</p><p>3.这种方案作为了解即可</p></blockquote><h5 id="3-独立xml部署-开发时使用"><a href="#3-独立xml部署-开发时使用" class="headerlink" title="3.独立xml部署(开发时使用)"></a>3.独立xml部署(开发时使用)</h5><p>在tomcat/conf/Catalina/localhost 目录下创建一个xml文件，添加<Context>标签</p><p><img src="summary_Web.assets/1586746803858.png" alt="image"></p><p><strong>文件名就是虚拟路径</strong></p><h5 id="3-web的项目结构"><a href="#3-web的项目结构" class="headerlink" title="3.web的项目结构"></a>3.web的项目结构</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>前端项目</span><br><span class="line"><span class="code">        |-- myapp(项目名称)</span></span><br><span class="line"><span class="code">            |-- css 目录</span></span><br><span class="line"><span class="code">            |-- js  目录</span></span><br><span class="line"><span class="code">            |-- html目录</span></span><br><span class="line"><span class="code">            |-- img 目录</span></span><br><span class="line"><span class="code">            |-- index.html</span></span><br><span class="line"><span class="code">            </span></span><br><span class="line"><span class="bullet">2. </span>web项目</span><br><span class="line"><span class="code">|-- myapp（项目名称）</span></span><br><span class="line"><span class="code">|-- 静态资源（html、css、js、img）</span></span><br><span class="line"><span class="code">|-- WEB-INF 目录（浏览器无法直接访问内部的资源）</span></span><br><span class="line"><span class="code">|-- classes 目录（java的字节码文件）</span></span><br><span class="line"><span class="code">|-- lib     目录（当前项目所需要的第三方jar包）</span></span><br><span class="line"><span class="code">|-- web.xml 文件 （当前项目核心配置文件，servlet3.0可以省略）</span></span><br><span class="line"><span class="code">|-- index.html or index.jsp</span></span><br></pre></td></tr></table></figure><h4 id="3-Idea中使用Tomcat"><a href="#3-Idea中使用Tomcat" class="headerlink" title="3.Idea中使用Tomcat"></a>3.Idea中使用Tomcat</h4><h5 id="1-配置Tomcat"><a href="#1-配置Tomcat" class="headerlink" title="1. 配置Tomcat"></a>1. 配置Tomcat</h5><p><img src="summary_Web.assets/1586748223130.png" alt="1586748223130"></p><p><img src="summary_Web.assets/1586748144024.png" alt="1586748144024"></p><p>再次点击，确定是否配置成功…</p><p><img src="summary_Web.assets/1586748188681.png" alt="1586748188681"></p><h5 id="2-创建Web项目"><a href="#2-创建Web项目" class="headerlink" title="2.创建Web项目"></a>2.创建Web项目</h5><p><img src="summary_Web.assets/1586748442579.png" alt="1586748442579"></p><p><img src="summary_Web.assets/1586748484283.png" alt="1586748484283"></p><p><img src="summary_Web.assets/1586748571082.png" alt="1586748571082"></p><p><img src="summary_Web.assets/1586748796809.png" alt="1586748796809"></p><p><img src="summary_Web.assets/1586748889107.png" alt="1586748889107"></p><p><img src="summary_Web.assets/1586748932445.png" alt="1586748932445"></p><p><img src="summary_Web.assets/1586749040094.png" alt="1586749040094"></p><h5 id="3-页面资源热更新"><a href="#3-页面资源热更新" class="headerlink" title="3.页面资源热更新"></a>3.页面资源热更新</h5><p><img src="summary_Web.assets/1586749225881.png" alt="1586749225881"></p><p><img src="summary_Web.assets/1586749491147.png" alt="1586749491147"></p><h3 id="九、Http协议"><a href="#九、Http协议" class="headerlink" title="九、Http协议"></a>九、Http协议</h3><p><strong>超文本传输协议</strong>（Hyper Text Transfer Protocol)是互联网上应用最为广泛的一种网络协议。</p><p>传输协议：在客户端和服务器端通信时，规范了传输数据的格式</p><p><img src="summary_Web.assets/1586750890856.png" alt="1586750890856"></p><p><img src="summary_Web.assets/1586751086044.png" alt="1586751086044"></p><p><img src="summary_Web.assets/1586751210042.png" alt="1586751210042"></p><h4 id="1-HTTP请求"><a href="#1-HTTP请求" class="headerlink" title="1.HTTP请求"></a>1.HTTP请求</h4><h5 id="1-浏览器查看Http请求协议"><a href="#1-浏览器查看Http请求协议" class="headerlink" title="1.浏览器查看Http请求协议"></a>1.浏览器查看Http请求协议</h5><h6 id="1-get方式"><a href="#1-get方式" class="headerlink" title="1.get方式"></a>1.get方式</h6><p><img src="summary_Web.assets/1586758259886.png" alt="1586758259886"></p><h6 id="2-post方式"><a href="#2-post方式" class="headerlink" title="2.post方式"></a>2.post方式</h6><p><img src="summary_Web.assets/1586758396111.png" alt="1586758396111"></p><h5 id="2-HTTP请求消息格式"><a href="#2-HTTP请求消息格式" class="headerlink" title="2.HTTP请求消息格式"></a>2.HTTP请求消息格式</h5><h6 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code">请求方式 请求路径 协议/版本号</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">POST /day07_myapp/static/login.html HTTP/1.1</span></span><br><span class="line"><span class="code">GET /day07_myapp/static/login.html?username=jack&amp;password=123 HTTP/1.1</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>请求方式区别</span><br><span class="line"><span class="code">get</span></span><br><span class="line"><span class="code">1.请求参数在地址栏显示（请求行）</span></span><br><span class="line"><span class="code">2.请求参数大小有限制</span></span><br><span class="line"><span class="code">3.数据不太安全</span></span><br><span class="line"><span class="code">post</span></span><br><span class="line"><span class="code">1.请求参数不在地址栏显示（请求体）</span></span><br><span class="line"><span class="code">2.请求参数大小没有限制</span></span><br><span class="line"><span class="code">3.数据相对安全</span></span><br></pre></td></tr></table></figure><h6 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h6><ul><li>格式<pre><code>请求头名称：请求头的值</code></pre></li><li>例如   <pre><code>Host: localhost:8080</code></pre></li></ul><p><strong>常见请求头</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">------------------------------------------（了解）</span></span><br><span class="line"><span class="bullet">1. </span>Host: localhost:8080         访问服务器的地址（域名+端口）</span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>Connection: keep-alive       长连接（http1.1协议）</span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>Cache-Control: max-age=0 设置缓存数据的存活时间，单位秒</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>Upgrade-Insecure-Requests:1   客户端支持https加密协议  </span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">---------------------------------------（重点）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>Referer: http://baidu.com    上一次请求的地址</span><br><span class="line"><span class="code">百度推广....</span></span><br><span class="line"><span class="code">        防盗链....</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">6. </span>User-Agent:        客户端系统和浏览器版本</span><br><span class="line"><span class="code">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) Chrome/63.0 Safari/537.36</span></span><br><span class="line"><span class="code">浏览器兼容性</span></span><br><span class="line"><span class="code">判断</span></span><br><span class="line"><span class="code">谷歌方式一</span></span><br><span class="line"><span class="code">IE方式二</span></span><br><span class="line"><span class="code">火狐方式三</span></span><br></pre></td></tr></table></figure><h6 id="3-请求体（正文）"><a href="#3-请求体（正文）" class="headerlink" title="3.请求体（正文）"></a>3.请求体（正文）</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code">参数名=参数值&amp;参数名=参数值...</span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">username=jack&amp;password=123</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>注意：</span><br><span class="line"><span class="code">get方式没有请求体，post方式才有</span></span><br></pre></td></tr></table></figure><h4 id="3-HTTP响应头"><a href="#3-HTTP响应头" class="headerlink" title="3.HTTP响应头"></a>3.HTTP响应头</h4><h5 id="1-浏览器查看Http响应协议"><a href="#1-浏览器查看Http响应协议" class="headerlink" title="1.浏览器查看Http响应协议"></a>1.浏览器查看Http响应协议</h5><p><img src="summary_Web.assets/1586759633465.png" alt="1586759633465"></p><h5 id="2-HTTP响应消息格式"><a href="#2-HTTP响应消息格式" class="headerlink" title="2.HTTP响应消息格式"></a>2.HTTP响应消息格式</h5><h6 id="1-响应行"><a href="#1-响应行" class="headerlink" title="1.响应行"></a>1.响应行</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code">协议/版本号 状态码</span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">tomcat8：HTTP/1.1 200</span></span><br><span class="line"><span class="code">tomcat7：HTTP/1.1 200 OK</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>常见状态码</span><br><span class="line"><span class="code">--------------- 用户可以正常访问页面</span></span><br><span class="line"><span class="code">200 ：表示成功</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">302 ：重定向</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">304 ：从缓存中读取数据</span></span><br><span class="line"><span class="code">--------------- 用户无法正常访问页面</span></span><br><span class="line"><span class="code">404：请求资源未找到（not  found）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">405：请求的方法未找到</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">500：服务器内部错误（java代码写错了.....）</span></span><br></pre></td></tr></table></figure><h6 id="2-响应头"><a href="#2-响应头" class="headerlink" title="2.响应头"></a>2.响应头</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code">响应头名称：响应头的值</span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">Last-Modified: Mon, 13 Apr 2020 06:11:24 GMT</span></span><br></pre></td></tr></table></figure><p><strong>常见响应头</strong>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Location：通常与状态码302一起使用，实现重定向操作</span><br><span class="line"><span class="code">Location:http://www.itcast.cn</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>Content-Type：服务器告诉客户端，返回响应体的数据类型和编码方式</span><br><span class="line"><span class="code">Content-Type:text/html;charset=utf-8</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>Content-Disposition：服务器告诉客户端，以什么样方式打开响应体</span><br><span class="line"><span class="bullet">* </span>in-line（默认）：浏览器直接打开相应内容，展示给用户</span><br><span class="line"><span class="bullet">* </span>attachment;filename=文件名：浏览器以附件的方式保存文件 【文件下载】</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>Refresh：在指定间隔时间后，跳转到某个页面</span><br><span class="line"><span class="code">Refresh:5;http://www.bilibili.com</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5. </span>Last-Modified：通常与状态码304一起使用，实现缓存机制</span><br><span class="line"><span class="code">Last-Modified: Mon, 13 Apr 2020 06:11:24 GMT</span></span><br></pre></td></tr></table></figure><h6 id="3-响应体（正文）"><a href="#3-响应体（正文）" class="headerlink" title="3.响应体（正文）"></a>3.响应体（正文）</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>服务器返回的数据，由浏览器解析后展示给用户</span><br><span class="line">   用户看到页面所有的内容，都是在响应体中返回的</span><br></pre></td></tr></table></figure><h3 id="十、Servlet"><a href="#十、Servlet" class="headerlink" title="十、Servlet"></a>十、Servlet</h3><ul><li>servlet= server+applet 运行在服务器端的java程序。</li><li>Servlet是一个接口，一个类要想通过浏览器被访问到,那么这个类就必须直接或间接的实现Servlet接口</li></ul><p><strong>作用</strong></p><p>接收请求，处理逻辑，响应结果</p><h4 id="1-代码编写"><a href="#1-代码编写" class="headerlink" title="1.代码编写"></a>1.代码编写</h4><h5 id="1-编写普通java类，实现servlet接口"><a href="#1-编写普通java类，实现servlet接口" class="headerlink" title="1.编写普通java类，实现servlet接口"></a>1.编写普通java类，实现servlet接口</h5><p>重写抽象方法（service方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供服务</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        request:代表请求</span></span><br><span class="line"><span class="comment">        response：代表响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 向浏览器响应一句话</span></span><br><span class="line">        servletResponse.getWriter().write(<span class="string">"QuickServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-配置web-xml"><a href="#2-配置web-xml" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h5><p>配置servlet网络访问路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;web-app xmlns=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         version=<span class="string">"3.1"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        把QuickServlet交给tomcat管理</span><br><span class="line">            servlet-name：当前servlet的别名（使用类名即可）</span><br><span class="line">            servlet-<span class="class"><span class="keyword">class</span>：全限定类名</span></span><br><span class="line"><span class="class">    --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">QuickServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">cn</span>.<span class="title">itcast</span>.<span class="title">a_quick</span>.<span class="title">QuickServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!--</span></span><br><span class="line"><span class="class">        给<span class="title">servlet</span>设置一个网络的访问地址（路径）</span></span><br><span class="line"><span class="class">            <span class="title">servlet</span>-<span class="title">name</span>：给指定别名的<span class="title">servlet</span>配置映射</span></span><br><span class="line"><span class="class">            <span class="title">url</span>-<span class="title">pattern</span>：网络访问地址（注意：必须以/开头）</span></span><br><span class="line"><span class="class">    --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">QuickServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">quickServlet</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-部署web项目"><a href="#3-部署web项目" class="headerlink" title="3.部署web项目"></a>3.部署web项目</h5><p><img src="summary_Web.assets/1586827863361.png" alt="1586827863361"></p><h5 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h5><p><img src="summary_Web.assets/1586827999815.png" alt="1586827999815"></p><h5 id="5-执行原理"><a href="#5-执行原理" class="headerlink" title="5.执行原理"></a>5.执行原理</h5><p><img src="summary_Web.assets/1586829125774.png" alt="1586829125774"></p><h4 id="2-Servlet相关API"><a href="#2-Servlet相关API" class="headerlink" title="2.Servlet相关API"></a>2.Servlet相关API</h4><h5 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1.生命周期"></a>1.生命周期</h5><p>生命周期：指的是一个对象从生（创建）到死（销毁）的一个过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. servlet对象创建时，调用此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 用户访问servlet时，调用此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. servlet对象销毁时，调用此方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>创建</span><br><span class="line"><span class="code">1）默认情况下</span></span><br><span class="line"><span class="code">用户第一次访问时，创建servlet，执行init方法</span></span><br><span class="line"><span class="code">2）修改创建时机</span></span><br><span class="line"><span class="code">&lt;load-on-startup&gt;&lt;/load-onstartup&gt;</span></span><br><span class="line"><span class="code">正数：4-N  【服务器启动时，创建】</span></span><br><span class="line"><span class="code">补充：Tomcat的web.xml里有1,3 所以推荐4-n </span></span><br><span class="line"><span class="code">负数（默认值）：-1 【用户第一次访问时，创建】</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>运行（提供服务）</span><br><span class="line"><span class="code">用户每次访问时，都执行service方法</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>销毁</span><br><span class="line"><span class="code">服务器正常关闭时，销毁servlet，执行destroy方法</span></span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1586831283207.png" alt="1586831283207"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的生命周期--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.b_api.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--tomcat启动时，创建servlet对象，执行init方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>4<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/lifeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-ServletConfig"><a href="#2-ServletConfig" class="headerlink" title="2.ServletConfig"></a>2.ServletConfig</h5><p>Tomcat在Servlet对象创建时，执行init()方法，并创建一个ServletConfig 配置对象</p><ul><li>主要作用：读取web.xml配置文件Servlet中<init-param>信息，实现参数和代码的解耦</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  定义全局变量</span></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletConfig = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户访问，执行service方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// String encode = "GBK";</span></span><br><span class="line">        <span class="comment">// 读取配置文件的 init-param 参数</span></span><br><span class="line">        String encode = getServletConfig().getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">        servletResponse.getWriter().write(encode); <span class="comment">// 输出到浏览器</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet的配置对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.b_api.EncodeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>EncodeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/encodeServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-Servlet体系结构"><a href="#3-Servlet体系结构" class="headerlink" title="3.Servlet体系结构"></a>3.Servlet体系结构</h4><p><img src="summary_Web.assets/1586832839002.png" alt="1586832839002"></p><h5 id="1-GenericServlet"><a href="#1-GenericServlet" class="headerlink" title="1.GenericServlet"></a>1.GenericServlet</h5><p>编写普通java类，继承GenericServlet抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletDemo1 创建了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getServletConfig();  <span class="comment">// 调用父类的配置对象</span></span><br><span class="line">        servletResponse.getWriter().write(<span class="string">"ServletDemo1 extends GenericServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletDemo1 销毁了.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet继承genericServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.c_inherit.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletDemo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-HttpServlet"><a href="#2-HttpServlet" class="headerlink" title="2.HttpServlet"></a>2.HttpServlet</h5><p>编写普通java类，继承HttpServlet抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"get...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"post..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--servlet继承httpServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.c_inherit.ServletDemo2<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo2<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servletDemo2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-报错信息"><a href="#4-报错信息" class="headerlink" title="4.报错信息"></a>4.报错信息</h4><h5 id="1-响应状态码405"><a href="#1-响应状态码405" class="headerlink" title="1.响应状态码405"></a>1.响应状态码405</h5><p>请求方法没有重写…..</p><p><img src="summary_Web.assets/1586835525081.png" alt="1586835525081"></p><h5 id="2-响应状态码500"><a href="#2-响应状态码500" class="headerlink" title="2.响应状态码500"></a>2.响应状态码500</h5><p>java代码写错了…</p><p><img src="summary_Web.assets/1586835683969.png" alt="1586835683969"></p><h4 id="5-Servlet路径"><a href="#5-Servlet路径" class="headerlink" title="5.Servlet路径"></a>5.Servlet路径</h4><h5 id="5-1-url-pattern"><a href="#5-1-url-pattern" class="headerlink" title="5.1 url-pattern"></a>5.1 url-pattern</h5><p>作用：将一个请求网络地址和servlet类建立一个映射关系</p><p><img src="summary_Web.assets/1586835899369.png" alt="1586835899369"> </p><h6 id="5-1-1-Servlet映射多个url"><a href="#5-1-1-Servlet映射多个url" class="headerlink" title="5.1.1 Servlet映射多个url"></a>5.1.1 Servlet映射多个url</h6><p><img src="summary_Web.assets/1586836124261.png" alt="1586836124261"> </p><h6 id="5-1-2-url映射模式【了解】"><a href="#5-1-2-url映射模式【了解】" class="headerlink" title="5.1.2 url映射模式【了解】"></a>5.1.2 url映射模式【了解】</h6><p>配置 <url-pattern> url地址取值可以是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>精确匹配(掌握) </span><br><span class="line"> /servletDemo3  </span><br><span class="line"><span class="bullet">2. </span>目录匹配 </span><br><span class="line"><span class="code">/aa/*</span></span><br><span class="line"><span class="bullet">3. </span>后缀匹配 </span><br><span class="line"><span class="code">*.xxx例如：*.do</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        只要浏览器符合目录匹配规则,都可以访问到这个servlet：</span></span><br><span class="line"><span class="comment">             /aa/abc</span></span><br><span class="line"><span class="comment">            /aa/asadfasdf</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.d_url_pattern.ServletDemo4<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/aa/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            只要浏览器符合后缀匹配规则，都可以访问到这个servlet</span></span><br><span class="line"><span class="comment">                aa.do</span></span><br><span class="line"><span class="comment">                bb.do</span></span><br><span class="line"><span class="comment">                xx.do</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.itcast.d_url_pattern.ServletDemo5<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletDemo5<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-2-相对-绝对路径"><a href="#5-2-相对-绝对路径" class="headerlink" title="5.2 相对/绝对路径"></a>5.2 相对/绝对路径</h5><ul><li>现阶段我们访问资源的方式越来越多，请求路径在编写时难免出现混淆</li></ul><ol><li><p>浏览器的地址栏</p></li><li><p>a标签的href属性</p></li><li><p>form表单的action属性</p></li><li><p>js的loation.href属性</p></li><li><p>ajax请求地址</p></li></ol><p><strong>这里我们复习下路径规则：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>path<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试访问路径：http://localhost:8080/day08_servlet_xml/static/path.html<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>绝对路径<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在开发时，强烈建议使用绝对路径</span></span><br><span class="line"><span class="comment">    完整：协议://域名:端口/项目名/资源名</span></span><br><span class="line"><span class="comment">    推荐：/项目名/资源名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://localhost:8080/day08_servlet_xml/quickServlet"</span>&gt;</span>带http协议的绝对路径：quickServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day08_servlet_xml/quickServlet"</span>&gt;</span>不带http协议的绝对路径：quickServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>相对路径路径<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    相对路径语法：</span></span><br><span class="line"><span class="comment">        ./ 当前目录  注：./可以省略不写</span></span><br><span class="line"><span class="comment">        ../ 上级目录</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../quickServlet"</span>&gt;</span>相对路径：quickServlet<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-Servlet3-0"><a href="#6-Servlet3-0" class="headerlink" title="6. Servlet3.0"></a>6. Servlet3.0</h4><ul><li>通过注解配置Servlet，简化web.xml配置Servlet复杂性，提高开发效率，几乎所有的框架都在使用注解</li></ul><h5 id="①-创建web工程【注解】"><a href="#①-创建web工程【注解】" class="headerlink" title="① 创建web工程【注解】"></a>① 创建web工程【注解】</h5><p><img src="summary_Web.assets/1586845454312.png" alt="1586845454312"> </p><h5 id="②-编写普通java类，继承HttpServlet"><a href="#②-编写普通java类，继承HttpServlet" class="headerlink" title="② 编写普通java类，继承HttpServlet"></a>② 编写普通java类，继承HttpServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"QuickServlet....3.0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"QuickServlet....3.0"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③-配置-WebServlet"><a href="#③-配置-WebServlet" class="headerlink" title="③ 配置@WebServlet"></a>③ 配置@WebServlet</h5><p><img src="summary_Web.assets/1586845665415.png" alt="1586845665415"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @WebServlet(name = "QuickServlet",urlPatterns = "/quickServlet")</span></span><br><span class="line"><span class="comment">// @WebServlet(urlPatterns = "/quickServlet")</span></span><br><span class="line"><span class="comment">// @WebServlet(value = "/quickServlet")</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/quickServlet"</span>) <span class="comment">// 注解中有且仅有一个属性，名为value时，属性名可以省略...</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="十一、Request"><a href="#十一、Request" class="headerlink" title="十一、Request"></a>十一、Request</h3><ul><li><p>用户通过浏览器访问服务器时，Tomcat将HTTP请求中所有的信息都封装在Request对象中</p></li><li><p>作用：开发人员可以通过request对象方法，来获取浏览器发送的所有信息.</p></li></ul><p><strong>Request体系结构</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletRequest</span><br><span class="line"><span class="code">|</span></span><br><span class="line">HttpServletRequest</span><br><span class="line"><span class="code">|</span></span><br><span class="line">org.apache.catalina.connector.RequestFacade（由tomcat厂商提供实现类）</span><br></pre></td></tr></table></figure><p>在javaEE中我们是面向接口编程</p><h4 id="1-获取请求行信息"><a href="#1-获取请求行信息" class="headerlink" title="1. 获取请求行信息"></a>1. 获取请求行信息</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>例如：</span><br><span class="line"><span class="code">GET /day09_request/requestDemo1 HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>相关API：</span><br><span class="line"><span class="bullet">1. </span>获取请求方式 GET【掌握】</span><br><span class="line"><span class="code">String getMethod()  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取项目虚拟路径（项目名）/day09_request【掌握】</span><br><span class="line"><span class="code">String getContextPath()  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>获取URI /day09_request/requestDemo1</span><br><span class="line"><span class="code">统一资源标识符（范围广）  共和国</span></span><br><span class="line"><span class="code">String getRequestURI() </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>获取URL http://localhost:8080/day09_request/requestDemo1</span><br><span class="line"><span class="code">统一资源定位符（确定某一个地址） 中华人民共和国</span></span><br><span class="line"><span class="code">StringBuffer getRequestURL()  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5. </span>获取协议和版本号HTTP/1.1</span><br><span class="line"><span class="code">String getProtocol()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">6. </span>获取客户端ip</span><br><span class="line"><span class="code">String getRemoteAddr()</span></span><br></pre></td></tr></table></figure><h4 id="2-获取请求头信息"><a href="#2-获取请求头信息" class="headerlink" title="2.获取请求头信息"></a>2.获取请求头信息</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>例如：</span><br><span class="line"><span class="code">Host: localhost:8080</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>相关API：</span><br><span class="line"><span class="bullet">1. </span>获取知道请求头名称对应的值，注：名称不区分大小写</span><br><span class="line"><span class="code">String getHeader(String name)  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取所有请求头的名称</span><br><span class="line"><span class="code">Enumeration&lt;String&gt; getHeaderNames()  </span></span><br><span class="line"><span class="code">注：是Iterator前身</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有的请求头名称</span></span><br><span class="line">        Enumeration&lt;String&gt; enumeration = req.getHeaderNames();</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</span><br><span class="line">            <span class="comment">// 取出元素名（请求头名称）</span></span><br><span class="line">            String name = enumeration.nextElement();</span><br><span class="line">            <span class="comment">// 根据名称获取值</span></span><br><span class="line">            String value = req.getHeader(name);</span><br><span class="line">            System.out.println(name +<span class="string">" : "</span>+ value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="①-案例：视频防盗链"><a href="#①-案例：视频防盗链" class="headerlink" title="① 案例：视频防盗链"></a>① 案例：视频防盗链</h5><ul><li>referer : 请求来源</li></ul><p><img src="summary_Web.assets/1586917471622.png" alt="1586917471622"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    视频防盗链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/refererRequest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefererRequest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 1.获取请求来源（如果是浏览器地址直接访问的话，referer就是null）</span></span><br><span class="line">        String referer = req.getHeader(<span class="string">"referer"</span>);</span><br><span class="line">        <span class="comment">// 2.判断是不是自家网站发起的请求</span></span><br><span class="line">        <span class="keyword">if</span> (referer != <span class="keyword">null</span> &amp;&amp; referer.startsWith(<span class="string">"http://localhost:8080"</span>)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"正常播放视频..."</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"想看吗？来优酷吧...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="②-案例：浏览器兼容性"><a href="#②-案例：浏览器兼容性" class="headerlink" title="② 案例：浏览器兼容性"></a>② 案例：浏览器兼容性</h5><ul><li>现在后端处理兼容性问题的需求越来越少，基本都是前端工程师完成的….</li><li>user-agen：浏览器版本信息</li></ul><p><img src="summary_Web.assets/1586918357066.png" alt="1586918357066"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    浏览器兼容性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/userAgentReqeust"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAgentReqeust</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取浏览器版本信息</span></span><br><span class="line">        String userAgent = req.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">// 2.判断浏览器版本</span></span><br><span class="line">        <span class="keyword">if</span> (userAgent.contains(<span class="string">"Chrome"</span>)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"浏览器：谷歌"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userAgent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"浏览器：火狐"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"浏览器：其他"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-获取请求参数（体）"><a href="#3-获取请求参数（体）" class="headerlink" title="3.获取请求参数（体）"></a>3.获取请求参数（体）</h4><ul><li>不论get还是post请求方式，都可以使用下列方法来获取请求参数</li><li>在web课程里面，get和post处理的业务逻辑都是一样的….</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>参数</span><br><span class="line"><span class="code">username=jack&amp;password=123&amp;hobby=drink&amp;hobby=perm</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>获取指定参数名的值  username=jack</span><br><span class="line"><span class="code">String getParameter(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取指定参数名的值数组  hobby=drink&amp;hobby=perm</span><br><span class="line"><span class="code">String[] getParameterValues(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>获取所有参数名和对应值数组，参数名 name（key），值数组 value，封装map集合</span><br><span class="line"><span class="code">Map&lt;String,String[]&gt; getParameterMap()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>中文乱码【重点】</span><br><span class="line"><span class="code">get：在tomcat8及以上版本，内部URL编码（UTF-8）</span></span><br><span class="line"><span class="code">post：编码解码不一致，造成乱码现象</span></span><br><span class="line"><span class="code">客户端（浏览器）编码：UTF-8</span></span><br><span class="line"><span class="code">服务器默认     解码：ISO-8859-1 拉丁文</span></span><br><span class="line"><span class="code">指定解码：void setCharacterEncoding(String env)</span></span><br><span class="line"><span class="code">注：这哥们必须在方法内，行首</span></span><br></pre></td></tr></table></figure><h4 id="4-BeanUtils"><a href="#4-BeanUtils" class="headerlink" title="4.BeanUtils"></a>4.BeanUtils</h4><p>将前端提交的数据，直接封装到你想要的JavaBean中</p><h5 id="①导入jar包"><a href="#①导入jar包" class="headerlink" title="①导入jar包"></a>①导入jar包</h5><p><img src="summary_Web.assets/1586922329170.png" alt="1586922329170"> </p><h5 id="②-使用工具类封装数据"><a href="#②-使用工具类封装数据" class="headerlink" title="② 使用工具类封装数据"></a>② 使用工具类封装数据</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>BeanUtils测试：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/day09_request/requestDemo4"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"somke"</span>/&gt;</span>抽烟</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"drink"</span>/&gt;</span>喝酒</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"perm"</span>/&gt;</span>烫头</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"post提交..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/requestDemo4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用BeanUtils快速封装数据到 User对象中</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);<span class="comment">// 指定解码方式</span></span><br><span class="line">        <span class="comment">// 1.获取所有参数的数据，map集合</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">        <span class="comment">// 2.创建user对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="comment">// 3.调用工具类，实现快速封装</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1586923398682.png" alt="1586923398682"> </p><h4 id="5-请求转发"><a href="#5-请求转发" class="headerlink" title="5.请求转发"></a>5.请求转发</h4><ul><li>一种在服务器内部的资源跳转方式</li></ul><p><img src="summary_Web.assets/1586931106703.png" alt="1586931106703"> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>通过reqeust对象，获得转发器对象</span><br><span class="line"><span class="code">RequestDispatcher getRequestDispatcher(String path)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>通过转发器对象，实现转发功能</span><br><span class="line"><span class="code">void forward(ServletRequest request, ServletResponse response)  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>请求转发特点</span><br><span class="line"><span class="code">浏览器：发了一次请求</span></span><br><span class="line"><span class="code">地址栏：没有发生改变</span></span><br><span class="line"><span class="code">只能转发到服务器内部资源....</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>链式编程</span><br><span class="line"><span class="code">request.getRequestDispatcher("/bServlet").forward(reqeust,response)</span></span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1586932052661.png" alt="1586932052661"> </p><h4 id="6-域对象（共享数据）"><a href="#6-域对象（共享数据）" class="headerlink" title="6.域对象（共享数据）"></a>6.域对象（共享数据）</h4><ul><li>域对象：一个有作用范围的对象，可以在范围内共享数据</li><li>request域：代表一次请求的范围，一般用于一次请求中转发的多个资源中共享数据</li></ul><p><img src="summary_Web.assets/1586933024688.png" alt="1586933024688"> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>设置数据</span><br><span class="line"><span class="code">void setAttribute(String name, Object o)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">Object getAttribute(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>删除数据</span><br><span class="line"><span class="code">void removeAttribute(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>生命周期</span><br><span class="line"><span class="bullet">1. </span>何时创建？</span><br><span class="line"><span class="code">用户发送请求时，创建request</span></span><br><span class="line"><span class="bullet">2. </span>何时销毁</span><br><span class="line"><span class="code">服务器返回响应是，销毁request</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>作用范围？</span><br><span class="line"><span class="code">一次请求，包含多次转发</span></span><br></pre></td></tr></table></figure><h3 id="十二、ServletContext"><a href="#十二、ServletContext" class="headerlink" title="十二、ServletContext"></a>十二、ServletContext</h3><h4 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1.概述"></a>1.概述</h4><ul><li>web容器（tomcat）在启动时，它会为每个web项目承建一个对应的ServletContext对象</li><li>它代表：当前web项目</li></ul><p><strong>主要作用</strong></p><ol><li>域对象（共享数据）</li><li>获取资源在服务器的真实地址</li><li>获取全局的配置参数</li><li>获取文件MIME类型</li></ol><p><strong>获取ServletContext对象</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>通过request对象获得</span><br><span class="line"><span class="code">ServletContext sc = request.getServletContext();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>继承HttpServlet后，可以直接调用</span><br><span class="line"><span class="code">ServletContext sc = getServletContext();</span></span><br></pre></td></tr></table></figure><h4 id="2-域对象（共享数据）"><a href="#2-域对象（共享数据）" class="headerlink" title="2.域对象（共享数据）"></a>2.域对象（共享数据）</h4><ul><li>在当前项目范围内，共享数据（多个servlet都可以获取）</li></ul><p><img src="summary_Web.assets/1586692752466.png" alt="1586692752466"></p><ol><li>存储数据<pre><code>void setAttribute(String name,Object value)</code></pre></li><li>获取数据<pre><code>Object getAttribute(String name)</code></pre></li><li>删除数据<pre><code>void removeAttribute(String name)</code></pre></li></ol><p><strong>生命周期</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>何时创建？</span><br><span class="line"><span class="code">项目加载时，创建</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>何时销毁？</span><br><span class="line"><span class="code">项目卸载时，销毁</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>作用范围？</span><br><span class="line"><span class="code">与项目共存亡（多个servlet都可以操作它）</span></span><br></pre></td></tr></table></figure><h4 id="3-获取资源在服务器的真实地址"><a href="#3-获取资源在服务器的真实地址" class="headerlink" title="3.获取资源在服务器的真实地址"></a>3.获取资源在服务器的真实地址</h4><ul><li>可以实现web项目的移植性…动态获取文件真实路径</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* API</span><br><span class="line"><span class="function">String <span class="title">getRealPath</span><span class="params">(String path)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="4-获取全局的配置参数"><a href="#4-获取全局的配置参数" class="headerlink" title="4.获取全局的配置参数"></a>4.获取全局的配置参数</h4><ul><li>读取web.xml配置文件中<context-param>标签信息，实现参数和代码的解耦（多个servlet都可以获取）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--全局配置参数：所有的servlet都可以读取...--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ContextPathServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextPathServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取全局参数</span></span><br><span class="line">        String value = request.getServletContext().getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">        System.out.println(<span class="string">"全局配置参数："</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-获取文件MIME类型"><a href="#5-获取文件MIME类型" class="headerlink" title="5. 获取文件MIME类型"></a>5. 获取文件MIME类型</h4><ul><li>在互联网通信过程中定义的一种文件数据类型</li><li>格式：<code>大类型/小类型</code> 例如：<code>text/html image/jpeg</code></li></ul><p><img src="summary_Web.assets/1587090560095.png" alt="1587090560095"> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_servletContext/MimeServlet?filename=luola.avi"</span>&gt;</span>获取文件的mime类型<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MimeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MimeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取指定文件的mime类型</span></span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">// 获取文件的mime类型</span></span><br><span class="line">        String mimeType = request.getServletContext().getMimeType(filename);</span><br><span class="line">        response.getWriter().write(filename + <span class="string">"---"</span> + mimeType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-网站访问次数"><a href="#6-网站访问次数" class="headerlink" title="6.网站访问次数"></a>6.网站访问次数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置response响应编码</span></span><br><span class="line">       response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">       response.getWriter().write(<span class="string">"&lt;h1&gt;itcast博客网站&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户每次访问，从域中取出，加1，再存进去</span></span><br><span class="line">       ServletContext servletContext = request.getServletContext();</span><br><span class="line">       <span class="comment">// 从域中取出</span></span><br><span class="line">       Integer count = (Integer) servletContext.getAttribute(<span class="string">"count"</span>);</span><br><span class="line">       <span class="comment">// 加1</span></span><br><span class="line">       count++;</span><br><span class="line">       <span class="comment">// 再存进去</span></span><br><span class="line">       servletContext.setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line"></span><br><span class="line">       response.getWriter().write(<span class="string">"&lt;div&gt;你是，第"</span> + count + <span class="string">"位访问此网站...&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure><h3 id="十三、Response"><a href="#十三、Response" class="headerlink" title="十三、Response"></a>十三、Response</h3><p><strong>Response体系结构</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ServletResponse 接口</span><br><span class="line"><span class="code">|</span></span><br><span class="line">HttpServletResponse 接口</span><br><span class="line"><span class="code">|</span></span><br><span class="line">org.apache.catalina.connector.ResponseFacade 实现类（由tomcat提供的）</span><br></pre></td></tr></table></figure><h4 id="1-设置Http响应消息"><a href="#1-设置Http响应消息" class="headerlink" title="1. 设置Http响应消息"></a>1. 设置Http响应消息</h4><p><strong>响应行</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code"> 协议/版本号 状态码</span></span><br><span class="line"><span class="code"> </span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">HTTP/1.1 200</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>设置状态码</span><br><span class="line"><span class="code">void setStatus(int sc)</span></span><br></pre></td></tr></table></figure><p><strong>响应头</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>格式</span><br><span class="line"><span class="code">响应头名称：响应头的值</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>例如</span><br><span class="line"><span class="code">Location:http://www.itcast.cn</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>设置指定头名称和对应的值</span><br><span class="line"><span class="code">void setHeader(String name, String value)</span></span><br></pre></td></tr></table></figure><p><strong>响应体【重点】</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>API（输出流对象）</span><br><span class="line"><span class="bullet">1. </span>字符输出流</span><br><span class="line"><span class="code">PrintWriter getWriter()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>字节输出流</span><br><span class="line"><span class="code">ServletOutputStream getOutputStream()</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">注意：在同一个servlet中，二种类型的输出流不能同时存在，互斥</span></span><br></pre></td></tr></table></figure><h4 id="2-响应重定向"><a href="#2-响应重定向" class="headerlink" title="2. 响应重定向"></a>2. 响应重定向</h4><p><strong>需求</strong></p><p>用户访问AServlet后，服务器告诉浏览器重定向到BServlet</p><p><img src="summary_Web.assets/1587094154857.png" alt="1587094154857"> </p><p><strong>步骤分析</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>方式一</span><br><span class="line"><span class="code">// 1.设置状态码</span></span><br><span class="line"><span class="code">response.setStatus(302);</span></span><br><span class="line"><span class="code">// 2.设置响应头 Location</span></span><br><span class="line"><span class="code">response.setHeader("Location","重定向网络地址");</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>方式二</span><br><span class="line"><span class="code">// 1.response这哥们封装专门处理重定向的方法</span></span><br><span class="line"><span class="code">response.sendRedirect("重定向网络地址");</span></span><br></pre></td></tr></table></figure><p><strong>重定向特点</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>地址栏会发生改变</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>重定向是二次请求</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>重定向是客户端（浏览器）行为，可以跳转到服务器外部资源...</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>不能使用request域共享数据</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AServlet执行了...."</span>);</span><br><span class="line">       <span class="comment">/* // 1.设置状态码</span></span><br><span class="line"><span class="comment">        response.setStatus(302);</span></span><br><span class="line"><span class="comment">        // 2.设置响应头 Location</span></span><br><span class="line"><span class="comment">        response.setHeader("Location","/day10_response/BServlet");*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.response这哥们封装专门处理重定向的方法</span></span><br><span class="line">        response.sendRedirect(<span class="string">"http://www.itcast.cn"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>转发与重定向的区别</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>哪个对象</span><br><span class="line"><span class="code">转发（request对象的方法）</span></span><br><span class="line"><span class="code">request.getRequestDispatcher("/bServlet").forward(request,response);</span></span><br><span class="line"><span class="code">重定向（response对象的方法）</span></span><br><span class="line"><span class="code">response.sendRedirect("/day10_response/bServlet");</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>几次请求</span><br><span class="line"><span class="code">转发</span></span><br><span class="line"><span class="code">地址栏： 没有改变</span></span><br><span class="line"><span class="code">浏览器： 发了一次请求</span></span><br><span class="line"><span class="code">服务器： 只有一对请求和响应对象</span></span><br><span class="line"><span class="code">发生的位置： 服务器</span></span><br><span class="line"><span class="code">重定向</span></span><br><span class="line"><span class="code">地址栏： 发生了改变</span></span><br><span class="line"><span class="code">浏览器： 发了两次请求</span></span><br><span class="line"><span class="code">服务器： 有两对请求和响应对象</span></span><br><span class="line"><span class="code">发生的位置： 浏览器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>小结</span><br><span class="line"><span class="code">写法 </span></span><br><span class="line"><span class="code">转发("/servlet资源路径") 服务器内部行为</span></span><br><span class="line"><span class="code">重定向 ("/虚拟路径（项目名）/servlet资源路径") 浏览器外部行为</span></span><br><span class="line"><span class="code">使用场景(重点掌握) </span></span><br><span class="line"><span class="code">如果需要传递数据（request域），使用转发</span></span><br><span class="line"><span class="code">如果不需要传递数据（request域），使用重定向</span></span><br></pre></td></tr></table></figure><h4 id="3-响应定时刷新"><a href="#3-响应定时刷新" class="headerlink" title="3. 响应定时刷新"></a>3. 响应定时刷新</h4><p><strong>需求</strong></p><p>在当前页面停留3秒钟之后，跳转到指定页面</p><ol><li><p>通过response设置响应头 Refresh</p><pre><code>response.setHeader(&quot;Refresh&quot;,&quot;间隔时间（秒）;跳转页面&quot;); </code></pre><h4 id="4-响应中文"><a href="#4-响应中文" class="headerlink" title="4. 响应中文"></a>4. 响应中文</h4></li></ol><p><strong>需求</strong></p><p>向页面输出中文数据没有乱码 </p><p><img src="summary_Web.assets/1587096386741.png" alt="1587096386741"> </p><p><strong>步骤分析</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>通过response获取字符输出流</span><br><span class="line"><span class="code">PrintWriter pw = response.getWriter();</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>通过字符输出输出文本</span><br><span class="line"><span class="code">pw.write("中文....");</span></span><br></pre></td></tr></table></figure><p><strong>解决中文乱码</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>指定服务器响应编码方式</span><br><span class="line"><span class="code">response.setCharacterEncoding("GBK");</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>统一浏览器和服务器编码</span><br><span class="line"><span class="code">response.setContentType("text/html;charset=utf-8");</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/EncodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//  指定服务器响应编码方式</span></span><br><span class="line">        <span class="comment">// response.setCharacterEncoding("UTF-8");</span></span><br><span class="line">        <span class="comment">// 统一浏览器和服务器编码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 通过response获取字符输出流</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        <span class="comment">// 2. 通过字符输出输出文本</span></span><br><span class="line">        pw.write(<span class="string">"中文...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-文件下载"><a href="#5-文件下载" class="headerlink" title="5. 文件下载"></a>5. 文件下载</h4><p><strong>需求</strong></p><p>用户点击页面的链接，浏览器开始下载文件。 </p><h5 id="5-1-使用链接下载文件"><a href="#5-1-使用链接下载文件" class="headerlink" title="5.1 使用链接下载文件"></a>5.1 使用链接下载文件</h5><h6 id="①-将资料中的下载素材复制到web项目中"><a href="#①-将资料中的下载素材复制到web项目中" class="headerlink" title="① 将资料中的下载素材复制到web项目中"></a>① 将资料中的下载素材复制到web项目中</h6><p><img src="summary_Web.assets/1587104917173.png" alt="1587104917173"> </p><h6 id="②-编写下载页面"><a href="#②-编写下载页面" class="headerlink" title="② 编写下载页面"></a>② 编写下载页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>donload.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>超链接下载<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/demo.docx"</span>&gt;</span>word文档<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/car.jpg"</span>&gt;</span>图片下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/test.zip"</span>&gt;</span>压缩包下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>servlet下载<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="③-缺点"><a href="#③-缺点" class="headerlink" title="③ 缺点"></a>③ 缺点</h6><ol><li>浏览器可识别的媒体类型，是直接打开而不是下载…</li><li>不能判断用户是否登录（vip），进行限制</li></ol><h5 id="5-2-使用Servlet下载文件【推荐…-】"><a href="#5-2-使用Servlet下载文件【推荐…-】" class="headerlink" title="5.2 使用Servlet下载文件【推荐….】"></a>5.2 使用Servlet下载文件【推荐….】</h5><ul><li>二个响应头二个字节流</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>被下载文件的字节输入流</span><br><span class="line"><span class="code">FileInputStream</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>response字节输出流</span><br><span class="line"><span class="code">ServletOutputStream</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>告知客户端下载文件的MIME类型（最新的浏览器此步骤可以省略....）</span><br><span class="line"><span class="code">Content-Type:MIME类型</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>告知浏览器以附件的方式保存</span><br><span class="line"><span class="code">Content-Disposition:attachment;filename=文件名</span></span><br><span class="line"><span class="code">attachment 附件</span></span><br><span class="line"><span class="code">filename=文件名</span></span><br></pre></td></tr></table></figure><p><strong>需求分析</strong></p><p><img src="summary_Web.assets/1587105951884.png" alt="1587105951884"> </p><h6 id="①-download-html"><a href="#①-download-html" class="headerlink" title="① download.html"></a>① download.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>donload.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件下载<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>超链接下载<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/demo.docx"</span>&gt;</span>word文档<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/car.jpg"</span>&gt;</span>图片下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/download/test.zip"</span>&gt;</span>压缩包下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>servlet下载<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/DownLoadServlet?filename=demo.docx"</span>&gt;</span>word文档<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/DownLoadServlet?filename=girl.jpg"</span>&gt;</span>靓女<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day10_response/DownLoadServlet?filename=禽兽.jpg"</span>&gt;</span>禽兽<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="②-DownLoadServlet"><a href="#②-DownLoadServlet" class="headerlink" title="② DownLoadServlet"></a>② DownLoadServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/DownLoadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.获取请求文件名</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line">        <span class="comment">// 2.获取文件真实路径，封装到字节输入流</span></span><br><span class="line">        ServletContext servletContext = request.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/download/"</span> + filename);</span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">        <span class="comment">// 3.告诉浏览器mime类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        response.setContentType(mimeType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.告诉浏览器以附件方式保存</span></span><br><span class="line">        <span class="comment">// 解决中文乱码和浏览器兼容性</span></span><br><span class="line">        String userAgent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line">        <span class="comment">// 调用工具类处理</span></span><br><span class="line">        filename = DownLoadUtils.getName(userAgent, filename);</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span> + filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.获取字节输出流</span></span><br><span class="line">        ServletOutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.io流的拷贝</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];<span class="comment">// 4kb</span></span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            out.write(b, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.释放资源</span></span><br><span class="line">        out.close(); <span class="comment">// out流对象，可以交给tomcat关闭</span></span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-中文乱码"><a href="#③-中文乱码" class="headerlink" title="③ 中文乱码"></a>③ 中文乱码</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>如果该下载文件名是中文的话，会出现乱码...</span><br><span class="line"><span class="code">谷歌和绝大多数的浏览器是通过 url编码</span></span><br><span class="line"><span class="code">URLEncode() 编码</span></span><br><span class="line"><span class="code">URLDecode() 解码</span></span><br><span class="line"><span class="code">火狐浏览器   base64编码</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>我们就需要考虑浏览器兼容性问题....</span><br><span class="line"><span class="code">今天帅哥提供了判断浏览器不同编码的工具类直接使用即可....</span></span><br></pre></td></tr></table></figure><h6 id="④-hutool工具包…"><a href="#④-hutool工具包…" class="headerlink" title="④ hutool工具包….."></a>④ hutool工具包…..</h6><ul><li>这哥们封装了se阶段的很多基础操作…..</li></ul><p>官网：<a href="https://www.hutool.cn/" target="_blank" rel="noopener">https://www.hutool.cn/</a></p><p><img src="summary_Web.assets/1587107888754.png" alt="1587107888754"> </p><p><img src="summary_Web.assets/1587107939238.png" alt="1587107939238"> </p><h3 id="十四、Cookie"><a href="#十四、Cookie" class="headerlink" title="十四、Cookie"></a>十四、Cookie</h3><p>会话：</p><p>B/S架构中：从浏览器第一次给服务器发送请求时，建立会话；直到有一方断开，会话结束。</p><p>一次会话：包含多次请求响应。</p><h4 id="1-会话技术"><a href="#1-会话技术" class="headerlink" title="1.会话技术"></a>1.会话技术</h4><p><strong>问题：</strong>Http是一个无状态协议，同一个会话的连续两个请求相互独立，彼此并不了解</p><p><strong>作用</strong>：用于==存储==浏览器与服务器在请求和响应过程中产生的==数据==</p><p>客户端会话技术：cookie</p><p>服务器端会话技术：session</p><p><img src="summary_Web.assets/1587172824573.png" alt="1587172824573"> </p><h4 id="2-概述"><a href="#2-概述" class="headerlink" title="2.概述"></a>2.概述</h4><p>Cookie作用：在一次会话的多次请求之间共享数据，将数据<strong>保存到客户端（浏览器）</strong></p><h4 id="3-快速入门"><a href="#3-快速入门" class="headerlink" title="3.快速入门"></a>3.快速入门</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置数据到cookie中</span><br><span class="line"><span class="code">// 1.创建cookie对象，设置数据</span></span><br><span class="line"><span class="code">Cookie cookie = new Cookie(String name,String value);</span></span><br><span class="line"><span class="code">// 2.通过response，响应（返回）cookie</span></span><br><span class="line"><span class="code">response.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>从cookie中获取数据</span><br><span class="line"><span class="code">// 1.通过request对象，接收cookie数组</span></span><br><span class="line"><span class="code">Cookie[] cookies = request.getCookies();</span></span><br><span class="line"><span class="code">// 2.遍历数组</span></span><br></pre></td></tr></table></figure><h4 id="4-Cookie细节"><a href="#4-Cookie细节" class="headerlink" title="4.Cookie细节"></a>4.Cookie细节</h4><h5 id="1-服务器发送多个Cookie？"><a href="#1-服务器发送多个Cookie？" class="headerlink" title="1.服务器发送多个Cookie？"></a>1.服务器发送多个Cookie？</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">服务器可以发送多个Cookie</span><br><span class="line">// 1. 创建多个cookie对象</span><br><span class="line"><span class="code">Cookie cookie1 = new Cookie("name","lucy");</span></span><br><span class="line"><span class="code">Cookie cookie2 = new Cookie("age","18");</span></span><br><span class="line"><span class="code">// 2. 通过response响应多个</span></span><br><span class="line"><span class="code">response.addCookie(cookie1);</span></span><br><span class="line"><span class="code">response.addCookie(cookie2);</span></span><br></pre></td></tr></table></figure><h5 id="2-Cookie在浏览器保存时间？"><a href="#2-Cookie在浏览器保存时间？" class="headerlink" title="2.Cookie在浏览器保存时间？"></a>2.Cookie在浏览器保存时间？</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>默认情况下</span><br><span class="line"><span class="code">浏览器关闭（会话结束），cookie销毁（内存）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>设置cookie的存活时间</span><br><span class="line"><span class="code">cookie.setMaxAge(int second); -- 单位是秒</span></span><br><span class="line"><span class="code">正数：指定存活时间，持久化浏览器的磁盘中，到期后自动销毁</span></span><br><span class="line"><span class="code">负数：默认浏览器关闭，cookie销毁</span></span><br><span class="line"><span class="code">零：立即销毁（自杀）</span></span><br></pre></td></tr></table></figure><h5 id="3-Cookie是否可以存储中文？"><a href="#3-Cookie是否可以存储中文？" class="headerlink" title="3. Cookie是否可以存储中文？"></a>3. Cookie是否可以存储中文？</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>tomcat8之前的版本，不支持中文</span><br><span class="line"><span class="code">URLEncoder 编码</span></span><br><span class="line"><span class="code">URLDecoder 解码</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>tomcat8以后的版本，支持中文...</span><br><span class="line"><span class="code">Rfc6265Cookie规范，不允许使用 分号、空格、逗号等一些特殊符号...</span></span><br></pre></td></tr></table></figure><h5 id="4-Cookie共享数据的范围？"><a href="#4-Cookie共享数据的范围？" class="headerlink" title="4. Cookie共享数据的范围？"></a>4. Cookie共享数据的范围？</h5><h6 id="1-在一个tomca服务器中，部署了多个web项目，那么这些web项目的Cookie能否共享？"><a href="#1-在一个tomca服务器中，部署了多个web项目，那么这些web项目的Cookie能否共享？" class="headerlink" title="1. 在一个tomca服务器中，部署了多个web项目，那么这些web项目的Cookie能否共享？"></a>1. 在一个tomca服务器中，部署了多个web项目，那么这些web项目的Cookie能否共享？</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>默认情况下不可以</span><br><span class="line"><span class="code">默认cookie的携带路径，是当前设置cookie的serlvet父路径。。。。</span></span><br><span class="line"><span class="code">设置cookie：http://localhost:8080/day11_cookie/EncodeCookie</span></span><br><span class="line"><span class="code">默认携带路径：http://localhost:8080/day11_cookie</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>指定cookie的携带路径</span><br><span class="line"><span class="code">cookie.setPath(String path);</span></span><br><span class="line"><span class="code">举例：</span></span><br><span class="line"><span class="code">cookie.setPath("/");</span></span><br><span class="line"><span class="code">/ 相当于 http://localhost:8080/</span></span><br><span class="line"><span class="code">此cookie携带路径</span></span><br><span class="line"><span class="code">访问</span></span><br><span class="line"><span class="code">                    http://localhost:8080/day11_cookie</span></span><br><span class="line"><span class="code">                    http://localhost:8080/day10_response</span></span><br><span class="line"><span class="code">                    </span></span><br><span class="line"><span class="bullet">* </span>注意</span><br><span class="line"><span class="code">cookie的携带路径不同，名称可以重复....</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>课下练习题</span><br><span class="line"><span class="code">设置cookie</span></span><br><span class="line"><span class="code">http://localhost:8080/day11_cookie/aa/SetCookie</span></span><br><span class="line"><span class="code">接收cookie</span></span><br><span class="line"><span class="code">http://localhost:8080/day11_cookie/bb/GetCookie</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">默认情况下，是否能获取aa目录下的cookie数据？</span></span><br><span class="line"><span class="code">答案是不可以....</span></span><br><span class="line"><span class="code">在当前项目下共享cookie</span></span><br><span class="line"><span class="code">cookie.setPath("/项目名")</span></span><br></pre></td></tr></table></figure><h6 id="2-不同tomcat服务器之间Cookie能否共享？"><a href="#2-不同tomcat服务器之间Cookie能否共享？" class="headerlink" title="2.不同tomcat服务器之间Cookie能否共享？"></a>2.不同tomcat服务器之间Cookie能否共享？</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>默认情况下不可以</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>多个服务器之间的数据共享cookie，需要在同一个一级域名下</span><br><span class="line"><span class="code">cookie.setDomain(".jd.com")</span></span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1587180002745.png" alt="1587180002745"></p><h4 id="5-Cookie特点"><a href="#5-Cookie特点" class="headerlink" title="5. Cookie特点"></a>5. Cookie特点</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>cookie存储数据都在客户端（浏览器）</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>cookie的存储数据只能是字符串</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>cookie单个大小不能超过4KB</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>同一个域名下cookie数量不能超过50个</span><br><span class="line"></span><br><span class="line"><span class="bullet">5. </span>cookie路径不同，可以重名出现</span><br><span class="line"></span><br><span class="line"><span class="bullet">6. </span>cookie存储的数据不太安全</span><br></pre></td></tr></table></figure><h4 id="6-综合案例"><a href="#6-综合案例" class="headerlink" title="6.综合案例"></a>6.综合案例</h4><h5 id="1-用户上次访问记录"><a href="#1-用户上次访问记录" class="headerlink" title="1.用户上次访问记录"></a>1.用户上次访问记录</h5><p><strong>需求</strong></p><p>访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您的到来。</p><p>如果不是第一次访问，则提示：欢迎回来，您上次访问时间为: xxxx。</p><h6 id="1-1-需求分析"><a href="#1-1-需求分析" class="headerlink" title="1.1 需求分析"></a>1.1 需求分析</h6><p><img src="summary_Web.assets/1587180788021.png" alt="1587180788021"> </p><h6 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h6><p>① LastTimeServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LastTimeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastTimeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 1.接收cookie数组，取出指定名称cookie对象</span></span><br><span class="line">        Cookie cookie = CookieUtils.findByName(<span class="string">"last_time"</span>, request.getCookies());</span><br><span class="line">        <span class="comment">// 2.判断</span></span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 不存在</span></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎您，首次访问....&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 存在</span></span><br><span class="line">            String value = cookie.getValue();</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次访问时间："</span> + value + <span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 3.创建cookie对象，记录本次访问时间</span></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日-HH:mm:ss"</span>);</span><br><span class="line">        String currentTime = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">        cookie = <span class="keyword">new</span> Cookie(<span class="string">"last_time"</span>, currentTime);</span><br><span class="line">        <span class="comment">// 4.设置cookie存活1年</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>);</span><br><span class="line">        <span class="comment">// 5.response响应cookie</span></span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② CookieUtils</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        根据指定名称，查找cookie对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">findByName</span><span class="params">(String name, Cookie[] cookies)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">// 判断是否有指定名称的cookie</span></span><br><span class="line">                <span class="keyword">if</span> (name.equals(cookie.getName())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cookie;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没找到返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>jsp中响应内容使用out，不用response，因为，Tomcat会优先解析并输出response缓冲区的内容，再来解析输出out缓冲区的内容</strong></p><h4 id="2-商品浏览记录"><a href="#2-商品浏览记录" class="headerlink" title="2.商品浏览记录"></a>2.商品浏览记录</h4><p><strong>需求</strong></p><p>做一个商品页面，当我们访问后，在页面上点击查看商品浏览记录后，可以查看到以前浏览过的商品信息</p><h5 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h5><p><img src="summary_Web.assets/1587190985155.png" alt="1587190985155"> </p><h5 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h5><h6 id="①-goods-html"><a href="#①-goods-html" class="headerlink" title="① goods.html"></a>① goods.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>goods<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day11_cookie/GoodsInfoServlet?name=小米10"</span>&gt;</span>小米10<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day11_cookie/GoodsInfoServlet?name=华为P40"</span>&gt;</span>华为P40<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day11_cookie/GoodsInfoServlet?name=iphoneSE"</span>&gt;</span>iphoneSE<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/day11_cookie/GoodsInfoServlet?name=锤子T2"</span>&gt;</span>锤子T2<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="②-GoodsInfoServlet"><a href="#②-GoodsInfoServlet" class="headerlink" title="② GoodsInfoServlet"></a>② GoodsInfoServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsInfoServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsInfoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>); <span class="comment">// 请求解码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>); <span class="comment">// 响应编码</span></span><br><span class="line">        <span class="comment">// 1.获取请求参数 name 小米10</span></span><br><span class="line">        String product = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 2.展示当前商品详情</span></span><br><span class="line">        response.getWriter().write(<span class="string">"您当前浏览的商品为："</span> + product);</span><br><span class="line">        <span class="comment">// 3.获取指定名称cookie对象</span></span><br><span class="line">        Cookie cookie = CookieUtils.findByName(<span class="string">"goods_name"</span>, request.getCookies());</span><br><span class="line">        <span class="comment">// 4.判断是否存在...</span></span><br><span class="line">        <span class="keyword">if</span> (cookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 5.如果不存在，将当前商品设置到cookie对象中...</span></span><br><span class="line">            cookie = <span class="keyword">new</span> Cookie(<span class="string">"goods_name"</span>, product);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 6.如果有，将浏览记录取出，格式：小米10-华为P40</span></span><br><span class="line">            String value = cookie.getValue();</span><br><span class="line">            <span class="comment">// 7.判断当前商品是否在此cookie中</span></span><br><span class="line">            List&lt;String&gt; list = Arrays.asList(value.split(<span class="string">"-"</span>));</span><br><span class="line">            <span class="comment">// 8.如果不包含，追加</span></span><br><span class="line">            <span class="keyword">if</span> (!list.contains(product)) &#123;</span><br><span class="line">                value = value + <span class="string">"-"</span> + product; <span class="comment">// 格式：小米10-华为P40</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 9.将value，重置到cookie中</span></span><br><span class="line">            cookie = <span class="keyword">new</span> Cookie(<span class="string">"goods_name"</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 10.通过response响应到浏览器</span></span><br><span class="line">        <span class="comment">// 设置存活时间 为1年</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">365</span>);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 11.制作a标签，实现记录浏览商品功能</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;br&gt;&lt;a href='/day11_cookie/goods.html'&gt;继续浏览&lt;/a&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 12.制作a标签，实现查看浏览记录功能</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;br&gt;&lt;a href='/day11_cookie/history.jsp'&gt;浏览记录&lt;/a&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-history-jsp"><a href="#③-history-jsp" class="headerlink" title="③ history.jsp"></a>③ history.jsp</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"cn.itcast.f_lasttime.CookieUtils"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;history&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// java的代码...</span></span><br><span class="line">    <span class="comment">// 1.获取指定名称cookie对象</span></span><br><span class="line">    Cookie cookie = CookieUtils.findByName(<span class="string">"goods_name"</span>, request.getCookies());</span><br><span class="line">    <span class="comment">// 2.判断是否存在浏览记录</span></span><br><span class="line">    <span class="keyword">if</span>(cookie == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 没有提示</span></span><br><span class="line">        out.write(<span class="string">"暂无浏览记录...."</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 有的话，遍历显示</span></span><br><span class="line">        out.write(<span class="string">"浏览记录如下：&lt;br&gt;"</span>);</span><br><span class="line">        String value = cookie.getValue(); <span class="comment">// 格式：小米10-华为P40</span></span><br><span class="line">        <span class="keyword">for</span> (String product : value.split(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            out.write(product+<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="十五、Session"><a href="#十五、Session" class="headerlink" title="十五、Session"></a>十五、Session</h3><h4 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1.概述"></a>1.概述</h4><p><strong>使用Cookie问题</strong></p><ol><li>最多存储4K字符串</li><li>存储数据不太安全</li></ol><p>session作用：在一次会话的多次请求之间共享数据，将数据<strong>保存到服务器端</strong></p><h4 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><p>HttpSession也是一个域对象</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>API</span><br><span class="line"><span class="bullet">1. </span>存储数据</span><br><span class="line"><span class="code">void setAttribute(String name,Object value)</span></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">Object getAttribute(String name)</span></span><br><span class="line"><span class="bullet">3. </span>删除数据</span><br><span class="line"><span class="code">void removeAttribute(String name)</span></span><br></pre></td></tr></table></figure><p><strong>步骤分析</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>将数据存储到session中</span><br><span class="line"><span class="code">// 1.通过rquest对象，获取session对象</span></span><br><span class="line"><span class="code">HttpSession session = request.getSession();</span></span><br><span class="line"><span class="code">// 2.操作session的API，存储数据</span></span><br><span class="line"><span class="code">session.setAttribute("username","哈哈，呵呵");</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>从session中获取数据</span><br><span class="line"><span class="code">// 1.通过rquest对象，获取session对象</span></span><br><span class="line"><span class="code">HttpSession session = request.getSession();</span></span><br><span class="line"><span class="code">// 2.操作session的API，获取数据</span></span><br><span class="line"><span class="code">session.getAttribute("username");</span></span><br></pre></td></tr></table></figure><h4 id="3-工作原理"><a href="#3-工作原理" class="headerlink" title="3.工作原理"></a>3.工作原理</h4><p>Session基于Cookie技术实现</p><p><img src="summary_Web.assets/1587260834422.png" alt="1587260834422"> </p><h4 id="4-Session细节"><a href="#4-Session细节" class="headerlink" title="4.Session细节"></a>4.Session细节</h4><h5 id="4-1-客户端关闭，服务器不关闭"><a href="#4-1-客户端关闭，服务器不关闭" class="headerlink" title="4.1 客户端关闭，服务器不关闭"></a>4.1 客户端关闭，服务器不关闭</h5><p>两次获取的Session数据是否为相同？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>默认情况下，浏览器关闭，再次打开二次获取的session不一样</span><br><span class="line"><span class="code">基于cookie实现（浏览器关闭，cookie销毁）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>设置cookie的存活时间（JESSIONID）</span><br><span class="line"><span class="code">这里我们代替服务器，做一个小操作，覆盖这个JSESSIONID，指定持久化时间</span></span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1587261605324.png" alt="1587261605324"> </p><h5 id="4-2-客户端不关闭，服务器关闭"><a href="#4-2-客户端不关闭，服务器关闭" class="headerlink" title="4.2 客户端不关闭，服务器关闭"></a>4.2 客户端不关闭，服务器关闭</h5><p>两次获取的Session数据是否为相同？</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>当服务器正常关闭，重启后，二次获取的session数据一样</span><br><span class="line"><span class="code">tomcat这哥们实现以下二个功能</span></span><br><span class="line"><span class="code">钝化（序列化）</span></span><br><span class="line"><span class="code">当服务器正常关闭时，session中的数据，会序列化到磁盘</span></span><br><span class="line"><span class="code">活化（反序列化）</span></span><br><span class="line"><span class="code">当服务器开启后，从磁盘文件中，反序列化到内存中</span></span><br></pre></td></tr></table></figure><p><strong>我们使用的idea工具有坑….</strong></p><blockquote><p>支持钝化</p></blockquote><p><img src="summary_Web.assets/1587262810025.png" alt="1587262810025"> </p><p><img src="summary_Web.assets/1587262931602.png" alt="1587262931602"> </p><p><strong>我们可以强制设置idea重启时，不清除session会话</strong></p><p><img src="summary_Web.assets/1587263085478.png" alt="1587263085478"> </p><h5 id="4-3-生命周期"><a href="#4-3-生命周期" class="headerlink" title="4.3 生命周期"></a>4.3 生命周期</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">用户第一次调用request.getSession()方法时，创建</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">服务器非正常关闭</span></span><br><span class="line"><span class="code">非活跃状态30分钟后</span></span><br><span class="line"><span class="code">tomcat进行配置  /tocmat安装目录/conf/web.xml</span></span><br><span class="line"><span class="code">session.invalidate(); 自杀</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">一次会话中，多次请求之间</span></span><br><span class="line"><span class="code">注意：每一个浏览器跟服务器都是独立的会话...</span></span><br></pre></td></tr></table></figure><h4 id="5-Session特点"><a href="#5-Session特点" class="headerlink" title="5. Session特点"></a>5. Session特点</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>session存储数据在服务器</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>session存储类型任意（Object）</span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>session存储大小和数量没有限制（相对于内存）</span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>session存储相对安全</span><br></pre></td></tr></table></figure><p><strong>cookie和session的选择</strong></p><ol><li>cookie将数据保存在浏览器端,数据相对不安全.建议敏感的数据不要放在cookie中，而且数据大小是有限制的<ol><li>成本低，对服务器要求不高</li><li>浏览器，解决这个不足，localStroage【项目二中讲解…】</li></ol></li><li>session将数据保存在服务器端,数据相对安全.数据的大小要比cookie中数据灵活很多<ol><li>成本较高，对服务器压力较大</li></ol></li></ol><h3 id="十六、三大域对象总结"><a href="#十六、三大域对象总结" class="headerlink" title="十六、三大域对象总结"></a>十六、三大域对象总结</h3><p>request、session、ServletContext</p><h4 id="1-API"><a href="#1-API" class="headerlink" title="1. API"></a>1. API</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>设置数据</span><br><span class="line"><span class="code">void setAttribute(String name, Object o)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取数据</span><br><span class="line"><span class="code">Object getAttribute(String name)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>删除数据</span><br><span class="line"><span class="code">void removeAttribute(String name)</span></span><br></pre></td></tr></table></figure><h4 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h4><h5 id="2-1-ServletContext域对象"><a href="#2-1-ServletContext域对象" class="headerlink" title="2.1 ServletContext域对象"></a>2.1 ServletContext域对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">服务器正常启动，项目加载时，创建</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">服务器关闭或项目卸载时，销毁</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">整个web项目（共享数据）</span></span><br></pre></td></tr></table></figure><h5 id="2-2-HttpSession域对象"><a href="#2-2-HttpSession域对象" class="headerlink" title="2.2 HttpSession域对象"></a>2.2 HttpSession域对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">用户第一次调用request.getSession()方法时，创建【不太标准..】</span></span><br><span class="line"><span class="code">用户访问携带的jsessionid与服务器不匹配时，创建</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">服务器非正常关闭</span></span><br><span class="line"><span class="code">未活跃状态30分钟</span></span><br><span class="line"><span class="code">自杀</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">一次会话中，多次请求间（共享数据）</span></span><br></pre></td></tr></table></figure><h5 id="2-3-HttpServletRequest域对象"><a href="#2-3-HttpServletRequest域对象" class="headerlink" title="2.3 HttpServletRequest域对象"></a>2.3 HttpServletRequest域对象</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>何时创建</span><br><span class="line"><span class="code">用户发送请求时，创建</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="bullet">* </span>何时销毁</span><br><span class="line"><span class="code">服务器做出响应后，销毁</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>作用范围</span><br><span class="line"><span class="code">一次请求中，多次转发间（共享数据）</span></span><br></pre></td></tr></table></figure><h4 id="3-小结"><a href="#3-小结" class="headerlink" title="3. 小结"></a>3. 小结</h4><ul><li><p>能用小的不用大的：request&lt;session&lt;servletContext</p></li><li><p>常用的场景:</p><ul><li>request：一次查询的结果（servlet转发jsp）</li><li>session：存放当前会话的私有数据<ul><li>用户登录状态</li><li>验证码</li><li>购物车</li></ul></li></ul></li><li><p>servletContext:若需要所有的servlet都能访问到,才使用这个域对象.</p><ul><li>spring课程中会涉及到</li></ul></li></ul><h4 id="4-案例"><a href="#4-案例" class="headerlink" title="4.案例"></a>4.案例</h4><h5 id="4-1-商品购物车"><a href="#4-1-商品购物车" class="headerlink" title="4.1 商品购物车"></a>4.1 商品购物车</h5><p><strong>需求</strong></p><p>有一个商品页面，可以点击超链接将商品添加到购物车,还有一个超链接,点击它的时候可以查看购物车中商品信息</p><h6 id="4-1-1-需求分析"><a href="#4-1-1-需求分析" class="headerlink" title="4.1.1 需求分析"></a>4.1.1 需求分析</h6><p><img src="summary_Web.assets/1587267665094.png" alt="1587267665094"> </p><h6 id="4-1-2-代码实现"><a href="#4-1-2-代码实现" class="headerlink" title="4.1.2 代码实现"></a>4.1.2 代码实现</h6><p>① goods.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;goods.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;商品列表&lt;/h3&gt;</span><br><span class="line">&lt;a href="/day12_session/AddCartServlet?name=电视机"&gt;电视机，加入购物车&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="/day12_session/AddCartServlet?name=冰箱"&gt;冰箱，加入购物车&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="/day12_session/AddCartServlet?name=洗衣机"&gt;洗衣机，加入购物车&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;a href="/day12_session/AddCartServlet?name=电脑"&gt;电脑，加入购物车&lt;/a&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>② AddCartServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AddCartServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCartServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>); <span class="comment">// 请求解码</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);<span class="comment">// 响应编码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        String product = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        <span class="comment">// 2.返回结果</span></span><br><span class="line">        response.getWriter().write(product + <span class="string">"，商品已成功加入购物车 &lt;br&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.从session中获取购物车</span></span><br><span class="line">        Map&lt;String, Integer&gt; cart = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.判断购物车是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (cart == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cart = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.判断购物车中是否包含本次添加的商品</span></span><br><span class="line">        <span class="keyword">if</span> (cart.containsKey(product)) &#123;<span class="comment">// 6.存在，数量+1</span></span><br><span class="line">            Integer oldCount = cart.get(product); <span class="comment">// 之前数量</span></span><br><span class="line">            cart.put(product, oldCount + <span class="number">1</span>);<span class="comment">// 数量加1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 7.不存在，直接添加商品，数量为1</span></span><br><span class="line">            cart.put(product, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.重新将购物车，写入到session中</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"cart"</span>, cart);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9.继续浏览</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;a href='/day12_session/goods.jsp'&gt;继续浏览&lt;/a&gt;&lt;br&gt;"</span>);</span><br><span class="line">        <span class="comment">// 10.查看购物车</span></span><br><span class="line">        response.getWriter().write(<span class="string">"&lt;a href='/day12_session/cart.jsp'&gt;查看购物车&lt;/a&gt;&lt;br&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③cart.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Map"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;cart&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;购物车页面&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1"</span> width=<span class="string">"200px"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;商品&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">         <span class="comment">// 1.从session中获取购物车</span></span><br><span class="line">        Map&lt;String,Integer&gt; cart = (Map&lt;String, Integer&gt;) request.getSession().getAttribute(<span class="string">"cart"</span>);</span><br><span class="line">        <span class="comment">// 2.判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(cart == <span class="keyword">null</span>)&#123;</span><br><span class="line">            out.write(<span class="string">"购物车内暂时没有商品&lt;br&gt;"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : cart.keySet()) &#123;</span><br><span class="line">                out.write(<span class="string">"&lt;tr&gt;&lt;td&gt;"</span>+s+<span class="string">"&lt;/td&gt;&lt;td&gt;"</span>+cart.get(s)+<span class="string">"&lt;/td&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="4-2-用户登录（验证码）"><a href="#4-2-用户登录（验证码）" class="headerlink" title="4.2 用户登录（验证码）"></a>4.2 用户登录（验证码）</h5><p><strong>需求</strong></p><p>用户访问带有验证码的登录页面，输入用户名，密码以及验证码实现登录功能。</p><h6 id="4-2-1-需求分析"><a href="#4-2-1-需求分析" class="headerlink" title="4.2.1 需求分析"></a>4.2.1 需求分析</h6><p><img src="summary_Web.assets/1587276852998.png" alt="1587276852998"> </p><h6 id="4-2-2-代码实现"><a href="#4-2-2-代码实现" class="headerlink" title="4.2.2 代码实现"></a>4.2.2 代码实现</h6><p>① 创建web项目</p><p><img src="summary_Web.assets/1587277050229.png" alt="1587277050229"> </p><p>② 导入验证码Servlet</p><p><img src="summary_Web.assets/1587277039412.png" alt="1587277039412"> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;login.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;用户登录&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"/day12_login/LoginServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line">    验证码：&lt;input type=<span class="string">"text"</span> name=<span class="string">"checkcode"</span>&gt; &lt;img src=<span class="string">"/day12_login/CheckcodeServlet"</span> alt=<span class="string">""</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>&gt;</span><br><span class="line">    &lt;span style=<span class="string">"color:red"</span>&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">            String error = (String) request.getAttribute(<span class="string">"error"</span>);</span><br><span class="line">            <span class="keyword">if</span> (error != <span class="keyword">null</span>) &#123;</span><br><span class="line">                out.write(error);<span class="comment">// 输出提示信息</span></span><br><span class="line">            &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>④ LoginServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LoginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 课下作业，实现非空判断...</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">        <span class="comment">// 1.获取用户输入的验证码</span></span><br><span class="line">        String checkcode = request.getParameter(<span class="string">"checkcode"</span>);</span><br><span class="line">        <span class="comment">// 2.获取session中验证码</span></span><br><span class="line">        String codeSession = (String) request.getSession().getAttribute(<span class="string">"code_session"</span>);</span><br><span class="line">        <span class="comment">// 3.校验是否匹配</span></span><br><span class="line">        <span class="keyword">if</span> (!checkcode.equalsIgnoreCase(codeSession)) &#123;</span><br><span class="line">            <span class="comment">// 验证码不配，友情提示...</span></span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>, <span class="string">"验证码输入错误..."</span>);</span><br><span class="line">            <span class="comment">// 转发到login.jsp</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="comment">// 代码不在往下执行....</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.获取用户输入的用户名和密码</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.判断用户名密码不正确</span></span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">"jack"</span>.equals(username) &amp;&amp; <span class="string">"123"</span>.equals(password))) &#123;</span><br><span class="line">            <span class="comment">// 友情提示</span></span><br><span class="line">            request.setAttribute(<span class="string">"error"</span>, <span class="string">"用户名或密码错误..."</span>);</span><br><span class="line">            <span class="comment">// 转发到login.jsp</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request, response);</span><br><span class="line">            <span class="comment">// 代码不在往下执行....</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 将用户名存入到session中</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">        <span class="comment">// 7.重定向到success.jsp</span></span><br><span class="line">        response.sendRedirect(request.getContextPath() + <span class="string">"/success.jsp"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑤ success.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;success&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;&lt;%</span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    String username = (String) request.getSession().getAttribute(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">        out.write(<span class="string">"用户您好，登录成功："</span>+username);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="十七、JSP"><a href="#十七、JSP" class="headerlink" title="十七、JSP"></a>十七、JSP</h3><p>JSP本质上就是一个Servlet</p><p><img src="summary_Web.assets/1587432774951.png" alt="1587432774951"> </p><h4 id="1-脚本和注释"><a href="#1-脚本和注释" class="headerlink" title="1.脚本和注释"></a>1.脚本和注释</h4><h5 id="1-脚本"><a href="#1-脚本" class="headerlink" title="1.脚本"></a>1.脚本</h5><p><strong>JSP通过脚本方式来定义java代码</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span><span class="xml"><span class="tag">&lt;<span class="name">%</span> 代码 %&gt;</span></span></span><br><span class="line"><span class="code">脚本片段,生成在service方法中,每次请求的时候都会执行</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span><span class="xml"><span class="tag">&lt;<span class="name">%!</span> 代码 %&gt;</span></span></span><br><span class="line"><span class="code">声明片段,在java代码中声明成员,放在jsp生成java文件中的成员位置</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span><span class="xml"><span class="tag">&lt;<span class="name">%=代码</span> %&gt;</span></span></span><br><span class="line"><span class="code">输出脚本片段,相当于out.print("代码") 方法，输出到jsp页面</span></span><br></pre></td></tr></table></figure><h5 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>html注释</span><br><span class="line"><span class="code">&lt;!-- 注释静态资源 --&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>JSP注释</span><br><span class="line"><span class="code">&lt;%-- 注释所有 --%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>java注释（JSP脚本内使用）</span><br><span class="line"><span class="code">// 单行</span></span><br><span class="line"><span class="code">/* 多行 */</span></span><br><span class="line"><span class="code">/**文档 */</span></span><br></pre></td></tr></table></figure><p><strong>注释作用范围</strong></p><table><thead><tr><th>注释</th><th>JSP源码</th><th>java源码</th><th>html源码</th></tr></thead><tbody><tr><td>html</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>java</td><td>可见</td><td>可见</td><td>不可见</td></tr><tr><td>JSP</td><td>可见</td><td>不可见</td><td>不可见</td></tr></tbody></table><h4 id="2-指令"><a href="#2-指令" class="headerlink" title="2.指令"></a>2.指令</h4><p><strong>作用：</strong><br>        用于配置JSP页面，导入资源文件</p><p><strong>格式：</strong><br>&lt;%@ 指令名称 属性名1=”属性值1” 属性名2=”属性值2” …%&gt;</p><p><strong>三大指令：</strong></p><ol><li><p>page：配置JSP页面</p></li><li><p>include：页面包含（静态）</p></li><li><p>taglib:  导入资源文件</p></li></ol><h5 id="2-1page指令"><a href="#2-1page指令" class="headerlink" title="2.1page指令"></a>2.1page指令</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span></span><br><span class="line"><span class="code">contentType 相当于 response.setContentType(); 设置响应体的MIME类型和编码方式</span></span><br><span class="line"><span class="code">language    这哥们有点尴尬，目前仅支持java语言</span></span><br><span class="line"><span class="code">import      导入jar包</span></span><br><span class="line"><span class="code">&lt;%@ page import="java.util.Date" %&gt;</span></span><br><span class="line"><span class="code">errorPage   当前页面报错后，跳转指定错误提示页面</span></span><br><span class="line"><span class="code">isErrorPage 声明当前jsp页面是一个异常处理页面，打开异常开关</span></span><br><span class="line"><span class="code">false（默认）</span></span><br><span class="line"><span class="code">true：可以操作exception异常对象</span></span><br></pre></td></tr></table></figure><h5 id="2-2-include指令（静态包含）"><a href="#2-2-include指令（静态包含）" class="headerlink" title="2.2 include指令（静态包含）"></a>2.2 include指令（静态包含）</h5><p>把页面共同的东西进行抽取</p><p><img src="summary_Web.assets/1587436830957.png" alt="1587436830957"></p><p>top.jsp </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;top.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style="border: skyblue dashed 5px;height: 100px"&gt;头部&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo3&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"top.jsp"</span>%&gt;</span><br><span class="line">&lt;div style="border: red solid 5px;height: 400px"&gt;我是include静态包含，主体..&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-内置对象"><a href="#3-内置对象" class="headerlink" title="3.内置对象"></a>3.内置对象</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>作用</span><br><span class="line"><span class="code">在JSP页面中不需要获取和创建，可以直接使用的对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>JSP一共有9个内置对象</span><br><span class="line"><span class="code">变量名  真实类型作用</span></span><br><span class="line"><span class="code">pageContext    PageContext  当前页面中共享数据（域对象）</span></span><br><span class="line"><span class="code">    requestHttpServletRequest       一次请求中共享数据（域对象）</span></span><br><span class="line"><span class="code">    session             HttpSession 一次会话中共享数据（域对象）</span></span><br><span class="line"><span class="code">    applicationServletContext 整个web应用共享数据（域对象）</span></span><br><span class="line"><span class="code">    -----------------------------------------------</span></span><br><span class="line"><span class="code">    responseHttpServletResponse 响应对象</span></span><br><span class="line"><span class="code">    page（this）Object    当前页面(servlet)对象</span></span><br><span class="line"><span class="code">    out                 JSPWriter 输出对象</span></span><br><span class="line"><span class="code">    config              ServletConfig servlet配置对象</span></span><br><span class="line"><span class="code">    exception           Throwable 异常对象（默认关闭...）</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>常用</span><br><span class="line"><span class="bullet">1. </span>pageContext</span><br><span class="line"><span class="code">1）当前页面的域对象</span></span><br><span class="line"><span class="code">2）获取其他八个内置对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>request</span><br><span class="line"><span class="code">1）接收用户请求（参数）</span></span><br><span class="line"><span class="code">2）一次请求中域对象</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>response</span><br><span class="line"><span class="code">1）设置响应</span></span><br><span class="line"><span class="code">字节流</span></span><br><span class="line"><span class="code">字符流</span></span><br><span class="line"><span class="bullet">4. </span>out</span><br><span class="line"><span class="code">1）专门在jsp中处理字符流</span></span><br><span class="line"><span class="code">print(); // 可以输出一切类型</span></span><br><span class="line"><span class="code">write(); // 只能输出字符类型</span></span><br></pre></td></tr></table></figure><h4 id="4-JSP动作标签"><a href="#4-JSP动作标签" class="headerlink" title="4.JSP动作标签"></a>4.JSP动作标签</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>作用</span><br><span class="line"><span class="code">简化JSP页面编码</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>常用</span><br><span class="line"><span class="code">&lt;jsp:include&gt;：页面包含（动态）</span></span><br><span class="line"><span class="code">相当于</span></span><br><span class="line"><span class="code">request.getRequestDispatcher().include(request,response);</span></span><br><span class="line"><span class="code">&lt;jsp:forward&gt;：请求转发（页面跳转）</span></span><br><span class="line"><span class="code">相当于</span></span><br><span class="line"><span class="code">request.getRequestDispatcher().forword(request,response);</span></span><br><span class="line"><span class="code">&lt;jsp:param&gt;：参数传递</span></span><br><span class="line"><span class="code">其实这哥们是forward子标签</span></span><br><span class="line"><span class="code">使用request.getParameter() 获取参数</span></span><br></pre></td></tr></table></figure><h5 id="4-1动态包含"><a href="#4-1动态包含" class="headerlink" title="4.1动态包含"></a>4.1动态包含</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;demo6&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:include page="top.jsp"&gt;&lt;/jsp:include&gt;</span><br><span class="line">&lt;div style="border: green solid 5px;height: 400px"&gt;jsp的动态包含，主体&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>静态包含和动态包含区别</strong></p><p>在企业开发时，我们推荐使用静态包含，提升访问性能；注意：不能出现重名的变量。。。</p><p><img src="summary_Web.assets/1587440818415.png" alt="1587440818415"> </p><h5 id="4-2-请求转发"><a href="#4-2-请求转发" class="headerlink" title="4.2 请求转发"></a>4.2 请求转发</h5><p>a.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;a&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">"a.jsp执行了"</span>);</span><br><span class="line">    request.setAttribute(<span class="string">"username"</span>, <span class="string">"request域存值了"</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">"b.jsp"</span>&gt;</span><br><span class="line">    &lt;jsp:param name="name" value="jack"&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name="age" value="18"&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>b.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;b&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    System.out.println(<span class="string">"b.jsp执行了"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// request域传递</span></span><br><span class="line">    System.out.println(request.getAttribute(<span class="string">"username"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// param标签传递</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">    System.out.println(request.getParameter(<span class="string">"age"</span>));</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="十八、MVC模式-amp-EL-amp-JSTL-amp-三层架构"><a href="#十八、MVC模式-amp-EL-amp-JSTL-amp-三层架构" class="headerlink" title="十八、MVC模式&amp;EL&amp;JSTL&amp;三层架构"></a>十八、MVC模式&amp;EL&amp;JSTL&amp;三层架构</h3><p>MVC设计模式： Model-View-Controller简写。</p><p>MVC是软件工程中的一种软件架构模式，它是一种<strong>分离业务逻辑</strong>与<strong>显示界面</strong>的设计方法。</p><p>简单来说：前辈们总结的一套设计经验，适合在各种软件开发领域，目的：高内聚，低耦合</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>M：model（模型） JavaBean（1.处理业务逻辑、2.封装实体）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>V：view（视图）  Jsp（展示数据）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>C：controller（控制器）Servlet（1.接收请求、2.调用模型、3.转发视图）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>优缺点</span><br><span class="line"><span class="code">优点</span></span><br><span class="line"><span class="code">降低耦合性，方便维护和拓展，利于分工协作</span></span><br><span class="line"><span class="code">缺点</span></span><br><span class="line"><span class="code">使得项目架构变得复杂，对开发人员要求高</span></span><br></pre></td></tr></table></figure><h4 id="1-EL"><a href="#1-EL" class="headerlink" title="1.EL"></a>1.EL</h4><p>表达式语言（Expression Language）</p><p><strong>作用</strong>：主要用来代替jsp中脚本的功能，简化对java代码的操作。 </p><p><strong>语法</strong>：${表达式}</p><h5 id="1-1使用"><a href="#1-1使用" class="headerlink" title="1.1使用"></a>1.1使用</h5><h6 id="1-获取（域中的）值"><a href="#1-获取（域中的）值" class="headerlink" title="1.获取（域中的）值"></a>1.获取（域中的）值</h6><p>EL表达式<strong>只能</strong>从域对象（4个域）中获取数据</p><p><strong>语法</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>标准（了解）</span><br><span class="line"><span class="bullet">1. </span>$&#123;pageScope.键名&#125; </span><br><span class="line"><span class="code">从page域中获取指定键名对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>$&#123;requestScope.键名&#125; </span><br><span class="line"><span class="code">从request域中获取指定键名对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>$&#123;sessionScope.键名&#125; </span><br><span class="line"><span class="code">从session域中获取指定键名对应的值</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>$&#123;applicationScope.键名&#125; </span><br><span class="line"><span class="code">从servletContext域中获取指定键名对应的值</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>简化（掌握）</span><br><span class="line"><span class="code">$&#123;键名&#125;</span></span><br><span class="line"><span class="code">特点：默认从最小域开始找，找到后直接显示，不在继续寻找</span></span><br><span class="line"><span class="code">小结：要求四个域键名唯一</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>获取字符串</span><br><span class="line"><span class="code">$&#123;键名&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2. </span>获取对象（User）</span><br><span class="line"><span class="code">$&#123;键名.属性名&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">3. </span>获取List（Array）集合</span><br><span class="line"><span class="code">$&#123;键名[索引]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">4. </span>获取Map集合</span><br><span class="line"><span class="code">$&#123;键名.key&#125;</span></span><br><span class="line"><span class="code">$&#123;键名["key"]&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">5. </span>补充</span><br><span class="line"><span class="code">el不会出现null和索引角标越界问题</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">例：</span></span><br><span class="line"><span class="code">$&#123;user&#125; &lt;br&gt; &lt;%--执行该对象的toString方法--%&gt;</span></span><br><span class="line"><span class="code">$&#123;user.username&#125; | $&#123;user.age&#125; | $&#123;user.sex&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">$&#123;list&#125;&lt;br&gt;&lt;%--执行该对象的toString方法--%&gt;</span></span><br><span class="line"><span class="code">$&#123;list[0]&#125; | $&#123;list[1]&#125; | $&#123;list[2]&#125; | $&#123;list[3].username&#125; | $&#123;list[10]&#125; &lt;br&gt; </span></span><br><span class="line"><span class="code">&lt;%--el表达式不会出现 集合（数组）角标越界异常--%&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">$&#123;map&#125;&lt;br&gt;&lt;%--执行该对象的toString方法--%&gt;</span></span><br><span class="line"><span class="code">$&#123;map.key1&#125; | $&#123;map.key2&#125; | $&#123;map.key3&#125; | $&#123;map["key.4"].username&#125;&lt;br&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-执行运算"><a href="#2-执行运算" class="headerlink" title="2.执行运算"></a>2.执行运算</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>算数运算符</span><br><span class="line"><span class="code">语法： + - * /(div) %(mod)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>比较运算符</span><br><span class="line"><span class="code">语法：&gt; &lt; &gt;= &lt;= ==(eq) !=(ne)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>逻辑运算符</span><br><span class="line"><span class="code">语法：&amp;&amp;(and) ||(or) !(not)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>三元运算符</span><br><span class="line"><span class="code">语法：$&#123;条件表达式？为真:为假&#125;</span></span><br><span class="line"></span><br><span class="line">------------------------------</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>空运算符</span><br><span class="line"> 语法：$&#123;not empty 对象&#125;</span><br><span class="line"> 功能：</span><br><span class="line"> 可以判断字符串和对象是否为空</span><br><span class="line"> 可以判断一个集合的长度是否为0</span><br></pre></td></tr></table></figure><h6 id="3-隐式对象"><a href="#3-隐式对象" class="headerlink" title="3.隐式对象"></a>3.隐式对象</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>el表达式中有11个隐式对象</span><br><span class="line"><span class="code">掌握</span></span><br><span class="line"><span class="code">pageContext</span></span><br><span class="line"><span class="code">就是jsp九大内置对象之一，这哥们可以获得其他八个内置对象</span></span><br><span class="line"><span class="code">cookie</span></span><br><span class="line"><span class="code">可以获取浏览器指定cookie名称的值</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">$&#123;pageContext.request.contextPath&#125;  动态获取：项目名称（虚拟路径）</span></span><br><span class="line"><span class="code">$&#123;cookie.JSESSIONID.value&#125; 获取指定cookie名称的值...</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>jsp默认支持el表达式</span><br><span class="line"><span class="code">servlet2.3规范中，默认不支持el表达式</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>如果要忽略el表达式</span><br><span class="line"><span class="code">1）忽略当前jsp页面中所有的el表达式</span></span><br><span class="line"><span class="code">设置jsp中page指令中：isELIgnored="true" 属性</span></span><br><span class="line"><span class="code">2）忽略单个el表达式</span></span><br><span class="line"><span class="code">\$&#123;表达式&#125;</span></span><br></pre></td></tr></table></figure><h5 id="1-2-JavaBean"><a href="#1-2-JavaBean" class="headerlink" title="1.2 JavaBean"></a>1.2 JavaBean</h5><p>一个普通的类</p><p><strong>使用规范</strong></p><ol><li>所有字段（成员变量）为private</li><li>提供无参构造方法</li><li>提供getter、setter和is方法</li><li>实现serializable接口</li></ol><h4 id="2-JSTL"><a href="#2-JSTL" class="headerlink" title="2.JSTL"></a>2.JSTL</h4><p>Jsp 标准标签库（Jsp Standard Tag Library）</p><p>作用：替换和简化jsp页面中java代码的编写</p><p>核心库：标签库： Core    前缀C</p><p>使用需引入jar包</p><p>当前jsp页面tablib指令引入</p><p><img src="summary_Web.assets/1587524031438.png" alt="1587524031438"> </p><h5 id="1-常用标签"><a href="#1-常用标签" class="headerlink" title="1.常用标签"></a>1.常用标签</h5><h6 id="1-c-if标签"><a href="#1-c-if标签" class="headerlink" title="1.  c:if标签"></a>1.  c:if标签</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">就相当于，java中 if()&#123;&#125;</span><br><span class="line"><span class="code">语法</span></span><br><span class="line"><span class="code">&lt;c:if test="boolean值"&gt;&lt;/c:if&gt;</span></span><br><span class="line"><span class="code">true：显示标签体内容</span></span><br><span class="line"><span class="code">false：隐藏标签体内容</span></span><br><span class="line"><span class="code">通常与el表达式一起使用</span></span><br><span class="line"><span class="code">注意：此标签没有else功能，如果想实现else效果，请让条件取反</span></span><br></pre></td></tr></table></figure><h6 id="2-c-forEach标签"><a href="#2-c-forEach标签" class="headerlink" title="2.  c:forEach标签"></a>2.  c:forEach标签</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>相当于java中的for循环</span><br><span class="line"><span class="code">1）普通for</span></span><br><span class="line"><span class="code">for(int i=1; i&lt;=5; i++)&#123;</span></span><br><span class="line"><span class="code">            i</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&lt;c:forEach begin="1" end="5" step="1" var="i"&gt;</span></span><br><span class="line"><span class="code">$&#123;i&#125;</span></span><br><span class="line"><span class="code">&lt;/c:forEach&gt;</span></span><br><span class="line"><span class="code">begin="1" 起始值（包含）</span></span><br><span class="line"><span class="code">end="5"   结束值（包含）</span></span><br><span class="line"><span class="code">step="1"  步长为1</span></span><br><span class="line"><span class="code">var="i"   当前输出临时变量</span></span><br><span class="line"><span class="code">2）增强for</span></span><br><span class="line"><span class="code">for(User user : list)&#123;</span></span><br><span class="line"><span class="code">            user</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&lt;c:forEach items="$&#123;list&#125;" var="user" varStatus="vs"&gt;</span></span><br><span class="line"><span class="code">$&#123;user&#125;</span></span><br><span class="line"><span class="code">&lt;/c:forEach&gt;</span></span><br><span class="line"><span class="code">items="list" 集合</span></span><br><span class="line"><span class="code">var="user"   当前输出的临时变量</span></span><br><span class="line"><span class="code">varStatus="vs" 变量状态</span></span><br><span class="line"><span class="code">index 当前索引 从0开始</span></span><br><span class="line"><span class="code">count 计数器   从1开始</span></span><br></pre></td></tr></table></figure><h6 id="3-c-choose标签"><a href="#3-c-choose标签" class="headerlink" title="3.   c:choose标签"></a>3.   c:choose标签</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>相当于java中switch语句</span><br><span class="line"><span class="code">&lt;c:choose&gt;  等价于 switch</span></span><br><span class="line"><span class="code">&lt;c:when&gt;    等价于 case+break</span></span><br><span class="line"><span class="code">&lt;c:otherwise&gt; 等价于 default</span></span><br></pre></td></tr></table></figure><h4 id="3-三层架构（MVC升级版）"><a href="#3-三层架构（MVC升级版）" class="headerlink" title="3.三层架构（MVC升级版）"></a>3.三层架构（MVC升级版）</h4><p><strong>改造了MVC以后的架构，就称为三层架构</strong></p><p><img src="summary_Web.assets/1587527491818.png" alt="1587527491818"></p><h5 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h5><p>通常意义上的三层架构就是将整个业务应用划分为：表示（现）层、业务逻辑层、数据访问层。</p><p>区分层次的目的 为了<strong>高内聚低耦合</strong>的思想</p><blockquote><p>表示（现）层：又称为web层，与浏览器进行数据交互（控制器和视图）</p><p>业务逻辑层：又称为service层，处理业务数据（if判断，for循环）</p><p>数据访问（持久）层：又称为dao层，与数据库进行交互的（每一条（行）记录与javaBean实体对应）</p></blockquote><p><strong>包目录结构</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>com.itheima 基本包（公司域名倒写）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.itheima.dao 持久层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.itheima.service 业务层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>ccom.itheima.web 表示层</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.itheima.domain 实体（JavaBean）</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>com.itheima.util 工具</span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1587528717096.png" alt="1587528717096"> </p><h3 id="十九、Filter"><a href="#十九、Filter" class="headerlink" title="十九、Filter"></a>十九、Filter</h3><p>web的三大组件，Servlet（控制器），filter（过滤器），Listener（监听器）</p><h4 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h4><h5 id="1-xml配置"><a href="#1-xml配置" class="headerlink" title="1. xml配置"></a>1. xml配置</h5><h6 id="1-编写java类，实现filter接口"><a href="#1-编写java类，实现filter接口" class="headerlink" title="1.编写java类，实现filter接口"></a>1.编写java类，实现filter接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  此方法拦截用户请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest    ：请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse   ：响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain       ：过滤器链（是否放行）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"QuickFilter拦截了请求..."</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-配置web-xml-1"><a href="#2-配置web-xml-1" class="headerlink" title="2.配置web.xml"></a>2.配置web.xml</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--快速入门--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册filter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>QuickFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.a_quick.QuickFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置filter拦截路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>QuickFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/quick.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-注解配置"><a href="#2-注解配置" class="headerlink" title="2. 注解配置"></a>2. 注解配置</h5><p>使用注解，需把web.xml中filter标签注释</p><h6 id="1-编写java类，实现filter接口-1"><a href="#1-编写java类，实现filter接口-1" class="headerlink" title="1. 编写java类，实现filter接口"></a>1. 编写java类，实现filter接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  此方法拦截用户请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletRequest    ：请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> servletResponse   ：响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filterChain       ：过滤器链（是否放行）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"QuickFilter拦截了请求..."</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-配置-WebFilter"><a href="#2-配置-WebFilter" class="headerlink" title="2.配置@WebFilter"></a>2.配置@WebFilter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @WebFilter(filterName = "QuickFilter",urlPatterns = "/quick.jsp")</span></span><br><span class="line"><span class="comment">// @WebFilter(urlPatterns = "/quick.jsp")</span></span><br><span class="line"><span class="comment">// @WebFilter(value = "/quick.jsp")</span></span><br><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/quick.jsp"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 代码细节省略....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-使用细节"><a href="#2-使用细节" class="headerlink" title="2.  使用细节"></a>2.  使用细节</h4><h5 id="1-生命周期-1"><a href="#1-生命周期-1" class="headerlink" title="1.生命周期"></a>1.生命周期</h5><p>生命周期：指的是一个对象从生（创建）到死（销毁）的一个过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行拦截方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,FilterChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 销毁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>创建</span><br><span class="line"><span class="code">服务器启动项目加载，创建filter对象，执行init方法（只执行一次）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>运行（过滤拦截）</span><br><span class="line"><span class="code">用户访问被拦截目标资源时，执行doFilter方法</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>销毁</span><br><span class="line"><span class="code">服务器关闭项目卸载时，销毁filter对象，执行destroy方法（只执行一次）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>补充：</span><br><span class="line"><span class="code">过滤器一定是优先于servlet创建的</span></span><br></pre></td></tr></table></figure><h5 id="2-拦截路径"><a href="#2-拦截路径" class="headerlink" title="2.拦截路径"></a>2.拦截路径</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>精准匹配</span><br><span class="line"><span class="code">用户访问指定目标资源（/show.jsp）时，过滤器进行拦截</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>目录匹配</span><br><span class="line"><span class="code">用户访问指定目录下（/user/*）所有资源时，过滤器进行拦截</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>后缀匹配</span><br><span class="line"><span class="code">用户访问指定后缀名（*.html）的资源时，过滤器进行拦截</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>匹配所有</span><br><span class="line"><span class="code">用户访问该网站所有资源（/*）时，过滤器进行拦截</span></span><br></pre></td></tr></table></figure><h5 id="3-拦截方式"><a href="#3-拦截方式" class="headerlink" title="3.  拦截方式"></a>3.  拦截方式</h5><p>在开发时，我们可以指定过滤器的拦截方式来处理不同的应用场景，比如：只拦截从浏览器直接发送过来的请求，或者拦截内部转发的请求</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>request（默认拦截方式）</span><br><span class="line"><span class="code">浏览器直接发送请求时，过滤器拦截</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>forward</span><br><span class="line"><span class="code">资源A转发到资源B时，过滤器拦截</span></span><br><span class="line"><span class="code">资源A：ForwardServlet</span></span><br><span class="line"><span class="code">资源B：show.jsp</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>我们可以配置 二个同时存在...</span><br></pre></td></tr></table></figure><h6 id="1-xml版本"><a href="#1-xml版本" class="headerlink" title="1.  xml版本"></a>1.  xml版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ModeFilter拦截了请求....."</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ModeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.b_detail.ModeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ModeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-注解版本"><a href="#2-注解版本" class="headerlink" title="2.  注解版本"></a>2.  注解版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(value = <span class="string">"/show.jsp"</span>,dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ModeFilter拦截了请求....."</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-过滤器链"><a href="#4-过滤器链" class="headerlink" title="4.  过滤器链"></a>4.  过滤器链</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>需求</span><br><span class="line"><span class="code">用户访问目标资源 show.jsp时，经过 FilterA  FilterB</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>过滤器链执行顺序 （先进后出）</span><br><span class="line"><span class="code">1.用户发送请求</span></span><br><span class="line"><span class="code">2.FilterA拦截，放行</span></span><br><span class="line"><span class="code">3.FilterB拦截，放行</span></span><br><span class="line"><span class="code">4.执行目标资源 show.jsp</span></span><br><span class="line"><span class="code">5.FilterB增强响应</span></span><br><span class="line"><span class="code">6.FilterA增强响应</span></span><br><span class="line"><span class="code">7.封装响应消息格式，返回到浏览器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">* </span>过滤器链中执行的先后问题....</span><br><span class="line"><span class="code">配置文件</span></span><br><span class="line"><span class="code">谁先声明，谁先执行</span></span><br><span class="line"><span class="code">&lt;filter-mapping&gt;</span></span><br><span class="line"><span class="code">注解【不推荐】</span></span><br><span class="line"><span class="code">根据过滤器类名进行排序，值小的先执行</span></span><br><span class="line"><span class="code">FilterA  FilterB  进行比较， FilterA先执行...</span></span><br></pre></td></tr></table></figure><p><img src="summary_Web.assets/1587612460702.png" alt="1587612460702"> </p><h4 id="3-案例"><a href="#3-案例" class="headerlink" title="3.案例"></a>3.案例</h4><p>过滤用户评论留言的非法言论</p><p><strong>代码实现</strong></p><h5 id="①-bbs-jsp"><a href="#①-bbs-jsp" class="headerlink" title="① bbs.jsp"></a>① bbs.jsp</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;bbs&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;LPL季后赛观看留言板&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/WordsServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;textarea name="content" id="" cols="30" rows="10"&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"请留言"</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="②-WordsServlet"><a href="#②-WordsServlet" class="headerlink" title="② WordsServlet"></a>② WordsServlet</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/WordsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> SerwvletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.接收请求参数 content</span></span><br><span class="line">        String content = request.getParameter(<span class="string">"content"</span>);</span><br><span class="line">        <span class="comment">// 2.将结果响应到 浏览器</span></span><br><span class="line">        response.getWriter().write(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="③-同一网站编码"><a href="#③-同一网站编码" class="headerlink" title="③ 同一网站编码"></a>③ 同一网站编码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @WebFilter("/*")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String encode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        encode = config.getInitParameter(<span class="string">"encode"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 类型向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        <span class="comment">// 判断用户是否为post请求，才设置编码</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line">            request.setCharacterEncoding(encode);</span><br><span class="line">        &#125;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset="</span>+encode); <span class="comment">// 这个操作不太推荐....  因为把所有响应类型给成了 html</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--统一网站编码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.d_case.EncodeFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>EncodeFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="非法字符拦截"><a href="#非法字符拦截" class="headerlink" title="非法字符拦截"></a><strong>非法字符拦截</strong></h5><p>建立非法词库：</p><p>在项目的src目录下建立一个.properties文件</p><p>文件内容：例： keyword=xxx,xxx,xxx,xxx(注意这里使用的标点符号和过滤器的要一致)</p><h6 id="④WordsFilter"><a href="#④WordsFilter" class="headerlink" title="④WordsFilter"></a>④<strong>WordsFilter</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/WordsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; wordList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ResourceBundle这哥们 专门读取src目录下的properties配置文件，不需要写后缀名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ResourceBundle words = ResourceBundle.getBundle(<span class="string">"words"</span>);</span><br><span class="line">        <span class="comment">// 2.读取keyword关键字内容</span></span><br><span class="line">        String keyword = words.getString(<span class="string">"keyword"</span>); <span class="comment">// 傻叉,大爷的,二大爷的</span></span><br><span class="line">        <span class="comment">// 3.split切割，转为list集合，注意切割用的中英文标点符号</span></span><br><span class="line">        wordList = Arrays.asList(keyword.split(<span class="string">","</span>));</span><br><span class="line">        System.out.println(<span class="string">"加载非法词库："</span>+wordList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取用户输入的值</span></span><br><span class="line">        String content = request.getParameter(<span class="string">"content"</span>);</span><br><span class="line">        <span class="comment">// 2.拦截非法内容，提示</span></span><br><span class="line">        <span class="keyword">for</span> (String word : wordList) &#123; <span class="comment">// 遍历非法词库</span></span><br><span class="line">            <span class="keyword">if</span>(content.contains(word))&#123; <span class="comment">// 判断是否包含非法词汇</span></span><br><span class="line">                response.getWriter().write(<span class="string">"你输入的词汇敏感，拦截了。。。"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="非法字符过滤"><a href="#非法字符过滤" class="headerlink" title="非法字符过滤"></a><strong>非法字符过滤</strong></h5><p>当用户发出非法言论的时候，在servlet中输出的时候:用”*” 替代</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对此方法进行增强....</span><br><span class="line">request.getParameter(String name);</span><br></pre></td></tr></table></figure><p>方案一：继承，无法对接口进行增强…</p><p>方案二：代理</p><p>方案三：装饰（包装），经典场景就是IO流</p><p><strong>代码实现</strong></p><ul><li>注意：需要将 WordsFilter过滤器的注解注释</li></ul><h6 id="①-自定义MyRequest"><a href="#①-自定义MyRequest" class="headerlink" title="① 自定义MyRequest"></a>① 自定义MyRequest</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非法词库</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; wordList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request, List&lt;String&gt; wordList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.wordList = wordList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对谁增强就重谁...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用原有的功能，获取用户输入的值</span></span><br><span class="line">        String parameter = <span class="keyword">super</span>.getParameter(name);</span><br><span class="line">        <span class="comment">// 对非法词库过滤...</span></span><br><span class="line">        <span class="keyword">for</span> (String word : wordList) &#123;<span class="comment">// 遍历</span></span><br><span class="line">            <span class="keyword">if</span> (parameter.contains(word)) &#123;</span><br><span class="line">                String str = <span class="keyword">new</span> String();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">                    str += <span class="string">"*"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                parameter = parameter.replaceAll(word,str); <span class="comment">// 注意，替换完之后，进行覆盖...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="②-编写WordsProFilter"><a href="#②-编写WordsProFilter" class="headerlink" title="② 编写WordsProFilter"></a>② 编写WordsProFilter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/WordsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordsProFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; wordList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.加载配置文件</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ResourceBundle这哥们 专门读取src目录下的properties配置文件，不需要写后缀名</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ResourceBundle words = ResourceBundle.getBundle(<span class="string">"words"</span>);</span><br><span class="line">        <span class="comment">// 2.读取keyword关键字内容</span></span><br><span class="line">        String keyword = words.getString(<span class="string">"keyword"</span>); <span class="comment">// 傻叉,大爷的,二大爷的</span></span><br><span class="line">        <span class="comment">// 3.split切割，转为list集合</span></span><br><span class="line">        wordList = Arrays.asList(keyword.split(<span class="string">","</span>));</span><br><span class="line">        System.out.println(<span class="string">"加载非法词库："</span>+wordList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对request对象进行包装 （过滤）</span></span><br><span class="line">        MyRequest requestPro = <span class="keyword">new</span> MyRequest(request, wordList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(requestPro, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十、Listener"><a href="#二十、Listener" class="headerlink" title="二十、Listener"></a>二十、Listener</h3><h4 id="1-概述-4"><a href="#1-概述-4" class="headerlink" title="1.概述"></a>1.概述</h4><p><strong>观察者模式</strong></p><p><strong>javaweb中的监听器</strong></p><p>在我们的java程序中，有时也需要监视某些事情，一旦被监视的对象发生相应的变化，我们应该采取相应的操作。</p><p>监听web三大域对象：HttpServletRequest、HttpSession、ServletContext  （创建和销毁）</p><p><strong>场景</strong></p><p>历史访问次数、统计在线人数、系统启动时初始化配置信息</p><h4 id="2-快速入门-1"><a href="#2-快速入门-1" class="headerlink" title="2.快速入门"></a>2.快速入门</h4><p><strong>步骤分析</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>创建一个普通类，实现ServletContextListener</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>重写抽象方法</span><br><span class="line"><span class="code">监听ServletContext创建</span></span><br><span class="line"><span class="code">监听ServletContext销毁</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3. </span>配置</span><br><span class="line"><span class="code">web.xml</span></span><br><span class="line"><span class="code">注解</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">4. </span>补充</span><br><span class="line"><span class="code">监听HttpServletRequestListener,用户每次访问时，触发创建</span></span><br><span class="line"><span class="code">监听HttpSessionListener，浏览器建立会话时，触发创建</span></span><br></pre></td></tr></table></figure><h5 id="①-xml版本"><a href="#①-xml版本" class="headerlink" title="① xml版本"></a>① xml版本</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听ServletContext创建</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext已经创建了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听ServletContext销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext已经销毁了...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.a_quick.MyListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="②-注解版本"><a href="#②-注解版本" class="headerlink" title="② 注解版本"></a>② 注解版本</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听ServletContext创建</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext已经创建了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听ServletContext销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext已经销毁了...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-案例-1"><a href="#3-案例-1" class="headerlink" title="3.案例"></a>3.案例</h4><p><strong>需求</strong></p><p>有用户使用网站,在线人数就+1;用户退出网站,在线人数就-1</p><h5 id="1-技术分析"><a href="#1-技术分析" class="headerlink" title="1 技术分析"></a>1 技术分析</h5><p>使用 ServletContext域对象 存储在线总人数</p><p>使用 ServletContextListener监听器，在项目启动时，初始化总人数为0</p><p>使用 HttpSessionListener监听器，用户访问，人数+1，用户退出，人数-1</p><p>使用 LogoutServlet控制器，对当前会话的session销毁</p><h5 id="2-需求分析"><a href="#2-需求分析" class="headerlink" title="2 需求分析"></a>2 需求分析</h5><p><img src="summary_Web.assets/1587779813977.png" alt="1587779813977"> </p><h5 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h5><h6 id="①-IitNumberListener"><a href="#①-IitNumberListener" class="headerlink" title="① IitNumberListener"></a>① IitNumberListener</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitNumberListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上下文域对象</span></span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line">        <span class="comment">// 初始化在线人数</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"number"</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="②-NumberChangeListener"><a href="#②-NumberChangeListener" class="headerlink" title="② NumberChangeListener"></a>② NumberChangeListener</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberChangeListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会话建立，在线人数+1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取session域对象</span></span><br><span class="line">        HttpSession session = httpSessionEvent.getSession();</span><br><span class="line">        <span class="comment">// 获取上下文域对象</span></span><br><span class="line">        ServletContext servletContext = session.getServletContext();</span><br><span class="line">        <span class="comment">// 取出在线人数</span></span><br><span class="line">        Integer number = (Integer) servletContext.getAttribute(<span class="string">"number"</span>);</span><br><span class="line">        <span class="comment">// +1</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"number"</span>, number + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 会话销毁，在线人数-1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取session域对象</span></span><br><span class="line">        HttpSession session = httpSessionEvent.getSession();</span><br><span class="line">        <span class="comment">// 获取上下文域对象</span></span><br><span class="line">        ServletContext servletContext = session.getServletContext();</span><br><span class="line">        <span class="comment">// 取出在线人数</span></span><br><span class="line">        Integer number = (Integer) servletContext.getAttribute(<span class="string">"number"</span>);</span><br><span class="line">        <span class="comment">// -1</span></span><br><span class="line">        servletContext.setAttribute(<span class="string">"number"</span>, number - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-index-jsp"><a href="#③-index-jsp" class="headerlink" title="③ index.jsp"></a>③ index.jsp</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$&#123;NAME&#125;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h3&gt;listener知识学习&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">  &lt;h5&gt;在线人数：$&#123;applicationScope.number&#125;&lt;/h5&gt;</span><br><span class="line">  &lt;a href="$&#123;pageContext.request.contextPath&#125;/LogoutServlet"&gt;用户退出&lt;/a&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="④-LogoutServlet"><a href="#④-LogoutServlet" class="headerlink" title="④ LogoutServlet"></a>④ LogoutServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/LogoutServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 销毁session</span></span><br><span class="line">        request.getSession().invalidate();</span><br><span class="line"></span><br><span class="line">        response.getWriter().write(<span class="string">"logout"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十一、综合案例"><a href="#二十一、综合案例" class="headerlink" title="二十一、综合案例"></a>二十一、综合案例</h3><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1 环境搭建"></a>1 环境搭建</h4><ul><li>要求：根据三层架构，搭建web项目</li></ul><h5 id="①-创建web项目"><a href="#①-创建web项目" class="headerlink" title="① 创建web项目"></a>① 创建web项目</h5><p><img src="summary_Web.assets/1587781837986.png" alt="1587781837986"> </p><h5 id="②-导入第三方jar包"><a href="#②-导入第三方jar包" class="headerlink" title="② 导入第三方jar包"></a>② 导入第三方jar包</h5><p><img src="summary_Web.assets/1587781897020.png" alt="1587781897020"> </p><h5 id="③-导入页面资源"><a href="#③-导入页面资源" class="headerlink" title="③ 导入页面资源"></a>③ 导入页面资源</h5><p><img src="summary_Web.assets/1587781960389.png" alt="1587781960389"> </p><h5 id="④-搭建三层包目录结构"><a href="#④-搭建三层包目录结构" class="headerlink" title="④ 搭建三层包目录结构"></a>④ 搭建三层包目录结构</h5><p><img src="summary_Web.assets/1587782022814.png" alt="1587782022814"> </p><h5 id="⑤-导入-User实体类"><a href="#⑤-导入-User实体类" class="headerlink" title="⑤ 导入 User实体类"></a>⑤ 导入 User实体类</h5><p><img src="summary_Web.assets/1587782097855.png" alt="1587782097855"> </p><h5 id="⑥-导入DataUtils工具类（模拟数据库）"><a href="#⑥-导入DataUtils工具类（模拟数据库）" class="headerlink" title="⑥ 导入DataUtils工具类（模拟数据库）"></a>⑥ 导入DataUtils工具类（模拟数据库）</h5><p><img src="summary_Web.assets/1587782181537.png" alt="1587782181537"> </p><p><img src="summary_Web.assets/1587782209409.png" alt="1587782209409"> </p><h5 id="⑦-启动测试"><a href="#⑦-启动测试" class="headerlink" title="⑦ 启动测试"></a>⑦ 启动测试</h5><p><img src="summary_Web.assets/1587782430403.png" alt="1587782430403"> </p><h4 id="2-用户查询功能"><a href="#2-用户查询功能" class="headerlink" title="2 用户查询功能"></a>2 用户查询功能</h4><p><strong>需求</strong></p><p>使用三层架构和MVC模式开发代码，完成用户显示列表功能。 </p><h5 id="2-1-需求分析-1"><a href="#2-1-需求分析-1" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h5><p><img src="summary_Web.assets/1587782969066.png" alt="1587782969066"> </p><h5 id="2-2-代码实现-1"><a href="#2-2-代码实现-1" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h5><h6 id="①-index-jsp"><a href="#①-index-jsp" class="headerlink" title="① index.jsp"></a>① index.jsp</h6><p><img src="summary_Web.assets/1587783085177.png" alt="1587783085177"> </p><h6 id="②-EncodeFilter"><a href="#②-EncodeFilter" class="headerlink" title="② EncodeFilter"></a>② EncodeFilter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 向下转型</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) servletRequest;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是post请求，解决中文乱码</span></span><br><span class="line">        <span class="keyword">if</span> (request.getMethod().equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line">            request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-FindAllServlet"><a href="#③-FindAllServlet" class="headerlink" title="③ FindAllServlet"></a>③ FindAllServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/FindAllServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindAllServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.调用service查询</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        List&lt;User&gt; list = userService.findAll();</span><br><span class="line">        <span class="comment">// 2.将list存储到request域</span></span><br><span class="line">        request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 3.转发到list.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="④-UserService"><a href="#④-UserService" class="headerlink" title="④ UserService"></a>④ UserService</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用dao查询</span></span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        <span class="comment">//  List&lt;User&gt; list = userDao.findAll();</span></span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="⑤-UserDao"><a href="#⑤-UserDao" class="headerlink" title="⑤ UserDao"></a>⑤ UserDao</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用数据库查询</span></span><br><span class="line">        List&lt;User&gt; list = DataUtils.readAll();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="⑥-list-jsp"><a href="#⑥-list-jsp" class="headerlink" title="⑥ list.jsp"></a>⑥ list.jsp</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.sex&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.address&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.qq&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;user.email&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;</span><br><span class="line">            &lt;a class="btn btn-default btn-sm" href="update.jsp"&gt;修改&lt;/a&gt;</span><br><span class="line">            &amp;nbsp;&lt;a class="btn btn-default btn-sm" href=""&gt;删除&lt;/a&gt;</span><br><span class="line">        &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h4 id="3-添加用户功能"><a href="#3-添加用户功能" class="headerlink" title="3 添加用户功能"></a>3 添加用户功能</h4><p><strong>需求</strong></p><p>点击添加用户跳转添加用户页面，在添加用户页面，添加新的用户</p><h5 id="3-1-需求分析"><a href="#3-1-需求分析" class="headerlink" title="3.1 需求分析"></a>3.1 需求分析</h5><p><img src="summary_Web.assets/1587785285009.png" alt="1587785285009"> </p><h5 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h5><h6 id="①-add-jsp"><a href="#①-add-jsp" class="headerlink" title="① add.jsp"></a>① add.jsp</h6><p><img src="summary_Web.assets/1587785388952.png" alt="1587785388952"> </p><h6 id="②-AddServlet"><a href="#②-AddServlet" class="headerlink" title="② AddServlet"></a>② AddServlet</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AddServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.接收请求参数 map</span></span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="comment">// 2.快速封装user实体</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">            <span class="comment">// 3.调用service，添加user</span></span><br><span class="line">            UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">            userService.add(user);</span><br><span class="line">            <span class="comment">// 4.重定向FindAllServlet</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">"/FindAllServlet"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="③-UserService"><a href="#③-UserService" class="headerlink" title="③ UserService"></a>③ UserService</h6><p><img src="summary_Web.assets/1587786208128.png" alt="1587786208128"> </p><h6 id="④-UserDao"><a href="#④-UserDao" class="headerlink" title="④ UserDao"></a>④ UserDao</h6><p><img src="summary_Web.assets/1587786228205.png" alt="1587786228205"> </p><h4 id="4-删除用户功能"><a href="#4-删除用户功能" class="headerlink" title="4 删除用户功能"></a>4 删除用户功能</h4><p><strong>需求</strong></p><p>点击删除按钮删除当前一整行数据，删除之后重新查询全部展示删除效果</p><h5 id="4-1-需求分析"><a href="#4-1-需求分析" class="headerlink" title="4.1 需求分析"></a>4.1 需求分析</h5><p><img src="summary_Web.assets/1587786860427.png" alt="1587786860427"> </p><h5 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h5><h6 id="①-list-jsp"><a href="#①-list-jsp" class="headerlink" title="① list.jsp"></a>① list.jsp</h6><p><img src="summary_Web.assets/1587787042487.png" alt="1587787042487"> </p><h6 id="②-DeleteServlet"><a href="#②-DeleteServlet" class="headerlink" title="② DeleteServlet"></a>② DeleteServlet</h6><p><img src="summary_Web.assets/1587787437317.png" alt="1587787437317"> </p><h6 id="③-UserService-1"><a href="#③-UserService-1" class="headerlink" title="③ UserService"></a>③ UserService</h6><p><img src="summary_Web.assets/1587787454818.png" alt="1587787454818"> </p><h6 id="④-UserDao-1"><a href="#④-UserDao-1" class="headerlink" title="④ UserDao"></a>④ UserDao</h6><p><img src="summary_Web.assets/1587787484267.png" alt="1587787484267"> </p><h4 id="5-修改用户功能"><a href="#5-修改用户功能" class="headerlink" title="5 修改用户功能"></a>5 修改用户功能</h4><h5 id="5-1-用户回显"><a href="#5-1-用户回显" class="headerlink" title="5.1 用户回显"></a>5.1 用户回显</h5><p><strong>需求</strong></p><p>点击”修改“按钮，跳转到更新页面（回显数据）</p><h6 id="5-1-1-需求分析"><a href="#5-1-1-需求分析" class="headerlink" title="5.1.1 需求分析"></a>5.1.1 需求分析</h6><p><img src="summary_Web.assets/1587795243681.png" alt="1587795243681"> </p><h6 id="5-1-2-代码实现"><a href="#5-1-2-代码实现" class="headerlink" title="5.1.2 代码实现"></a>5.1.2 代码实现</h6><p>① list.jsp</p><p><img src="summary_Web.assets/1587795752834.png" alt="1587795752834">  </p><p>② FindByIdServlet</p><p><img src="summary_Web.assets/1587796218744.png" alt="1587796218744"> </p><p>③ UserService</p><p><img src="summary_Web.assets/1587796232347.png" alt="1587796232347"> </p><p>④ UserDao</p><p><img src="summary_Web.assets/1587796263253.png" alt="1587796263253"> </p><p>⑤ update.jsp</p><p><img src="summary_Web.assets/1587796315291.png" alt="1587796315291"> </p><h5 id="5-2-修改用户"><a href="#5-2-修改用户" class="headerlink" title="5.2 修改用户"></a>5.2 修改用户</h5><p><strong>需求</strong></p><p>重写输入用户信息，点击提交，更新系统</p><h6 id="5-2-1-需求分析"><a href="#5-2-1-需求分析" class="headerlink" title="5.2.1 需求分析"></a>5.2.1 需求分析</h6><p><img src="summary_Web.assets/1587796792807.png" alt="1587796792807"> </p><h6 id="5-2-2-代码实现"><a href="#5-2-2-代码实现" class="headerlink" title="5.2.2 代码实现"></a>5.2.2 代码实现</h6><p>① update.jsp</p><p><img src="summary_Web.assets/1587796936278.png" alt="1587796936278"> </p><p>② UpdateServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/UpdateServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.接收请求参数</span></span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="comment">// 2.快速封装到user实体</span></span><br><span class="line">            User newUser = <span class="keyword">new</span> User();</span><br><span class="line">            BeanUtils.populate(newUser, parameterMap);</span><br><span class="line">            <span class="comment">// 3.调用service，更新</span></span><br><span class="line">            UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">            userService.update(newUser);</span><br><span class="line">            <span class="comment">// 4.重定向，FindAllServlet</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">"/FindAllServlet"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ UserService</p><p><img src="summary_Web.assets/1587797730474.png" alt="1587797730474"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// .... 上面方法略...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User newUser)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.查询所有</span></span><br><span class="line">        List&lt;User&gt; list = DataUtils.readAll();</span><br><span class="line">        <span class="comment">// 2遍历</span></span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            <span class="comment">// 判断id是否一致</span></span><br><span class="line">            <span class="keyword">if</span> (user.getId().equalsIgnoreCase(newUser.getId())) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 3.新的数据，覆盖旧的</span></span><br><span class="line">                   <span class="comment">/* user.setName(newUser.getName());</span></span><br><span class="line"><span class="comment">                    user.setAge(newUser.getAge());*/</span></span><br><span class="line">                    BeanUtils.copyProperties(user, newUser);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.覆盖原有的数据库</span></span><br><span class="line">        DataUtils.writeAll(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化：Servlet"><a href="#优化：Servlet" class="headerlink" title="优化：Servlet"></a>优化：Servlet</h4><p>现在写代码遇到的问题：</p><p><img src="summary_Web.assets/1587798105877.png" alt="1587798105877"> </p><p>优化解决这个问题</p><p><img src="summary_Web.assets/1587798494835.png" alt="1587798494835"> </p><p><strong>了解如何修改？</strong>等到数据库阶段学完，还有一个综合案例，练习这种方案…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求入口</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断请求action</span></span><br><span class="line">        String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (action.equals(<span class="string">"findAll"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.findAll(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.equals(<span class="string">"add"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.add(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询所有</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.调用service查询</span></span><br><span class="line">        List&lt;User&gt; list = userService.findAll();</span><br><span class="line">        <span class="comment">// 2.将list存储到request域</span></span><br><span class="line">        request.setAttribute(<span class="string">"list"</span>, list);</span><br><span class="line">        <span class="comment">// 3.转发到list.jsp</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/list.jsp"</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.接收请求参数 map</span></span><br><span class="line">            Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">            <span class="comment">// 2.快速封装user实体</span></span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            BeanUtils.populate(user, parameterMap);</span><br><span class="line">            <span class="comment">// 3.调用service，添加user</span></span><br><span class="line">            userService.add(user);</span><br><span class="line">            <span class="comment">// 4.重定向FindAllServlet</span></span><br><span class="line">            response.sendRedirect(request.getContextPath() + <span class="string">"/FindAllServlet"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二十二、"><a href="#二十二、" class="headerlink" title="二十二、"></a>二十二、</h3><h4 id="1-JSON数据与java对象转换"><a href="#1-JSON数据与java对象转换" class="headerlink" title="1. JSON数据与java对象转换"></a>1. JSON数据与java对象转换</h4><p><strong>使用jackson，需要导入jar包</strong></p><p><strong>提供了一个核心转换器对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ObjectMapper  om = <span class="keyword">new</span> ObjectMapper();</span><br></pre></td></tr></table></figure><h5 id="1-java对象转为json（字符串）"><a href="#1-java对象转为json（字符串）" class="headerlink" title="1. java对象转为json（字符串）"></a>1. java对象转为json（字符串）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">writeValueAsString</span><span class="params">(Object object)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将user对象转为json字符串</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UserToJson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="string">"1"</span>, <span class="string">"lucy"</span>, <span class="string">"女"</span>, <span class="number">15</span>, <span class="string">"德克萨斯"</span>, <span class="string">"123"</span>, <span class="string">"123@qq.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将任意对象转为json字符串</span></span><br><span class="line">    String json = om.writeValueAsString(user);</span><br><span class="line">    System.out.println(json); <span class="comment">// 在java中name必须使用双引号包裹起来</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将map集合转为json字符串</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MapToJson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"张三"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toJson</span></span><br><span class="line">    String json = om.writeValueAsString(map);</span><br><span class="line">    System.out.println(json); <span class="comment">//  &#123;"name":"张三","age":18&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将list集合转为json数组字符串</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListToJson</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">"1"</span>, <span class="string">"lucy"</span>, <span class="string">"女"</span>, <span class="number">15</span>, <span class="string">"德克萨斯"</span>, <span class="string">"123"</span>, <span class="string">"123@qq.com"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="string">"2"</span>, <span class="string">"jack"</span>, <span class="string">"男"</span>, <span class="number">15</span>, <span class="string">"德克萨斯"</span>, <span class="string">"123"</span>, <span class="string">"123@qq.com"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toJson</span></span><br><span class="line">    String json = om.writeValueAsString(list);</span><br><span class="line">    System.out.println(json); <span class="comment">// [&#123;&#125;,&#123;&#125;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-将json（字符串）转为java对象"><a href="#2-将json（字符串）转为java对象" class="headerlink" title="2.将json（字符串）转为java对象"></a>2.将json（字符串）转为java对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">readValue</span><span class="params">(String json,Class&lt;T&gt; classType)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将json字符串转为user对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String json = <span class="string">"&#123;\"id\":\"1\",\"name\":\"lucy\",\"sex\":\"女\",\"age\":15,\"address\":\"德克萨斯\",\"qq\":\"123\",\"email\":\"123@qq.com\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toUser</span></span><br><span class="line">    User user = om.readValue(json, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将json字符串转为map集合（如果你获取的json格式没有对应的java实体对象，就可以拿map接收）</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToMap</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String json = <span class="string">"&#123;\"name\":\"lucy\",\"age\":18&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toMap</span></span><br><span class="line">    Map&lt;String, Object&gt; map = om.readValue(json, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将json数组字符串转为list集合</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">JsonToList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String json = <span class="string">"[&#123;\"id\":\"1\",\"name\":\"lucy\",\"sex\":\"女\",\"age\":15,\"address\":\"德克萨斯\",\"qq\":\"123\",\"email\":\"123@qq.com\"&#125;,&#123;\"id\":\"2\",\"name\":\"jack\",\"sex\":\"男\",\"age\":15,\"address\":\"德克萨斯\",\"qq\":\"123\",\"email\":\"123@qq.com\"&#125;]"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建jackson转换器对象</span></span><br><span class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// toList</span></span><br><span class="line">    List list = om.readValue(json, List<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h4><p><strong>需求</strong></p><p>​    在用户注册页面，输入用户名，当用户名输入框失去焦点时，发送异步请求，将输入框的用户名传递给服务器进行是否存在的校验。</p><p><strong>技术分析</strong></p><p>此需求使用了ajax技术：通过<strong>异步提交</strong>实现页面的<strong>局部刷新</strong>，提高用户的体验</p><p><img src="summary_Web.assets/1587868403078.png" alt="1587868403078"> </p><p><strong>代码实现</strong></p><p>① index.jsp</p><p><img src="summary_Web.assets/1587868753719.png" alt="1587868753719"> </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$&#123;NAME&#125;&lt;/title&gt;</span><br><span class="line">    &lt;script src="$&#123;pageContext.request.contextPath&#125;/js/jquery-3.2.1.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;用户注册&lt;/h3&gt;</span><br><span class="line">&lt;form action=<span class="string">"#"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">    用户名：&lt;input type="text" name="username" id="username"&gt; &lt;span id="userwarn"&gt;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 给用户文本框绑定失去焦点事件</span></span><br><span class="line">    $(<span class="string">'#username'</span>).blur(function () &#123;</span><br><span class="line">        <span class="comment">// 获取用户输入的值</span></span><br><span class="line">        console.log(<span class="keyword">this</span>.value);</span><br><span class="line">        let data = <span class="string">"username="</span> + <span class="keyword">this</span>.value;</span><br><span class="line">        <span class="comment">// 发送ajax请求</span></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">"post"</span>,</span><br><span class="line">            url:<span class="string">'$&#123;pageContext.request.contextPath&#125;/CheckServlet'</span>,</span><br><span class="line">            data:data,</span><br><span class="line">            success:function (resp) &#123;</span><br><span class="line">                console.log(resp);</span><br><span class="line">                <span class="comment">// 判断结果并实现局部刷新</span></span><br><span class="line">                <span class="keyword">if</span>(resp.flag)&#123;</span><br><span class="line">                    $(<span class="string">'#userwarn'</span>).text(resp.msg).css(<span class="string">'color'</span>,<span class="string">'green'</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="string">'#userwarn'</span>).text(resp.msg).css(<span class="string">'color'</span>,<span class="string">'red'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>② CheckServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CheckServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">// 1.接收请求参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.声明map集合</span></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span>(username.equals(<span class="string">"jack"</span>))&#123;</span><br><span class="line">            map.put(<span class="string">"flag"</span>,<span class="keyword">false</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"× 此用户已注册"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(<span class="string">"flag"</span>,<span class="keyword">true</span>);</span><br><span class="line">            map.put(<span class="string">"msg"</span>, <span class="string">"√ 此用户可以注册"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.将map集合转为json字符串</span></span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = om.writeValueAsString(map);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.设置json的MIME类型</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.response响应json到客户端</span></span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;HTML超文本标记语言，用于编写前端页面、结构搭建，CSS专门用于美化页面，实现了样式和内容的分离，提高了显示效果和样式的复用性、降低耦合性，分工更加明确。js用于在HTML页面编写一些业务逻辑，增加互动性，操作html的DOM树，不需要提前编译，运行在浏览器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://wanghaisong0-0.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanghaisong0-0.github.io/tags/Java/"/>
    
      <category term="总结" scheme="https://wanghaisong0-0.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wanghaisong0-0.github.io/2020/04/25/hello-world/"/>
    <id>https://wanghaisong0-0.github.io/2020/04/25/hello-world/</id>
    <published>2020-04-24T17:33:53.967Z</published>
    <updated>2020-04-24T17:33:53.967Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>学习JavaSE、JavaEE知识点总结</title>
    <link href="https://wanghaisong0-0.github.io/2020/04/24/summary/"/>
    <id>https://wanghaisong0-0.github.io/2020/04/24/summary/</id>
    <published>2020-04-24T00:00:00.000Z</published>
    <updated>2020-04-25T04:27:32.007Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p><strong>学如逆水行舟，不进则退</strong>，砥砺前行，不是为了自己在奋斗，肩负的是责任。每个人想要的都很多，不努力，只能看着喜欢的东西进入别人的口袋，不要说我现在不努力就活的很好这样的蠢话，那是没有见过井外面的世界，你以为有钱人就会快乐吗，是的，而且他们的快乐是你想象不到的！</p><a id="more"></a><h3 id="JavaSE"><a href="#JavaSE" class="headerlink" title="JavaSE"></a>JavaSE</h3><h4 id="一、基础配置及语法"><a href="#一、基础配置及语法" class="headerlink" title="一、基础配置及语法"></a>一、基础配置及语法</h4><h5 id="1-环境变量配置"><a href="#1-环境变量配置" class="headerlink" title="1.环境变量配置"></a>1.环境变量配置</h5><h6 id="①常用DOS命令-Mac-OS"><a href="#①常用DOS命令-Mac-OS" class="headerlink" title="①常用DOS命令(Mac OS)"></a>①常用DOS命令(Mac OS)</h6><p>clear 清空屏幕的内容</p><p>percent work directary</p><p>pwd  查看我们所在的目录（位置），刚打开终端的时候，默认在用户目录下。</p><p>list show</p><p>ls  显示当前目录下的文件内容</p><p>ls 可以和路径配合使用，用于显示路径下的内容</p><p>ls后面如果什么都不加，默认显示当前目录下的内容。</p><p>ls /  显示跟目录下的内容</p><p>cd -   回到上一个目录</p><p>cd ~  回到用户目录(刚打开终端时的目录)</p><p>/  根目录</p><p>./ 当前目录</p><p>../ 上一级目录</p><p>make directory</p><p>mkdir xxx  在当前目录下，创建一个xxx名字的文件夹</p><p>touch aaa  在当前目录下创建一个aaa名字的文件</p><p>come directory</p><p>cd xxx  进入xxx的文件夹     (Tab键会自动补齐)</p><p>remove</p><p>rm 1.txt  删除名字为1.txt的文件</p><p>rm -rf 456/  删除当前目录下456名字的文件夹，删除文件夹的同时，里面的文件统统删除。</p><p>(方向键上下键，可以翻看历史命令)</p><p>move </p><p>mv 1.txt 123.txt 移动+改名，将当前目录的1.txt 移动到当前目录，并改名为123.txt</p><p>cp 1.txt 2.txt 将当前目录下的1.txt拷贝一份，并放到当前目录下，并命名为2.txt</p><p>vi （vim）</p><p>vi 1.c  （如果文件存在，则打开这个文件，如果不存在，先创建，再打开）</p><p>vi 命令有3种模式</p><p>命令模式  （以:打头的命令）</p><p>:q  退出，（如果文件已经被编辑了，而没有保存的话，是无法退出的）</p><p>:w  保存</p><p>:wq  保存退出</p><p>:q!   不保存退出</p><p>:set nu       显示行号</p><p>:set nonu  隐藏行号</p><p>编辑模式</p><p>由编辑模式进入一般模式，按Esc键</p><p>一般模式   （一般命令）</p><p>由一般模式进入编辑模式</p><p>a,i,o, shift+a,shift+i,shift+o键</p><p>dd   删除一行(光标所在的那一行) (剪切)</p><p>5dd  删除光标下的5行</p><p>p    粘贴  </p><p>yy   复制</p><p>5yy  复制5行</p><p>u      撤销上一次操作 （undo）</p><p>ctrl+r   恢复操作    (redo)</p><p>gg   将光标定位在第一行</p><p>shift+g 将光标定位到最后一行</p><p>num shift+g  将光标定位在第num行</p><p>ls   查看当前目录下得内容</p><p>ls /   查看根目录的内容</p><p>ls ./   查看当前目录下得内容</p><p>ls ../   查看父目录下得内容</p><p>ls ~    查看用户目录的内容（打开终端默认在用户目录下）</p><p>ls /Users/apple</p><p>pwd  查看当前所在的位置（目录）</p><p>cd  目录     进入目录文件夹</p><p>mkdir   xxx   创建一个名字为xxx的文件夹</p><p>touch  yyy   创建一个名字为yyy的文件</p><p>vi  yyy   如果文件不存在，则创建一个yyy的文件，并打开，如果文件存在，则是打开yyy文件。</p><p>rm yyy    删除yyy文件</p><p>rm -rf  xxx  删除xxx文件夹</p><p>mv  aaa bbb  将当前目录下得aaa文件，移动到当前目录下，并改名为bbb</p><p>cp  aaa bbb 将当前目录下得aaa文件，拷贝一份，放到当前目录下，并改名为bbb</p><p>vi  一般模式，命令模式，编辑模式</p><p>按a，就由一般模式进入编辑模式</p><p>由编辑模式退回一般模式，Esc</p><p>命令模式，以：开头的</p><p>:q    退出</p><p>:wq 保存退出</p><p>:q!    强制退出 （不保存退出）</p><p>:set nu   显示行号</p><p>:set nonu  隐藏行号</p><p>一般模式下</p><p>dd     删除一行（剪切）  ctrl+x</p><p>num  dd    删除num行</p><p>p   将剪切的内容粘贴到光标所在行下面</p><p>ctrl+v</p><p>yy   拷贝一行    ctrl+c</p><p>num yy  拷贝num行</p><p>u   撤销   undo</p><p>ctrl+r   恢复   redo</p><p>gg   定位到第一行</p><p>shift+g    定位到最后一行</p><p>num shift+g   定位到num行</p><h6 id="②JAVA-HOME环境变量的配置"><a href="#②JAVA-HOME环境变量的配置" class="headerlink" title="②JAVA_HOME环境变量的配置"></a>②JAVA_HOME环境变量的配置</h6><p>Win </p><p>1.在系统环境变量处，新建，变量名：JAVA_HOME   变量值：C:\Program Files\Java\jdk1.8.0_161（jdk目录路径）</p><p>2.找到系统变量中的path变量，选中，点击编辑，新建，添加%JAVA_HOME%\bin</p><p>3.新建CLASSPATH：.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</p><p>Mac </p><p>1.mac系统自带的有java环境，默认路径在终端用whereis java 查看： </p><p>2.默认java在finder中的位置：</p><p>/System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands/java</p><p>如果是从ORACLE下载自己安装，默认安装路径：</p><p> /Library/Java/JavaVirtualMachines/</p><p>需要设置JAVA环境变量，步骤如下：</p><p>1、cd ~  进入用户主目录</p><p>2、touch .bash_profile 新建.bash_profile文件，有则不需要新建</p><p>3、加入如下代码：</p><p>JAVA_HOME=’/Library/Java/JavaVirtualMachines/jdk1.8.0_191.jdk/Contents/Home’</p><p>export JAVA_HOME</p><p>export PATH=$JAVA_HOME/bin:$PATH</p><p>4、保存退出 （control+c，输入：wq!）</p><p>5、使文件生效，输入source  .bash_profile</p><h5 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h5><p>abstract、boolean、break、byte、catch、char、class、continue、default、do、double、else、extends、false、finally、float、for、if、implements、import、instanceof、int、interface、long、native、new、null、package、private、protected、public、short、static、super、switch、synchronized、this、throw、throws、transient、try、true、void、volatile、while</p><h5 id="3-命名规范"><a href="#3-命名规范" class="headerlink" title="3.命名规范"></a>3.命名规范</h5><p><strong>命名规则：<code>硬性要求</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标识符可以包含<span class="code">`英文字母26个(区分大小写)`</span>、<span class="code">`0-9数字`</span> 、<span class="code">`$（美元符号）`</span>和<span class="code">`_（下划线）`</span>。</span><br><span class="line"></span><br><span class="line">标识符不能以数字开头。</span><br><span class="line"></span><br><span class="line">标识符不能是关键字。</span><br></pre></td></tr></table></figure><p><strong>命名规范：<code>软性建议</code></strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。</span><br><span class="line"></span><br><span class="line">方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。</span><br><span class="line"></span><br><span class="line">变量名规范：首字母小写，后面每个单词首字母大写（小驼峰式）。</span><br></pre></td></tr></table></figure><h5 id="4-自增自减运算符"><a href="#4-自增自减运算符" class="headerlink" title="4.自增自减运算符"></a>4.自增自减运算符</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1)单独使用: 没有其它的运算参与</span><br><span class="line"><span class="code">前++/-- 或者 后++/--: 作用相同,都是让变量的值增加1或者减少1</span></span><br><span class="line">(2)混合使用: 和其它运算符(赋值/打印)一起进行运算有重大区别</span><br><span class="line"><span class="code">前++/--: 先给变量++/--,然后再使用变量</span></span><br><span class="line"><span class="code">后++/--: 先使用变量,后给变量++/--</span></span><br></pre></td></tr></table></figure><h5 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h5><p>1.特点：可以存储多个数据，多个数据类型必须保持一致，数组长度一旦确定，不能更改</p><p>2.方法：数组的长度=数组名称.length</p><p>3.异常：</p><p>​        索引越界：java.lang.ArrayIndexOutOfBoundsException</p><p>​        空指针异常：java.lang.NullPointerException</p><h5 id="6-String类"><a href="#6-String类" class="headerlink" title="6.String类"></a>6.String类</h5><p>1.常用方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">1.public boolean equals(Object obj);</span><br><span class="line"><span class="code">s1.equals(s2): 比较s1和s2这两个字符串的内容</span></span><br><span class="line">2.public boolean equalsIgnoreCase(String str);</span><br><span class="line"><span class="code">s1.equalsIgnoreCase(s2): 忽略大小,比较s1和s2这两个字符串的内容</span></span><br><span class="line">3.public int length(): 返回此字符串的长度(字符串中包含的字符的数量)。</span><br><span class="line"><span class="code">s1.length(): 获取字符串s1中的字符数量</span></span><br><span class="line">4.public char charAt(int index):获取调用方法的字符串中索引编号为index处对应的字符</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>//5.1 concat 拼接</span><br><span class="line"><span class="code">//方法原型：public String concat (String str)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.2 contains 判断是否包含某个小字符串</span></span><br><span class="line"><span class="code">//方法原型：public boolean contains (CharSequence s)  </span></span><br><span class="line"></span><br><span class="line"><span class="code">//5.3 endsWith 是否以xx结尾</span></span><br><span class="line"><span class="code">//方法原型：public boolean endsWith(String suffix)</span></span><br><span class="line"></span><br><span class="line"><span class="code">//5.4 startsWith 是否以xx开头</span></span><br><span class="line"><span class="code">//方法原型：public boolean startsWith(String prefix)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.5 indexOf 查找目标字符串在当前字符串中第一次出现的索引</span></span><br><span class="line"><span class="code">//方法原型：public int indexOf(String str)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.6 lastIndexOf 查找目标字符串在当前字符串中最后一次出现的索引</span></span><br><span class="line"><span class="code">//方法原型：public int lastIndexOf(String str)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.7 replace 将当前字符串中的目标字符串,替换为另外一个字符串</span></span><br><span class="line"><span class="code">//方法原型：public String replace(CharSequence s1,CharSequence s2)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.8 substring 截取子串</span></span><br><span class="line"><span class="code">//方法原型：public String substring(int beginIndex)</span></span><br><span class="line"><span class="code">//方法原型：public String substring(int beginIndex, int endIndex);(含头不含尾)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.9 toCharArray 将字符串转成char数组</span></span><br><span class="line"><span class="code">//方法原型：public char[] toCharArray()</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.10 toLowerCase 转成纯小写</span></span><br><span class="line"><span class="code">//方法原型： public String toLowerCase()</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.11 toUpperCase 转成纯大写</span></span><br><span class="line"><span class="code">//方法原型：public String toUpperCase()</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.12 trim 取出字符串两端的空格(不去除空间的空格)</span></span><br><span class="line"><span class="code">//方法原型：public String trim()</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">//5.13 split 切割字符串,参数称为切割符</span></span><br><span class="line"><span class="code">//方法原型：public String[] split(String regex)</span></span><br><span class="line"></span><br><span class="line">==:</span><br><span class="line"><span class="code">    1.基本类型: 比较的是变量中的具体数据值是否相同</span></span><br><span class="line"><span class="code">    2.引用类型:比较的是地址值是否相同,只要new地址值就是不相同的</span></span><br></pre></td></tr></table></figure><h5 id="7-StringBuilder类"><a href="#7-StringBuilder类" class="headerlink" title="7.StringBuilder类"></a>7.StringBuilder类</h5><p>1.String和StringBuilder类的区别</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.StringBuilder中的内容是可以改变的</span><br><span class="line">2.String中的内容是不可以改变的</span><br><span class="line">3.StringBuilder内部提供了反转的方法,而String没有</span><br><span class="line">4.StringBuilder进行大量字符串的拼接时,效率高</span><br></pre></td></tr></table></figure><p>2.概述</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.StringBuilder类: 代表字符串缓冲区,支持可以改变的字符串</span><br><span class="line">   底层: 是一个默认长度为16的字符数组</span><br><span class="line">   构造方法:</span><br><span class="line"><span class="code">       public StringBuilder() ：构造一个空的StringBuilder容器,内部是一个长度为16的字符数组</span></span><br><span class="line"><span class="code">       public StringBuilder(String str) ：把构造方法参数String对象str,转换成为StringBuilder对象</span></span><br><span class="line"></span><br><span class="line">   打印引用变量,默认调用toString方法</span><br></pre></td></tr></table></figure><p>3.StringBuilder的常用方法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder的常用方法</span><br><span class="line"><span class="code">        public StringBuilder append(...) ：添加任意类型数据的字符串形式，并返回当前对象自身。做原样添加</span></span><br><span class="line"><span class="code">        public StringBuilder reverse() ：返回反转的字符序列</span></span><br><span class="line"><span class="code">        public String toString()：将当前StringBuilder对象转换为String对象。</span></span><br></pre></td></tr></table></figure><p>4.String和StringBuilder的相互转换</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder和String相互转换</span><br><span class="line"><span class="code">    1.String --&gt; StringBuilder</span></span><br><span class="line"><span class="code">       构造方法:</span></span><br><span class="line"><span class="code">       public StringBuilder(String str): 把构造方法String参数str,转换成StringBuilder对象</span></span><br><span class="line"></span><br><span class="line"><span class="code">       构造方法:</span></span><br><span class="line"><span class="code">       public StringBuilder(): 创建一个空的StringBuilder对象再调用append()方法</span></span><br><span class="line"><span class="code">    2.StringBuilder --&gt; String</span></span><br><span class="line"><span class="code">       成员方法:</span></span><br><span class="line"><span class="code">       public String toString(): 把调用toString方法的StringBuilder对象,转换成String对象</span></span><br></pre></td></tr></table></figure><h3 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h3><h4 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h4><h5 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h5><p>a.给成员变量加上private</p><p>b.为每个成员变量,提供一组getter和setter</p><p><strong>c.构造器(构造方法)</strong></p><p>构造器的作用：给创建出的对象的成员变量初始化!!</p><h5 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h5><h6 id="1-继承好处："><a href="#1-继承好处：" class="headerlink" title="1.继承好处："></a>1.继承好处：</h6><p>提高代码的复用性，类与类之间有了关系</p><h6 id="2-子类不能继承的内容"><a href="#2-子类不能继承的内容" class="headerlink" title="2.子类不能继承的内容"></a>2.子类不能继承的内容</h6><p>a.父类的构造方法子类无法继承!! (因为构造方法和类名是一样的)</p><p>b.父类的私有成员,子类可以继承但是不能直接使用!!!(间接使用)</p><h6 id="3-继承后的特点——成员变量"><a href="#3-继承后的特点——成员变量" class="headerlink" title="3.继承后的特点——成员变量"></a>3.继承后的特点——成员变量</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.当子父类的成员变量不同名时,访问成员变量时没有歧义,写哪个变量名就是访问哪个变量</span><br><span class="line"></span><br><span class="line">b.当子父类的成员变量同名时,在子类中会根据就近原则,优先访问子类自己的那个成员变量</span><br><span class="line"></span><br><span class="line">c.如果我就想访问父类的成员变量,能否做到???</span><br><span class="line"><span class="code">    可以,在子类的方法中,使用super.变量名,就会访问父类中那个成员变量!</span></span><br></pre></td></tr></table></figure><h6 id="4-继承后的特点——成员方法"><a href="#4-继承后的特点——成员方法" class="headerlink" title="4.继承后的特点——成员方法"></a>4.继承后的特点——成员方法</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.当子父类的成员方法不同名时,调用成员方法时没有歧义,写哪个方法名就是调用哪个方法</span><br><span class="line"></span><br><span class="line">b.当子父类的成员方法同名时,使用子类对象调用该方法,根据就近原则,优先调用子类自己的那个成员方法  </span><br><span class="line"></span><br><span class="line">c.如果我就想通过子类对象,调用父类中的那个同名方法,能做到吗???</span><br><span class="line"><span class="code">    不能做到!!</span></span><br><span class="line"><span class="code">    但是可以在子类的方法中,使用super.方法名()调用父类那个同名方法!!!</span></span><br></pre></td></tr></table></figure><h6 id="5-方法重载与方法重写"><a href="#5-方法重载与方法重写" class="headerlink" title="5.方法重载与方法重写"></a>5.方法重载与方法重写</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方法的重载(overload):</span><br><span class="line"><span class="code">在同一个类中,出现了方法名一样,但是参数列表(参数个数|参数类型|参数顺序)不一样的各种方法,称为方法的重载</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">方法的重写(override):</span><br><span class="line"><span class="code">在继承关系中,子类中出现了一个和父类除了方法体,其他一模一样的方法,称为方法的重写     </span></span><br><span class="line">  </span><br><span class="line">方法重写的具体应用:        </span><br><span class="line"><span class="code">子类继承父类时,会继承父类的成员方法,那么当子类发现继承过来的方法功能不足或者不适用时,子类就可以重写该方法,重新实现自己需要的方法体即可 </span></span><br><span class="line"></span><br><span class="line">重写的注意事项</span><br><span class="line"><span class="code">a.方法重写是发生在子父类之间的关系</span></span><br><span class="line"><span class="code">b.子类方法重写父类方法，必须要保证权限大于等于父类权限(一般来说,父类方法写啥权限,子类也写啥权限)</span></span><br><span class="line"><span class="code">    Java中有四大权限,从大到小依次为:</span></span><br><span class="line"><span class="code">public protected 不写(默认|default) private</span></span><br><span class="line"><span class="code">c.方法重写,除了方法体其他的都要和父类一模一样(虽然权限可以不一样,但是一般我们也写一样的权限)</span></span><br></pre></td></tr></table></figure><h6 id="6-继承后的特点——构造方法"><a href="#6-继承后的特点——构造方法" class="headerlink" title="6.继承后的特点——构造方法"></a>6.继承后的特点——构造方法</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.子类不能继承父类的构造方法  </span><br><span class="line">b.在子类的"任何构造方法"的"第一行",都有默认一句代码"super()",代表调用父类的无参构造 super是默认存在的,可以省略不写,但是不写不代表没有!!!</span><br></pre></td></tr></table></figure><h6 id="7-Java继承的特点"><a href="#7-Java继承的特点" class="headerlink" title="7.Java继承的特点"></a>7.Java继承的特点</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>Java只支持单继承，不支持多继承。(一个类最多只有一个亲爹)</span><br><span class="line"><span class="bullet">2. </span>一个类可以有多个子类。(一个类可以有多个孩子)     </span><br><span class="line"><span class="bullet">3. </span>可以多层继承(一个类可以有父类,其父类也有父类)</span><br><span class="line">总结:  Java只支持单继承,但是支持多层继承</span><br></pre></td></tr></table></figure><h5 id="3-抽象类"><a href="#3-抽象类" class="headerlink" title="3.抽象类"></a>3.抽象类</h5><h6 id="3-1-抽象类的概念和引入"><a href="#3-1-抽象类的概念和引入" class="headerlink" title="3.1 抽象类的概念和引入"></a>3.1 抽象类的概念和引入</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.抽象方法: 只有方法的声明,没有方法的实现</span><br><span class="line">b.含有抽象方法的类就是一个抽象类</span><br></pre></td></tr></table></figure><h6 id="3-2-abstract使用格式"><a href="#3-2-abstract使用格式" class="headerlink" title="3.2 abstract使用格式"></a>3.2 abstract使用格式</h6><ul><li><p>抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="keyword">abstract</span> 返回值类 方法名(参数列表);</span><br></pre></td></tr></table></figure></li><li><p>抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    抽象方法</span><br><span class="line">    正常方法    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-3-抽象类的特征和注意事项"><a href="#3-3-抽象类的特征和注意事项" class="headerlink" title="3.3 抽象类的特征和注意事项"></a>3.3 抽象类的特征和注意事项</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">抽象类的特征:</span><br><span class="line">有得有失!! </span><br><span class="line">  有得: 抽象类具备了含有抽象方法的能力</span><br><span class="line">  有失: 失去创建对象的能力    </span><br><span class="line">        </span><br><span class="line">注意事项:</span><br><span class="line">a.抽象类不能创建对象(Java规定的!!)</span><br><span class="line">    b.抽象类是有构造方法的,用于初始化类的成员变量</span><br><span class="line">    c.抽象类中不一定有抽象方法,但是含有抽象方法的类一定是抽象类(一般来说抽象类中是有抽象方法)</span><br><span class="line">    d.抽象类的子类必须重写抽象类的所有抽象方法,否则子类还是一个抽象类</span><br><span class="line">    e.抽象类的天生作用就是做父类,为子类提供模板</span><br></pre></td></tr></table></figure><h6 id="3-4-抽象类存在的意义"><a href="#3-4-抽象类存在的意义" class="headerlink" title="3.4 抽象类存在的意义"></a>3.4 抽象类存在的意义</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抽象类的天生作用就是做父类,为子类提供模板</span><br></pre></td></tr></table></figure><h5 id="4-final关键字"><a href="#4-final关键字" class="headerlink" title="4.final关键字"></a>4.final关键字</h5><h6 id="4-1final修饰类"><a href="#4-1final修饰类" class="headerlink" title="4.1final修饰类"></a>4.1final修饰类</h6><p>被final修饰的类，称为太监类，不能被继承</p><h6 id="4-2final修饰方法"><a href="#4-2final修饰方法" class="headerlink" title="4.2final修饰方法"></a>4.2final修饰方法</h6><p>被final修饰的方法不能被重写</p><h6 id="4-3final修饰局部变量"><a href="#4-3final修饰局部变量" class="headerlink" title="4.3final修饰局部变量"></a>4.3final修饰局部变量</h6><p>被final修饰的局部变量,表示该变量只能赋值一次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">写法1: 报错!!</span><br><span class="line">final int c = 0; //只能赋值一次</span><br><span class="line">for (int i = 0; i <span class="xml"><span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) &#123; </span></span></span><br><span class="line"><span class="xml">    c = i; // 第二次赋值了,报错!!!</span></span><br><span class="line"><span class="xml">    System.out.println(c); </span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">写法2: 编译通过!</span></span><br><span class="line"><span class="xml">for (int i = 0; i <span class="tag">&lt; <span class="attr">10</span>; <span class="attr">i</span>++) &#123; </span></span></span><br><span class="line"><span class="xml">    final int c = i; //c也是final修饰的</span></span><br><span class="line"><span class="xml">    //因为c是在循环体中定义的,每次循环都是新的一个c</span></span><br><span class="line"><span class="xml">    System.out.println(c); </span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="4-4final修饰引用类型的变量"><a href="#4-4final修饰引用类型的变量" class="headerlink" title="4.4final修饰引用类型的变量"></a>4.4final修饰引用类型的变量</h6><p>final修饰引用类型的变量,表示该引用类型变量中保存的地址值不能改变量</p><h6 id="4-5final修饰成员变量"><a href="#4-5final修饰成员变量" class="headerlink" title="4.5final修饰成员变量"></a>4.5final修饰成员变量</h6><p>被final修饰的成员变量,只能赋值一次,必须在创建对象之前赋值</p><h5 id="5-static关键字"><a href="#5-static关键字" class="headerlink" title="5.static关键字"></a>5.static关键字</h5><p>静态和非静态之间的相互调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">静态成员变量</span><br><span class="line">静态成员方法</span><br><span class="line">    与类是同级,只要类加载到内存,静态的成员变量/成员方法就存在(对象不一定存在)</span><br><span class="line">    </span><br><span class="line">非静态成员变量    </span><br><span class="line">非静态成员方法</span><br><span class="line">    必须创建对象之后才能访问/调用</span><br><span class="line">    </span><br><span class="line">生命周期看:</span><br><span class="line">静态出现的比非静态要早!!!!</span><br><span class="line"> </span><br><span class="line"> 结论:</span><br><span class="line">a.静态与静态之间,非静态与非静态之间是可以相互访问的</span><br><span class="line">    b.非静态可以访问静态,但是静态不能访问非静态       </span><br><span class="line">    静态的: 秦始皇(出现早)</span><br><span class="line">    非静态: 我们(出现晚)</span><br></pre></td></tr></table></figure><p>建议调用格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">静态的成员变量</span><br><span class="line">    对象名.静态的成员变量 【可以访问的,但是我们不建议】</span><br><span class="line">    类名.静态的成员变量 【建议访问的方式】</span><br><span class="line">    </span><br><span class="line">静态的成员方法    </span><br><span class="line">    对象名.静态的成员方法() 【可以访问的,但是我们不建议】</span><br><span class="line">    类名.静态的成员方法() 【建议访问的方式】</span><br><span class="line">总结: 静态成员虽然可以通过对象名去访问/调用,但是我们更建议直接使用类名去访问/调用</span><br></pre></td></tr></table></figure><h5 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h5><h6 id="6-1定义格式"><a href="#6-1定义格式" class="headerlink" title="6.1定义格式"></a>6.1定义格式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">          <span class="comment">//抽象方法【JDK7】</span></span><br><span class="line">          <span class="comment">//默认方法和静态方法【JDK8】</span></span><br><span class="line">          <span class="comment">//私有方法和私有静态方法【JDK9了解】 </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义接口的格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">//抽象方法【主要】,只有接口中抽象方法 public abstract 关键字可以省略(省略不代表没有,编译器会自动添加)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abs1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abs2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//默认方法</span></span><br><span class="line">    <span class="comment">//使用一个关键字修饰 default</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中的默认方法1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中的默认方法2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="comment">//使用一个关键字 static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">s1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中的静态方法1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">s2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接口中的静态方法2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6-2接口的使用"><a href="#6-2接口的使用" class="headerlink" title="6.2接口的使用"></a>6.2接口的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.和抽象类类似,接口也是不能创建的对象的</span><br><span class="line">b.接口也是作为父接口使用的,用于被其他类<span class="string">"实现"</span>的 </span><br><span class="line">c.继承使用extends关键字,实现使用<span class="string">"implements"</span>关键字</span><br><span class="line">    </span><br><span class="line">使用方式:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口名</span>&#123;</span><br><span class="line">        <span class="comment">//a.必须重写接口中所有的抽象方法</span></span><br><span class="line">        <span class="comment">//b.选择性重写接口中的默认方法,但是重写后不能有default</span></span><br><span class="line">        <span class="comment">//c.静态方法没有重写的说法,因为它是通过所在类/接口的名字直接调用的</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6-3接口的多实现"><a href="#6-3接口的多实现" class="headerlink" title="6.3接口的多实现"></a>6.3接口的多实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口1,接口2,..</span>&#123;</span><br><span class="line">        <span class="comment">//a.实现类需要重写所有接口中的所有抽象方法</span></span><br><span class="line">    <span class="comment">//如果有抽象方法是一样的,那么实现类只需要重写一次</span></span><br><span class="line">        <span class="comment">//b.实现类可以选择性重写所有接口中的默认方法</span></span><br><span class="line">    <span class="comment">//如果接口中有一样的默认方法,实现类必须重写一次</span></span><br><span class="line">        <span class="comment">//c.静态方法没有重写的概念,就算多个接口中有一样的静态方法</span></span><br><span class="line">    <span class="comment">//也不冲突,通过各位所在的接口名调用,没有歧义</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6-4实现和继承的优先级问题"><a href="#6-4实现和继承的优先级问题" class="headerlink" title="6.4实现和继承的优先级问题"></a>6.4实现和继承的优先级问题</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一个类 可以在继承一个父类的同时实现多个接口(继承和实现可以同时存在)</span><br><span class="line">格式:</span><br><span class="line">public class 子类/实现类 extends 父类 implements 接口,...&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">继承的优先级 高于 实现,所以必须先extends后implements</span><br></pre></td></tr></table></figure><h6 id="6-5接口中其他成员特点"><a href="#6-5接口中其他成员特点" class="headerlink" title="6.5接口中其他成员特点"></a>6.5接口中其他成员特点</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a.接口中，无法定义成员变量，但是可以定义常量(字面值常量,由public static fina修饰的常量)</span><br><span class="line">    其值不可以改变，默认使用public static final修饰（可省略，但是编译器会自动添加）</span><br><span class="line">    【public static final】 数据类型 常量名 = 值; 【常量名一般纯大写,多个单词之间使用_分隔】</span><br><span class="line">b.接口中，没有构造方法，不能创建对象。      </span><br><span class="line">c.接口中，没有静态代码块</span><br></pre></td></tr></table></figure><h5 id="7-多态"><a href="#7-多态" class="headerlink" title="7.多态"></a>7.<strong>多态</strong></h5><h6 id="7-1多态的前提"><a href="#7-1多态的前提" class="headerlink" title="7.1多态的前提"></a>7.1多态的前提</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.必须有继承关系或者实现关系</span><br><span class="line">b.必须有方法的重写   </span><br><span class="line">只有满足了以上两个前提,才有多态</span><br></pre></td></tr></table></figure><h6 id="7-2多态调用方法的特点"><a href="#7-2多态调用方法的特点" class="headerlink" title="7.2多态调用方法的特点"></a>7.2多态调用方法的特点</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.多态调用方法时,编译阶段看父类</span><br><span class="line">b.多态调用方法时,运行阶段看子类</span><br><span class="line">总结: 多态调用方法的特点是编译看父,运行看子(编译看左,运行看右)</span><br></pre></td></tr></table></figure><h6 id="7-3多态的好处与弊端"><a href="#7-3多态的好处与弊端" class="headerlink" title="7.3多态的好处与弊端"></a>7.3多态的好处与弊端</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">多态的好处是：多态提高了代码的扩展性/灵活性</span><br><span class="line"></span><br><span class="line">多态调用方法时有一个特点: 编译看父,运行看子</span><br><span class="line">多态的弊端: 使用多态时只能调用子父类都有的那个方法,不能调用子类独有的方法  </span><br><span class="line"></span><br><span class="line">多态弊端的解决方案-向下转型</span><br><span class="line"><span class="code">向上转型(把子类类型转成父类类型):</span></span><br><span class="line"><span class="code">Animal an = new Dog(); 多态!!</span></span><br><span class="line"><span class="code">       </span></span><br><span class="line"><span class="code">    向下转型(父类类型转回子类类型):</span></span><br><span class="line"><span class="code">必须有向上转型 才能有向下转型</span></span><br><span class="line"><span class="code">        Dog d = (Dog)an;  </span></span><br><span class="line"><span class="code">        </span></span><br><span class="line">转型可能出现的异常</span><br><span class="line"><span class="code">ClassCastException 类型转换异常</span></span><br><span class="line">什么时候出现这个异常:</span><br><span class="line"><span class="code">当多态是一个子类A,向下转型时是另外一个子类B时,会出现类型转换异常</span></span><br></pre></td></tr></table></figure><h6 id="7-4instanceof关键字的介绍"><a href="#7-4instanceof关键字的介绍" class="headerlink" title="7.4instanceof关键字的介绍"></a>7.4instanceof关键字的介绍</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">instanceof</span>关键字的作用:</span><br><span class="line">可以判断一个对象,是否是我们指定类的对象</span><br><span class="line">格式:</span><br><span class="line"><span class="keyword">boolean</span> b = 对象名 <span class="keyword">instanceof</span> 类名;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个对象,使用多态</span></span><br><span class="line">        Animal an = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//Animal an = new Cat();</span></span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        an.eat(); <span class="comment">//可以调用</span></span><br><span class="line">        <span class="comment">//3.instanceof关键字</span></span><br><span class="line">        <span class="keyword">if</span> (an <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            <span class="comment">//转成Dog</span></span><br><span class="line">            Dog dd = (Dog)an;</span><br><span class="line">            dd.lookHome();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (an <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="comment">//转成Cat</span></span><br><span class="line">            Cat cc = (Cat)an;</span><br><span class="line">            cc.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-内部类"><a href="#8-内部类" class="headerlink" title="8.内部类"></a>8.内部类</h5><h6 id="8-1成员内部类以及其特点"><a href="#8-1成员内部类以及其特点" class="headerlink" title="8.1成员内部类以及其特点"></a>8.1成员内部类以及其特点</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人类,外部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="comment">//a.成员内部类(心脏类)</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Heart</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> jumpCount; <span class="comment">//心跳次数</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏砰砰跳~~"</span>);</span><br><span class="line">            <span class="comment">//在成员内部类中可以无条件访问外部类的任何成员</span></span><br><span class="line">            System.out.println(age);</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//b.局部内部类(了解)</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">xxx</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">成员内部类有两个点:</span><br><span class="line">a.在成员内部类中可以无条件访问外部类的任何成员</span><br><span class="line">    b.在测试类中创建成员内部类对象,该怎么写呢???</span><br><span class="line">        <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//1.创建外部类对象</span></span><br><span class="line">                Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">                <span class="comment">//2.创建内部类对象</span></span><br><span class="line">                <span class="comment">//Java规定,想要创建内部类的对象,必须先创建外部类的对象</span></span><br><span class="line">                <span class="comment">//然后通过外部类对象才能创建内部类对象</span></span><br><span class="line">                <span class="comment">//格式:</span></span><br><span class="line">                <span class="comment">//    Person.Heart 对象名 = new Person().new Heart();</span></span><br><span class="line">                Person.Heart h = <span class="keyword">new</span> Person().<span class="keyword">new</span> Heart();</span><br><span class="line">                <span class="comment">//可以写这么写</span></span><br><span class="line">                Person.Heart h1 = p1.<span class="keyword">new</span> Heart();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="8-2内部类编译之后的字节码文件"><a href="#8-2内部类编译之后的字节码文件" class="headerlink" title="8.2内部类编译之后的字节码文件"></a>8.2内部类编译之后的字节码文件</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">内部类编译之后的字节码文件名:</span><br><span class="line"><span class="code">外部类名$内部类名.class</span></span><br><span class="line">比如我们案例中的Heart类,编译之后:</span><br><span class="line"><span class="code">Person$Heart.class</span></span><br></pre></td></tr></table></figure><h6 id="8-3匿名内部类"><a href="#8-3匿名内部类" class="headerlink" title="8.3匿名内部类"></a>8.3匿名内部类</h6><ul><li><p>什么是匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匿名内部类是内部类的简化形式,简化到不需要内部类的名字</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">匿名内部类可以帮助我们快速的创建一个父类的子类对象或者一个接口的实现类对象!!!</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类的使用1【重点】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//a.定义一个抽象类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//b.定义一个子类 继承 抽象类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="comment">//    c.子类重写抽象方法</span></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"狗舔着吃..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"狗趴着睡..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 需求: 现有一个抽象类,要求我们创建其子类对象,并测试该子类</span></span><br><span class="line"><span class="comment">   * a.定义一个抽象类</span></span><br><span class="line"><span class="comment">   * b.定义一个子类 继承 抽象类</span></span><br><span class="line"><span class="comment">   * c.子类重写抽象方法</span></span><br><span class="line"><span class="comment">   * d.创建子类对象</span></span><br><span class="line"><span class="comment">   * e.调用子类对象的方法</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//d.创建子类对象</span></span><br><span class="line">          Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">          <span class="comment">//e.调用子类对象的方法</span></span><br><span class="line">          dd.eat();</span><br><span class="line">          dd.sleep();</span><br><span class="line">  </span><br><span class="line">          <span class="comment">//使用匿名内部类</span></span><br><span class="line">          Animal an = <span class="keyword">new</span> Animal()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"狗舔着吃..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"狗趴着睡..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        an.eat();</span><br><span class="line">        an.sleep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类的使用2【重点】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.定义接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//b.创建实现类 实现 接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Flyable</span></span>&#123;</span><br><span class="line">    <span class="comment">//c.重写接口的所有抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我想要飞,却飞不高..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求: 定义接口,要求创建一个该接口的实现类对象,测试该对象</span></span><br><span class="line"><span class="comment"> * a.定义接口</span></span><br><span class="line"><span class="comment"> * b.创建实现类 实现 接口</span></span><br><span class="line"><span class="comment"> * c.重写接口的所有抽象方法</span></span><br><span class="line"><span class="comment"> * d.测试类中创建实现类对象</span></span><br><span class="line"><span class="comment"> * e.调用实现类的对象方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//d.测试类中创建实现类对象</span></span><br><span class="line">        Bird b = <span class="keyword">new</span> Bird();</span><br><span class="line">        <span class="comment">//e.调用实现类的对象方法</span></span><br><span class="line">        b.fly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        Flyable ff = <span class="keyword">new</span> Flyable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"我想要飞,却飞不高..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ff.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>总结匿名内部类的格式:<br>    父类名/接口名 对象名 = new 父类名/接口名(){<br>        //重写父类或者接口中所有抽象方法<br>    };<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##### 9.代码块</span><br><span class="line"></span><br><span class="line">###### 9.1构造代码块</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;markdown</span><br><span class="line">构造方法代码块的格式:</span><br><span class="line">public class 类名&#123;</span><br><span class="line">        &#123;</span><br><span class="line">          构造代码块的代码  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">构造代码块什么时候执行呢???</span><br><span class="line">    &quot;每次&quot;调用构造方法创建对象&quot;之前&quot;执行!!</span><br></pre></td></tr></table></figure></p><h6 id="9-2静态代码块"><a href="#9-2静态代码块" class="headerlink" title="9.2静态代码块"></a>9.2静态代码块</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">静态代码块的格式:</span><br><span class="line"><span class="code">public class 类名&#123;</span></span><br><span class="line"><span class="code">        static&#123;</span></span><br><span class="line"><span class="code">             静态代码块</span></span><br><span class="line"><span class="code">        &#125;  </span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">静态代码块什么时候执行呢???</span><br><span class="line"><span class="code">随着类的加载而执行且执行一次，优先构造方法的执行!!!</span></span><br></pre></td></tr></table></figure><h4 id="二、常用API"><a href="#二、常用API" class="headerlink" title="二、常用API"></a>二、常用API</h4><h5 id="1-Object类"><a href="#1-Object类" class="headerlink" title="1.Object类"></a>1.Object类</h5><p>Object类是所有类的父类,所有对象(包括数组)都具有该类中的11个方法</p><h6 id="1-1toString方法"><a href="#1-1toString方法" class="headerlink" title="1.1toString方法"></a>1.1toString方法</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">toString方法:</span><br><span class="line"><span class="code">作用: 返回该对象的字符串表示</span></span><br><span class="line"><span class="code">    默认字符串表示的形式:</span></span><br><span class="line"><span class="code">包名.类名@地址值</span></span><br><span class="line"><span class="code">            比如:com.itheima.demo01_Object01.Dog@4554617c</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    在实际开发中,我们通常会重写toString方法,将本类返回的地址值改成返回该对象中的内容</span></span><br><span class="line"></span><br><span class="line">注意事项:</span><br><span class="line"><span class="code">我们重写了toString之后,当调用对象的toString方法时,返回的不再是地址值,而是具体的属性值</span></span><br><span class="line"><span class="code">        实际上,我们不需要手动调用toString方法,</span></span><br><span class="line"><span class="code">Dog d = new Dog();</span></span><br><span class="line"><span class="code">String s = d.toString();</span></span><br><span class="line"><span class="code">              System.out.println(s);</span></span><br><span class="line"><span class="code">我们只需要:</span></span><br><span class="line"><span class="code">Dog d = new Dog();</span></span><br><span class="line"><span class="code">System.out.println(d);</span></span><br><span class="line"><span class="code">因为我们打印变量名d,编译器会自动调用d.toString(),</span></span><br><span class="line"><span class="code">其实打印就是toString方法的方法返回值</span></span><br><span class="line"><span class="code">         总之:</span></span><br><span class="line"><span class="code">System.out.println(变量名.toString())</span></span><br><span class="line"><span class="code">                等价于</span></span><br><span class="line"><span class="code">                System.out.println(变量名);</span></span><br></pre></td></tr></table></figure><h6 id="1-2equals方法与"><a href="#1-2equals方法与" class="headerlink" title="1.2equals方法与"></a>1.2equals方法与</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">equals方法:</span><br><span class="line"><span class="code">作用:判断其他某个对象是否与此对象“相等”。</span></span><br><span class="line"><span class="code">    默认比较的是什么???</span></span><br><span class="line"><span class="code">        默认比较的是两个对象的地址值!!!</span></span><br><span class="line"><span class="code">    在实际开发中,我们也会重写equals方法,将本来的比较地址值改成比较内容 </span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">扩展(equals和==的区别)</span><br><span class="line"><span class="code">对于基本类型:</span></span><br><span class="line"><span class="code">  == 比较基本类型的数值</span></span><br><span class="line"><span class="code">  equals 没有该方法</span></span><br><span class="line"></span><br><span class="line">  对于引用类型:</span><br><span class="line"><span class="code">    == 比较引用类型的地址值</span></span><br><span class="line"><span class="code">    equals 默认比较地址值,如果子类重写了,按照重写比较规则比较(一般会比较内容)</span></span><br></pre></td></tr></table></figure><h6 id="1-3native本地方法"><a href="#1-3native本地方法" class="headerlink" title="1.3native本地方法"></a>1.3native本地方法</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有native修饰的方法我们称为本地方法,不是用Java写的,使用底层c/c++写的</span><br><span class="line">比如:</span><br><span class="line">public native int hashCode();</span><br></pre></td></tr></table></figure><h6 id="1-4Objects类"><a href="#1-4Objects类" class="headerlink" title="1.4Objects类"></a>1.4Objects类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Objects类,我们称之为工具类(其内部所有的方法都是静态的)</span><br><span class="line">    在Objects中有一个方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span></span>;</span><br><span class="line">用于判断两个对象,是否<span class="string">"相等"</span>,并且避免了空指针异常,该方法源码如下:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b)); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-Date类"><a href="#2-Date类" class="headerlink" title="2.Date类"></a>2.Date类</h5><h6 id="2-1构造方法"><a href="#2-1构造方法" class="headerlink" title="2.1构造方法"></a>2.1构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span></span>; 创建一个Date对象,代表当前的系统时间</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> millis)</span></span>; 创建一个Date对象,代表距离国际基准时间millis毫秒后的那个时间</span><br><span class="line">    国际基准时间: </span><br><span class="line">(英国): <span class="number">1970.01</span><span class="number">.01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">                            (中国): <span class="number">1970.01</span><span class="number">.01</span> <span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><h6 id="2-2常用方法"><a href="#2-2常用方法" class="headerlink" title="2.2常用方法"></a>2.2常用方法</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public long getTime(); 获取当前Date对象距离基准时间的毫秒值</span><br><span class="line">public void setTime(long time); 修改当前Date对象距离标准时间的毫秒值</span><br></pre></td></tr></table></figure><h5 id="3-DateFormat类"><a href="#3-DateFormat类" class="headerlink" title="3.DateFormat类"></a>3.DateFormat类</h5><h6 id="3-1-DateFormat类的作用"><a href="#3-1-DateFormat类的作用" class="headerlink" title="3.1 DateFormat类的作用"></a>3.1 DateFormat类的作用</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用: 让时间日期和具体的文本之间来回转换</span><br><span class="line"></span><br><span class="line">格式化: Date对象 转成 时间字符串</span><br><span class="line">解析:   时间字符串 转回 Date对象</span><br><span class="line"><span class="code">    </span></span><br><span class="line">例如:</span><br><span class="line"><span class="code">new Date()  --&gt;  "2020年03月06日 18点30分26秒" 格式化</span></span><br><span class="line"><span class="code">    "2020年03月06日 18点30分26秒"  --&gt; Date对象  解析</span></span><br></pre></td></tr></table></figure><h6 id="3-2-DateFormat类的构造方法"><a href="#3-2-DateFormat类的构造方法" class="headerlink" title="3.2 DateFormat类的构造方法"></a>3.2 DateFormat类的构造方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">我们不是DateFormat(抽象类),使用的其子类(SimpleDateFormat)</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span></span>;以指定的格式/模式创建SimpleDateFormat对象</span><br><span class="line">这里的参数pattern表示我们想要的时间字符串的格式/模式</span><br><span class="line">    想要这种格式:</span><br><span class="line"><span class="string">"xxxx年xx月xx日 xx:xx:xx"</span></span><br><span class="line">    对应的pattern这么写呢?</span><br><span class="line">            <span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>    </span><br><span class="line">    我们只需要记住:</span><br><span class="line">y -- 年</span><br><span class="line">            M -- 月</span><br><span class="line">            d -- 日</span><br><span class="line">            H -- 时</span><br><span class="line">            m -- 分</span><br><span class="line">            s -- 秒</span><br></pre></td></tr></table></figure><h6 id="3-3-DateFormat类的成员方法"><a href="#3-3-DateFormat类的成员方法" class="headerlink" title="3.3 DateFormat类的成员方法"></a>3.3 DateFormat类的成员方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">format</span><span class="params">(Date date)</span></span>; 格式化方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String time)</span></span>; 解析方法</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个SimpleDateFormat对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日 HH:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//2.格式化 format</span></span><br><span class="line">        Date now = <span class="keyword">new</span> Date();</span><br><span class="line">        String nowStr = sdf.format(now);</span><br><span class="line">        System.out.println(nowStr);</span><br><span class="line">        <span class="comment">//3.解析 parse</span></span><br><span class="line">        System.out.println(<span class="string">"============"</span>);</span><br><span class="line">        Date date = sdf.parse(<span class="string">"2030年04月07日 12:26:20"</span>); <span class="comment">//异常,使用快捷键 alt+回车,再回车</span></span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-Calendar类【理解】"><a href="#4-Calendar类【理解】" class="headerlink" title="4.Calendar类【理解】"></a>4.Calendar类【理解】</h5><h6 id="4-1-Calendar的介绍和获取对象的方式"><a href="#4-1-Calendar的介绍和获取对象的方式" class="headerlink" title="4.1 Calendar的介绍和获取对象的方式"></a>4.1 Calendar的介绍和获取对象的方式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">作用:也是表示某个时间点</span><br><span class="line">Calendar的获取对象的方式:</span><br><span class="line">创建其子类GregorianCalendar类的对象(目前不使用)</span><br><span class="line">    使用Calendar的静态方法【推荐方式】:</span><br><span class="line">Calendar c = Calendar.getInstance(); <span class="comment">//就会创建一个子类对象,返回  </span></span><br><span class="line"></span><br><span class="line">注意:在Calendar类中,月份(<span class="number">0</span>-<span class="number">11</span>)代表我们的(<span class="number">1</span>-<span class="number">12</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * YEAR=2020,</span></span><br><span class="line"><span class="comment"> * MONTH=2,</span></span><br><span class="line"><span class="comment"> * DAY_OF_MONTH=6,</span></span><br><span class="line"><span class="comment"> * HOUR_OF_DAY=11,</span></span><br><span class="line"><span class="comment"> * MINUTE=30,</span></span><br><span class="line"><span class="comment"> * SECOND=24,</span></span><br><span class="line"><span class="comment"> * MILLISECOND=813</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalendar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取一个Calendar对象</span></span><br><span class="line">        Calendar cc = Calendar.getInstance();</span><br><span class="line">        System.out.println(cc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-2-Calendar类中常见的方法"><a href="#4-2-Calendar类中常见的方法" class="headerlink" title="4.2 Calendar类中常见的方法"></a>4.2 Calendar类中常见的方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span></span>; 获取日历对象中某个成员变量的值,其中参数代表该成员变量的编号!!</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span></span>; 修改日历对象中某个成员的值</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span></span>; 增加日历对象中某个成员的值    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCalendar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取一个Calendar对象</span></span><br><span class="line">        Calendar cc = Calendar.getInstance();</span><br><span class="line">        System.out.println(cc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Calendar对象中某个成员的值</span></span><br><span class="line">        print(cc);</span><br><span class="line">        <span class="comment">//3.修改Calendar对象中某个成员的值</span></span><br><span class="line">        cc.set(Calendar.YEAR,<span class="number">3000</span>);</span><br><span class="line">        cc.set(Calendar.MONTH,<span class="number">3</span>);</span><br><span class="line">        cc.set(Calendar.DAY_OF_MONTH,<span class="number">3</span>);</span><br><span class="line">        print(cc);</span><br><span class="line">        <span class="comment">//4.增加Calendar对象中某个成员的值</span></span><br><span class="line">        cc.add(Calendar.YEAR,<span class="number">3000</span>);</span><br><span class="line">        cc.add(Calendar.MONTH,<span class="number">3</span>);</span><br><span class="line">        cc.add(Calendar.DAY_OF_MONTH,<span class="number">3</span>);</span><br><span class="line">        print(cc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Calendar cc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> year = cc.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> month = cc.get(Calendar.MONTH);</span><br><span class="line">        System.out.println(month);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> day = cc.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(day);</span><br><span class="line">              System.out.println(<span class="string">"=========="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">注意事项:</span><br><span class="line">a.Calendar类中,month从<span class="number">0</span>到<span class="number">11</span>,我们是从<span class="number">1</span>-<span class="number">12</span></span><br><span class="line">    b.时间日期,也是有大小之分, 时间越靠后我们认为其越大</span><br></pre></td></tr></table></figure><h5 id="5-Math类中的常见方法"><a href="#5-Math类中的常见方法" class="headerlink" title="5. Math类中的常见方法"></a>5. Math类中的常见方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">abs</span><span class="params">(<span class="keyword">double</span> d)</span></span>; <span class="comment">//求绝对值,如果是正数,那么不变,如果负数那么把负号去掉</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> d)</span></span>;<span class="comment">//向上取整 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> d)</span></span>;<span class="comment">//向下取整</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> d)</span></span>;<span class="comment">// 四舍五入到整数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> d1,<span class="keyword">double</span> d2)</span></span>;<span class="comment">//求次幂(次方)</span></span><br><span class="line">注意:</span><br><span class="line">ceil只要有小数部分不是<span class="number">0</span>,那么就向整数为进<span class="number">1</span></span><br><span class="line">    floor无论如何,小数部分不要,只要整数部分</span><br><span class="line">    Math.ceil(<span class="number">3.0</span>); ===&gt; <span class="number">3.0</span></span><br><span class="line">Math.floor(<span class="number">3.0</span>); ===&gt; <span class="number">3.0</span></span><br></pre></td></tr></table></figure><h5 id="6-System"><a href="#6-System" class="headerlink" title="6.System"></a>6.System</h5><h6 id="6-1-System类的介绍"><a href="#6-1-System类的介绍" class="headerlink" title="6.1 System类的介绍"></a>6.1 System类的介绍</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System类中包含几个静态的变量和静态的方法,并且该类是不能创建对象的</span><br><span class="line">经过我们对System类源码的研究,发现System类的构造被私有化了</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** Don't let anyone instantiate this class */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">System</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6-2-System类的常见方法"><a href="#6-2-System类的常见方法" class="headerlink" title="6.2 System类的常见方法"></a>6.2 System类的常见方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>; 退出JVM虚拟机,按照惯例,参数写<span class="number">0</span>即可!!</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.试图创建一个System对象</span></span><br><span class="line"><span class="comment">//        System s = new System(); //报错! 因为System的构造私有化了</span></span><br><span class="line">        <span class="comment">//2.exit</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"我爱Java"</span>+i);</span><br><span class="line">            <span class="comment">//退出JVM,整个Java程序都会结束</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//            break; //结束当前的循环,如果循环后面还有代码可以继续执行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span>; 获取当前系统之间的毫秒值(距离基准时间的毫秒值)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSystem02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取当前系统时间的毫秒值</span></span><br><span class="line">        <span class="comment">//long millis = System.currentTimeMillis();</span></span><br><span class="line">        <span class="comment">//System.out.println(millis);</span></span><br><span class="line">        <span class="comment">//2. String StringBuilder  用于字符串拼接的性能测试</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5万次的String拼接 耗时8085毫秒 8秒多</span></span><br><span class="line"><span class="comment">//        String s = "";</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 50000; i++) &#123;</span></span><br><span class="line"><span class="comment">//            s += i;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//5万次的StringBuilder拼接 耗时27毫秒 0.027秒</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50000</span>; i++) &#123;</span><br><span class="line">            sb.append(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"耗时"</span>+(end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="comment">//算法: 空间复杂度(占用的内存) 时间复杂度(运行花费的时间)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-BigInteger类"><a href="#7-BigInteger类" class="headerlink" title="7.BigInteger类"></a>7.BigInteger类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">BigInteger不能直接使用+-*/进行计算,而是用通过方法进行计算</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">add</span><span class="params">(BigInteger value)</span></span>; 求和 </span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">subtract</span><span class="params">(BigInteger value)</span></span>; 求差</span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">multiply</span><span class="params">(BigInteger value)</span></span>; 求积</span><br><span class="line"><span class="function"><span class="keyword">public</span> BigInteger <span class="title">divide</span><span class="params">(BigInteger value)</span></span>; 求商    </span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBigInteger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个BigInteger</span></span><br><span class="line">        BigInteger b1 = <span class="keyword">new</span> BigInteger(<span class="string">"99999999999999999"</span>);</span><br><span class="line">        <span class="comment">//2.计算</span></span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        BigInteger add = b1.add(<span class="keyword">new</span> BigInteger(<span class="string">"1111111111111111"</span>));</span><br><span class="line">        System.out.println(add);</span><br><span class="line">        <span class="comment">//求差</span></span><br><span class="line">        BigInteger subtract = b1.subtract(<span class="keyword">new</span> BigInteger(<span class="string">"22222222222222222"</span>));</span><br><span class="line">        System.out.println(subtract);</span><br><span class="line">        <span class="comment">//求积</span></span><br><span class="line">        BigInteger multiply = b1.multiply(<span class="keyword">new</span> BigInteger(<span class="string">"33333333"</span>));</span><br><span class="line">        System.out.println(multiply);</span><br><span class="line">        <span class="comment">//求商,如果除不尽,那么不要小数部分</span></span><br><span class="line">        b1 = <span class="keyword">new</span> BigInteger(<span class="string">"10"</span>);</span><br><span class="line">        BigInteger divide = b1.divide(<span class="keyword">new</span> BigInteger(<span class="string">"3"</span>));</span><br><span class="line">        System.out.println(divide);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-BigDecimal类"><a href="#8-BigDecimal类" class="headerlink" title="8.BigDecimal类"></a>8.BigDecimal类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal的构造方法</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(<span class="keyword">double</span> d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BigDecimal</span><span class="params">(String s)</span></span>; 【推荐】</span><br><span class="line">      </span><br><span class="line">BigDecimal不能直接使用+-*/进行计算,而是用通过方法进行计算</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">add</span><span class="params">(BigDecimal value)</span> 加法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">subtract</span><span class="params">(BigDecimal value)</span> 减法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">multiply</span><span class="params">(BigDecimal value)</span> 乘法运算</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal value)</span> 除法运算<span class="params">(能除尽)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BigDecimal <span class="title">divide</span><span class="params">(BigDecimal value,<span class="keyword">int</span> 保留位数,RoundingMode.HALP_UP)</span> 除法运算<span class="params">(不能除尽)</span></span></span><br></pre></td></tr></table></figure><h5 id="9-Arrays类"><a href="#9-Arrays类" class="headerlink" title="9.Arrays类"></a>9.Arrays类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Arrays是专门操作数组的工具类(方法都是静态的)</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>; 对数组中的元素进行从小到大的排序</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>; 将一个数组的元素拼成一个大的字符串返回 </span><br><span class="line">  </span><br><span class="line">  扩展一下:</span><br><span class="line">sort方法对于数值类型数组排序时,按照数值的从小到大进行排序</span><br><span class="line">  sort方法对于<span class="keyword">char</span>类型数组排序时,按照字符的码值从小到大进行排序 </span><br><span class="line">  sort方法对于String类型数组排序时,首先比较首字母的码值,</span><br><span class="line">如果相等再比较次字母的码值,依次类推,按照从小到到进行排序</span><br></pre></td></tr></table></figure><h5 id="10-包装类"><a href="#10-包装类" class="headerlink" title="10.包装类"></a>10.包装类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">构造方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(String value)</span></span>;</span><br><span class="line"></span><br><span class="line">静态方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(String value)</span></span>;</span><br></pre></td></tr></table></figure><h6 id="10-1拆箱和装箱"><a href="#10-1拆箱和装箱" class="headerlink" title="10.1拆箱和装箱"></a>10.1拆箱和装箱</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">装箱:  把基本类型 --转成--&gt; 对应包装类【重点】</span><br><span class="line">拆箱: 包装类 --转回--&gt; 对应的基本类型【重点】</span><br><span class="line"><span class="code">    </span></span><br><span class="line">比如:</span><br><span class="line"><span class="code">Integer i1 = new Integer(10);  一种装箱操作</span></span><br><span class="line">  Integer i3 = Integer.valueOf(11); 一种装箱操作</span><br><span class="line"><span class="code">        </span></span><br><span class="line">  int value = i1.intValue();   一种拆箱操作</span><br></pre></td></tr></table></figure><h6 id="10-2自动拆箱和装箱"><a href="#10-2自动拆箱和装箱" class="headerlink" title="10.2自动拆箱和装箱"></a>10.2自动拆箱和装箱</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在JDK1.5中,引入了自动拆装箱操作    </span><br><span class="line">Integer i = 10; //底层Integer.valueOf(11)自动帮助我们进行装箱操作</span><br><span class="line">int value = i; //底层 i.intValue()自动帮助我们进行拆箱操作</span><br><span class="line"></span><br><span class="line">思考题:以下代码进行几次自动装箱和自动拆箱操作??</span><br><span class="line"><span class="code">    Integer a = 10; // 装1</span></span><br><span class="line"><span class="code">a++; // a = a + 1  拆1  装1</span></span><br><span class="line"><span class="code">自动装箱几次? 2 </span></span><br><span class="line"><span class="code">    自动拆箱几次? 1</span></span><br></pre></td></tr></table></figure><h6 id="10-3基本类型与字符串之间的转换"><a href="#10-3基本类型与字符串之间的转换" class="headerlink" title="10.3基本类型与字符串之间的转换"></a>10.3基本类型与字符串之间的转换</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">基本类型 转成 String</span><br><span class="line"></span><br><span class="line">  int num = 10;</span><br><span class="line">  a.直接+一个""</span><br><span class="line"><span class="code">    String s = num + "";</span></span><br><span class="line">  </span><br><span class="line">  b.通过String的静态方法valueOf</span><br><span class="line"><span class="code">    String s = String.valueOf(num);  </span></span><br><span class="line"></span><br><span class="line">String 转成 基本类型</span><br><span class="line"></span><br><span class="line">  String num = "100";</span><br><span class="line">  </span><br><span class="line">  第一种方式:</span><br><span class="line">  a.先使用Integer的构造方法</span><br><span class="line"><span class="code">      Integer i = new Integer(num);</span></span><br><span class="line">  b.接着调用intValue方法拆箱</span><br><span class="line"><span class="code">      int number = i.intValue();</span></span><br><span class="line">  c.或者不调用intValue自动拆箱即可</span><br><span class="line"><span class="code">      int number = i;   </span></span><br><span class="line">  </span><br><span class="line">  第二种方式:</span><br><span class="line">  直接调用包装类的parseXxx(String s)解析字符串的方法</span><br><span class="line"><span class="code">      int number = Integer.parseInt(num);</span></span><br></pre></td></tr></table></figure><h5 id="11-引用类型使用小结"><a href="#11-引用类型使用小结" class="headerlink" title="11.引用类型使用小结"></a>11.引用类型使用小结</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">总结: </span><br><span class="line"><span class="code">当基本类型作为方法的参数和返回值时,调用方法和返回数据时,返回该基本类型的值即可</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    当引用类型作为方法的参数和返回值时,调用方法和返回数据时,返回该引用类型的对象/子类对象/实现类对象    </span></span><br><span class="line"><span class="code">    结论: 当方法的参数或者返回值是普通类时,我们要传入或者返回的是该类的对象</span></span><br><span class="line"><span class="code">    结论:当方法的参数或者返回值是抽象类时,我们要传入或者返回的是该抽象类的子类对象</span></span><br><span class="line"><span class="code">    结论:当方法的参数或者返回值是接口时,我们要传入或者返回的是该接口的实现类对象 </span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    基本类型可以作为类的成员变量的,其实引用类型也可以作为类的成员变量</span></span><br><span class="line"><span class="code">    结论: 当普通类作为成员变量,给该成员变量赋值时,赋值普通类的对象</span></span><br><span class="line"><span class="code">    总结: 当抽象类作为成员变量时,给该成员变量赋值,赋该抽象类的子类对象</span></span><br><span class="line"><span class="code">    结论: 当接口作为成员变量时,给该成员变量赋值,赋该接口的实现类对象</span></span><br></pre></td></tr></table></figure><h4 id="三、集合"><a href="#三、集合" class="headerlink" title="三、集合"></a>三、集合</h4><h5 id="1-单列集合Collection"><a href="#1-单列集合Collection" class="headerlink" title="1.单列集合Collection"></a>1.单列集合Collection</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Collection集合根接口：</span><br><span class="line">  方法：<span class="number">7</span>+<span class="number">1</span>种</span><br><span class="line">增：<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">删：<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E e)</span></span>;</span><br><span class="line">改：无</span><br><span class="line">查：无</span><br><span class="line">其他：</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>; 判断集合中是否包含某个元素</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>; 清空集合(把集合的元素全部删除,不是把集合置为<span class="keyword">null</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; 判断集合是否为空(是指集合中是否没有元素,并不是值集合是否为<span class="keyword">null</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>; 返回集合中元素的个数</span><br><span class="line">  <span class="keyword">public</span> Object[] toArray(); 将集合转成数组 </span><br><span class="line">Iterator:遍历集合（<span class="number">1</span>）</span><br><span class="line">    <span class="comment">//使用迭代器</span></span><br><span class="line"><span class="comment">//i.获取要遍历的集合的迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = cc.iterator();</span><br><span class="line"><span class="comment">//ii.调用迭代器对象.hasNext();</span></span><br><span class="line"><span class="comment">//iii.调用迭代器对象.next();</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String ss = it.next();</span><br><span class="line">            System.out.println(ss);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">增强<span class="keyword">for</span>循环的用法:</span><br><span class="line"><span class="keyword">for</span>(数据类型 变量名:集合/数组)&#123;</span><br><span class="line">        System.out.println(变量名);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="1-1-List接口"><a href="#1-1-List接口" class="headerlink" title="1.1 List接口"></a>1.1 List接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">List接口：特点：有序，有索引，元素可重复</span><br><span class="line">    </span><br><span class="line">    Collections工具类：静态方法</span><br><span class="line">Collections.shuffle(集合);打乱集合元素顺序</span><br><span class="line">Collections.sort(集合);升序排序</span><br><span class="line">    </span><br><span class="line">Comparator比较器：</span><br><span class="line">是一个接口，调用时，需要传入一个该接口的实现类对象（匿名内部类）</span><br><span class="line">Collections.sort(arr,<span class="keyword">new</span> Comparator&lt;泛型&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> 基本类型 compare(泛型 o1，泛型 o2)&#123;</span><br><span class="line"><span class="keyword">return</span> o2 - o1;<span class="comment">//降序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">特有方法：</span><br><span class="line">add（<span class="keyword">int</span> index,E e)</span><br><span class="line">remove(<span class="keyword">int</span> index)</span><br><span class="line">get(<span class="keyword">int</span> index);</span><br><span class="line">set(<span class="keyword">int</span> index ,E e);</span><br><span class="line"></span><br><span class="line">ArrayList实现类：底层是数组结构</span><br><span class="line">          </span><br><span class="line">        LinkedList实现类：底层是链表结构，</span><br><span class="line">特有方法：<span class="number">8</span>个</span><br><span class="line">addFirst，addLast</span><br><span class="line">removeFirst，removeLast</span><br><span class="line">getFirst，getLast</span><br><span class="line">push(增),pop(删) 操作首元素</span><br></pre></td></tr></table></figure><h6 id="1-2-Set接口"><a href="#1-2-Set接口" class="headerlink" title="1.2 Set接口"></a>1.2 Set接口</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Set接口：特有方法：无</span><br><span class="line">特点：无序（LinkedHashSet除外），无索引，元素唯一</span><br><span class="line">          </span><br><span class="line">        HashSet实现类：底层是哈希表结构（数组+链表+红黑树）</span><br><span class="line">          </span><br><span class="line">          LinkedHashSet实现类：底层是链表结构+哈希表结构</span><br><span class="line">          特点：有序，无索引，元素唯一</span><br><span class="line">          </span><br><span class="line">          使用哈希表结构保存自定义类型时，为了保证元素的唯一性，要重写自定义类型中的hashCode和equals方法；</span><br><span class="line">          </span><br><span class="line">          TreeSet实现类：底层是红黑树结构</span><br><span class="line">特点：无序（有自然顺序），无索引，元素唯一</span><br><span class="line">          </span><br><span class="line">          TreeSet&lt;Intefer&gt; tree = <span class="keyword">new</span> TreeSet&lt;Intrger&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1,Integer o2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> o2 - o1;<span class="comment">//o1 - o2升，o2 - o1降序</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure><h6 id="1-3泛型"><a href="#1-3泛型" class="headerlink" title="1.3泛型"></a>1.3泛型</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i.泛型怎么写 <span class="xml"><span class="tag">&lt;<span class="name">E</span>&gt;</span></span></span><br><span class="line"><span class="code">    ii.泛型类,泛型接口,泛型方法怎么定义和使用</span></span><br><span class="line"><span class="code">    iii.泛型通配符以及上下限【重点】</span></span><br><span class="line"><span class="code">        &lt;?&gt; 代表任意泛型均可</span></span><br><span class="line"><span class="code">        &lt;? extends 类名&gt; 上限</span></span><br><span class="line"><span class="code">        &lt;? super 类名&gt; 下限</span></span><br></pre></td></tr></table></figure><h6 id="1-4数据结构"><a href="#1-4数据结构" class="headerlink" title="1.4数据结构"></a>1.4数据结构</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">栈结构: 先进后出</span><br><span class="line">  队列结构: 先进先出</span><br><span class="line">  数组结构: 增删慢,查询快</span><br><span class="line">  链表结构: 增删快,查询慢</span><br><span class="line">  红黑树: 查询效率非常恐怖!!</span><br></pre></td></tr></table></figure><h5 id="2-双列结合Map"><a href="#2-双列结合Map" class="headerlink" title="2.双列结合Map"></a>2.双列结合Map</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">方法：</span><br><span class="line">增：put(k键,v值);添加一个键值对</span><br><span class="line">删：remove（K键）；返回值</span><br><span class="line">改：put（K键，v值）；重复的键，不同的值</span><br><span class="line">查：get（K键）；对应的值</span><br><span class="line">其他：</span><br><span class="line">Map.containsKey(Object 键）；判断是否包含该键；</span><br><span class="line">map.containsValue（Object 值）；判断是否包含改制值</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Map中为了保证键的唯一性，如果键是自定义类型，必须重写键的hashCode和equals方法</span><br><span class="line">Map的遍历：</span><br><span class="line">方式一：以键找值</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一种遍历方式:以键找值</span></span><br><span class="line">        <span class="comment">//1.创建一个Map的实现类对象</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        <span class="comment">//2.添加几个</span></span><br><span class="line">        map.put(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line">        map.put(<span class="string">"李四"</span>, <span class="number">28</span>);</span><br><span class="line">        map.put(<span class="string">"王五"</span>, <span class="number">38</span>);</span><br><span class="line">        map.put(<span class="string">"赵六"</span>, <span class="number">48</span>);</span><br><span class="line">        map.put(<span class="string">"前妻"</span>, <span class="number">8</span>);</span><br><span class="line">        map.put(<span class="string">"王八"</span>, <span class="number">88</span>);</span><br><span class="line">        <span class="comment">//3.获取所有的键</span></span><br><span class="line">        Set&lt;String&gt; keys = map.keySet();</span><br><span class="line">        <span class="comment">//4.遍历这个keys集合</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            <span class="comment">//5.以键找值</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">"..."</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line">第二种方式称为:键值对方式</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一种遍历方式:以键找值</span></span><br><span class="line">        <span class="comment">//1.创建一个Map的实现类对象</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        <span class="comment">//2.添加几个</span></span><br><span class="line">        map.put(<span class="string">"张三"</span>, <span class="number">18</span>);</span><br><span class="line">        map.put(<span class="string">"李四"</span>, <span class="number">28</span>);</span><br><span class="line">        map.put(<span class="string">"王五"</span>, <span class="number">38</span>);</span><br><span class="line">        map.put(<span class="string">"赵六"</span>, <span class="number">48</span>);</span><br><span class="line">        <span class="comment">//Map集合遍历的第二种方式:键值对方式</span></span><br><span class="line">        <span class="comment">//3.获取Map中所有的键值对</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="comment">//4.遍历这个entries集合</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="comment">//5.从entry中取出键和值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            <span class="comment">//6.打印</span></span><br><span class="line">            System.out.println(key+<span class="string">"..."</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">HashMap实现类：底层采用哈希表结构，无序</span><br><span class="line"></span><br><span class="line">LinkedHashMap实现类：底层采用链表+哈希表结构，有序</span><br><span class="line">  </span><br><span class="line">TreeMap实现类：底层采用红黑树结构，无序（但是键有自然顺序）</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//1.创建一个TreeMap集合</span></span><br><span class="line">    <span class="comment">//TreeMap&lt;Integer, String&gt; treeMap = new TreeMap&lt;Integer, String&gt;();</span></span><br><span class="line">    TreeMap&lt;Integer, String&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;Integer, String&gt;(<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                 <span class="comment">//口诀: 升序 前-后</span></span><br><span class="line">                 <span class="keyword">return</span> o2-o1;</span><br><span class="line">           &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建TreeMap集合,键是自定义类型</span></span><br><span class="line">     TreeMap&lt;Student, String&gt; map = <span class="keyword">new</span> TreeMap&lt;Student,String&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//按照年龄降序</span></span><br><span class="line">    <span class="comment">//return o2.age-o1.age;</span></span><br><span class="line">              <span class="comment">//按照姓名的长度升序</span></span><br><span class="line">               <span class="keyword">return</span> o1.name.length()-o2.name.length();</span><br><span class="line">           &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h4 id="四、算法"><a href="#四、算法" class="headerlink" title="四、算法"></a>四、算法</h4><h5 id="1-冒泡排序算法"><a href="#1-冒泡排序算法" class="headerlink" title="1.冒泡排序算法"></a>1.冒泡排序算法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">冒泡排序的思想：依次比较数组中相连的两元素,然后将较大元素放在后面,最后按照从小到大顺序排列出来</span><br><span class="line"><span class="code">规律:</span></span><br><span class="line"><span class="code">n个数比较,一共需要比较n-1轮</span></span><br><span class="line"><span class="code">    第1轮,需要比较n-1次,以后每轮比较的次数会递减  </span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">代码实现：</span><br><span class="line"><span class="code">    //准备一个数组</span></span><br><span class="line"><span class="code">        int[] arr = &#123;4, 6, 1, 3, 8, 2, 9, 7, 5&#125;;</span></span><br><span class="line"><span class="code">        //排序</span></span><br><span class="line"><span class="code">        //一共需要几轮??? arr.length - 1轮</span></span><br><span class="line"><span class="code">        //外层循环,控制轮数</span></span><br><span class="line"><span class="code">        for(int i = 0;i &lt; arr.length - 1;i++) &#123;</span></span><br><span class="line"><span class="code">            // i = 0 1 2</span></span><br><span class="line"><span class="code">            //内存循环,控制比较的次数</span></span><br><span class="line"><span class="code">            for(int j = 0;j &lt; arr.length - 1 - i;j++)&#123;</span></span><br><span class="line"><span class="code">                //比较的两个元素:</span></span><br><span class="line"><span class="code">                if (arr[j] &gt; arr[j+1])&#123; //前100 &gt; 后10</span></span><br><span class="line"><span class="code">                    int temp =  arr[j];</span></span><br><span class="line"><span class="code">                    arr[j] = arr[j+1];</span></span><br><span class="line"><span class="code">                    arr[j+1] = temp;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        //测试一下</span></span><br><span class="line"><span class="code">        System.out.println(Arrays.toString(arr));</span></span><br></pre></td></tr></table></figure><h5 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">选择排序的核心思想:</span><br><span class="line"><span class="code">选中第一元素,取出以后的元素依次和选中的元素进行比较,大的往后走,小的往前走</span></span><br><span class="line"><span class="code">    接着选择第二个元素, 取出以后的元素依次和选中的元素进行比较,大的往后走,小的往前走</span></span><br><span class="line"><span class="code">    依次类推... </span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">代码实现：</span><br><span class="line"><span class="code">//1.数组</span></span><br><span class="line"><span class="code">        int[] arr = &#123;5, 4, 7, 1, 8, 2, 3, 6, 9&#125;;</span></span><br><span class="line"><span class="code">        //2.使用选择排序</span></span><br><span class="line"><span class="code">        //外层循环,控制你选中的那个元素</span></span><br><span class="line"><span class="code">        for(int i = 0;i &lt; arr.length - 1;i++)&#123;</span></span><br><span class="line"><span class="code">            //内层循环,控制和那个元素进行比较</span></span><br><span class="line"><span class="code">            for(int j = i+1;j &lt; arr.length;j++)&#123;</span></span><br><span class="line"><span class="code">                //比较 arr[i] arr[j]</span></span><br><span class="line"><span class="code">                if (arr[i] &gt; arr[j])&#123;</span></span><br><span class="line"><span class="code">                    //交换</span></span><br><span class="line"><span class="code">                    int temp = arr[i];</span></span><br><span class="line"><span class="code">                    arr[i] = arr[j];</span></span><br><span class="line"><span class="code">                    arr[j] = temp;</span></span><br><span class="line"><span class="code">                &#125;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        //3.打印</span></span><br><span class="line"><span class="code">        System.out.println(Arrays.toString(arr));</span></span><br></pre></td></tr></table></figure><h5 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3.二分查找"></a>3.二分查找</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">普通查找: 给定数组,从数组中找到某个元素的索引</span><br><span class="line"><span class="code">    int[] arr = &#123;4,5,6,1,7,2,8,9&#125;; 找出 7出现的索引,我们只能从前到后依次遍历</span></span><br><span class="line">二分查找: 给定的数组,必须是有自然顺序的(比如,从小到大), 从数组中找到某个元素的索引  </span><br><span class="line"><span class="code">      int[] arr = &#123;1,3,5,6,8,9,10,12&#125;; 找出3出现的索引,我们可以依然从前到后遍历</span></span><br><span class="line"><span class="code">    但是效率很低,我们从中间开始,根据中间值的大小瞬间可以让查找访问缩小一半</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">代码实现：</span><br><span class="line"><span class="code">//1.定义数组</span></span><br><span class="line"><span class="code">        int[] arr = &#123;10,20,30,40,50,60,70,88,90&#125;;</span></span><br><span class="line"><span class="code">        //2.查找元素</span></span><br><span class="line"><span class="code">        int key = 55;</span></span><br><span class="line"><span class="code">        //3.调用方法</span></span><br><span class="line"><span class="code">        int index = binarySearch(arr, key);</span></span><br><span class="line"><span class="code">        System.out.println(index);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">    //二分查找</span></span><br><span class="line"><span class="code">    public static int binarySearch(int[] arr,int key)&#123;</span></span><br><span class="line"><span class="code">        //1.开始和结束索引</span></span><br><span class="line"><span class="code">        int left = 0;</span></span><br><span class="line"><span class="code">        int right = arr.length - 1;</span></span><br><span class="line"><span class="code">        //2.循环</span></span><br><span class="line"><span class="code">        while (left &lt;= right)&#123;</span></span><br><span class="line"><span class="code">            //3.获取中间索引</span></span><br><span class="line"><span class="code">            int middle = (left + right) / 2;</span></span><br><span class="line"><span class="code">            //4.比较中间索引的元素和key</span></span><br><span class="line"><span class="code">            if (arr[middle] &gt; key)&#123;</span></span><br><span class="line"><span class="code">                right = middle - 1;</span></span><br><span class="line"><span class="code">            &#125;else if(arr[middle] &lt; key)&#123;</span></span><br><span class="line"><span class="code">                left = middle + 1;</span></span><br><span class="line"><span class="code">            &#125;else&#123;</span></span><br><span class="line"><span class="code">                return middle;</span></span><br><span class="line"><span class="code">            &#125;</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">        return -1;</span></span><br></pre></td></tr></table></figure><h4 id="五、异常"><a href="#五、异常" class="headerlink" title="五、异常"></a>五、异常</h4><h5 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">()</span> :以血红色打印异常的详细信息<span class="params">(包括异常类型,异常原因,异常位置)</span>【最常用】</span></span><br><span class="line"><span class="function">    打印的效果如下:</span></span><br><span class="line"><span class="function">Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 3</span></span><br><span class="line"><span class="function">at com.itheima.demo03_exception01.TestException.<span class="title">main</span><span class="params">(TestException.java:<span class="number">6</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> :获取发生异常的原因。  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>; 获取异常的类型和异常描述信息(不用)</span><br></pre></td></tr></table></figure><h5 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2.异常处理"></a>2.异常处理</h5><p>Java中异常相关的五个关键字：throw  throws  try…catch  finally</p><h6 id="2-1抛出异常"><a href="#2-1抛出异常" class="headerlink" title="2.1抛出异常"></a>2.1抛出异常</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">向上抛出异常时,使用throw关键字</span><br><span class="line">使用格式：</span><br><span class="line"><span class="code">    throw 异常对象</span></span><br><span class="line"><span class="code">    throw new 异常类();</span></span><br></pre></td></tr></table></figure><h6 id="2-2Objects中非空判断方法"><a href="#2-2Objects中非空判断方法" class="headerlink" title="2.2Objects中非空判断方法"></a>2.2Objects中非空判断方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Objects类是工具类</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span></span>; 方法内部帮助我们判断是否为<span class="keyword">null</span></span><br><span class="line">查看源码:</span><br><span class="line">该方法也称为 空指针容忍方法</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h6 id="2-3遇到异常的2种处理方式"><a href="#2-3遇到异常的2种处理方式" class="headerlink" title="2.3遇到异常的2种处理方式"></a>2.3遇到异常的2种处理方式</h6><p>throws声明抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a.声明异常的格式</span><br><span class="line">    <span class="keyword">throws</span>关键字是给方法使用的,为该方法做出声明,声明该方法内部有编译时异常,调用者需要处理该异常</span><br><span class="line">    格式:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法名(参数列表)<span class="keyword">throws</span> XxxException&#123;</span><br><span class="line">     一堆代码(如果这堆代码有编译时异常)   </span><br><span class="line">    &#125;</span><br><span class="line">b.案例演示</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException03</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">            <span class="comment">//调用方法</span></span><br><span class="line">            readFile(<span class="string">"1.txt"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义方法:读取硬盘上某个文件</span></span><br><span class="line">        <span class="comment">//throws关键字是给方法使用的,为该方法做出声明,声明该方法内部有编译时异常,调用者需要处理该异常</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line">            <span class="comment">//假设硬盘上有一个叫1.txt的文件</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"1.txt"</span>.equals(name)) &#123;</span><br><span class="line">                <span class="comment">//可以读</span></span><br><span class="line">                System.out.println(<span class="string">"读取文件成功..."</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(<span class="string">"没有找到你要的文件:"</span>+name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>try..catch捕获异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">捕获异常的格式</span><br><span class="line">    格式:</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">         可能出现异常的代码   </span><br><span class="line">        &#125;<span class="keyword">catch</span>(XxxExcption e)&#123;</span><br><span class="line">            <span class="comment">//处理异常</span></span><br><span class="line">            e.printStackTrace(); <span class="comment">//直接打印(开发阶段)</span></span><br><span class="line">            save(e);<span class="comment">//将异常保存到异常日志(异常数据库)</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h6 id="2-4finally代码块"><a href="#2-4finally代码块" class="headerlink" title="2.4finally代码块"></a>2.4finally代码块</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="keyword">finally</span>代码块的格式</span><br><span class="line">    <span class="keyword">finally</span>一般不能单独使用,配合<span class="keyword">try</span>..<span class="keyword">catch</span>使用</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        可能有异常的代码</span><br><span class="line">    &#125;<span class="keyword">catch</span>(XxxException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        写在<span class="keyword">finally</span>中的代码,无论是否有异常,都会执行!!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">b.<span class="keyword">finally</span>代码块的作用</span><br><span class="line">    写在<span class="keyword">finally</span>中的代码,无论是否有异常,都会执行!!</span><br><span class="line">    一般用于写释放资源,关闭连接等代码(后期我们会在IO流,数据库等方面使用到)</span><br><span class="line">c.案例演示    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">     readFile(文件名);   </span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">     打印出异常信息   </span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        释放文件这个资源</span><br><span class="line">        xxx.close();    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="2-5异常的注意事项"><a href="#2-5异常的注意事项" class="headerlink" title="2.5异常的注意事项"></a>2.5异常的注意事项</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">a.运行时异常被抛出可以不处理,不需要throws声明,也不需要trycatch捕获</span><br><span class="line">b.如果父类的方法抛出了多个异常,子类覆盖(重写)父类方法时,只能抛出相同的异常或者是他的子集。假设父类的方法抛出100个异常,子类在重写该方法时,只能抛出这个100个或者这100个中的一部分</span><br><span class="line">c.如果父类的方法没有抛出异常,那么子类在重写该方法时,必须也不能抛出异常 </span><br><span class="line">d.如果我们的异常有多个,我们该如何处理呢???</span><br><span class="line"><span class="code">    方法1(); 可能抛出 One异常</span></span><br><span class="line"><span class="code">方法2(); 可能抛出 Two异常</span></span><br><span class="line"><span class="code">方法3(); 可能抛出 Three异常</span></span><br><span class="line"><span class="code">    i.每个异常单独trycatch【一般人都不使用】</span></span><br><span class="line"><span class="code">    try&#123;</span></span><br><span class="line"><span class="code">         方法1();   </span></span><br><span class="line"><span class="code">        &#125;catch(One e)&#123;</span></span><br><span class="line"><span class="code">            处理</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">         方法2();   </span></span><br><span class="line"><span class="code">        &#125;catch(One e)&#123;</span></span><br><span class="line"><span class="code">            处理</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">try&#123;</span></span><br><span class="line"><span class="code">         方法3();   </span></span><br><span class="line"><span class="code">        &#125;catch(One e)&#123;</span></span><br><span class="line"><span class="code">            处理</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">ii.所有异常一起try,但是分开catch【偶尔使用】</span></span><br><span class="line"><span class="code">        try&#123;</span></span><br><span class="line"><span class="code">            方法1(); 可能抛出 One异常  假设 One extends Two</span></span><br><span class="line"><span class="code">方法2(); 可能抛出 Two异常</span></span><br><span class="line"><span class="code">方法3(); 可能抛出 Three异常</span></span><br><span class="line"><span class="code">        &#125;catch(One e1)&#123;</span></span><br><span class="line"><span class="code">            立刻处理打印</span></span><br><span class="line"><span class="code">        &#125;catch(Two e2)&#123;</span></span><br><span class="line"><span class="code">            稍后处理,保存起来</span></span><br><span class="line"><span class="code">        &#125;catch(Three e3)&#123;</span></span><br><span class="line"><span class="code">            不处理</span></span><br><span class="line"><span class="code">        &#125; </span></span><br><span class="line"><span class="code">"注意事项": 要求 前面的异常必须是子类异常 后面的异常必须是父类</span></span><br><span class="line"><span class="code">iii.所有异常一起try,一个catch【经常使用】</span></span><br><span class="line"><span class="code">        try&#123;</span></span><br><span class="line"><span class="code">            方法1(); 可能抛出 One异常 </span></span><br><span class="line"><span class="code">方法2(); 可能抛出 Two异常</span></span><br><span class="line"><span class="code">方法3(); 可能抛出 Three异常</span></span><br><span class="line"><span class="code">        &#125;catch(Exception e1)&#123;</span></span><br><span class="line"><span class="code">            处理</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"></span><br><span class="line">e.多个异常有三种方式处理:</span><br><span class="line"><span class="code">i.一个异常,一个trycatch</span></span><br><span class="line"><span class="code">    ii.多个异常,一个try多个catch</span></span><br><span class="line"><span class="code">    iii.多个异常,一个try一个catch</span></span><br></pre></td></tr></table></figure><h5 id="3-自定义异常"><a href="#3-自定义异常" class="headerlink" title="3.自定义异常"></a>3.自定义异常</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">自定义异常有固定步骤:</span><br><span class="line">a.创建一个类,类名必须叫XxxException</span><br><span class="line">    b.继承Exception或者RuntimeException</span><br><span class="line">    c.一般来说需要提供两个构造,无参构造+带有String参数的构造     </span><br><span class="line">        </span><br><span class="line"><span class="comment">//a.创建一个类,类名必须叫XxxException</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> /*<span class="title">Exception</span>*/<span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="comment">//b.继承Exception或者RuntimeException</span></span><br><span class="line">    <span class="comment">//c.一般来说需要提供两个构造,无参构造+带有String参数的构造</span></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//带有异常信息的构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//一定要把message把保存起来</span></span><br><span class="line">        <span class="comment">//super(参数) 表示调用父类的构造方法</span></span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六、多线程"><a href="#六、多线程" class="headerlink" title="六、多线程"></a>六、多线程</h4><p>并发和并行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">并行: 两个事件,在同一个时刻,都在发生</span><br><span class="line">并发: 两个事件,在同一个时间段内,都在发生(交替执行)</span><br></pre></td></tr></table></figure><p>进程和线程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进程: 正在内存中运行的程序,我们称为进程</span><br><span class="line">线程: 进程中完成某个小功能的模块(进程中用执行某个功能的执行单元)</span><br></pre></td></tr></table></figure><h5 id="1-创建新的线程方式一-继承方式"><a href="#1-创建新的线程方式一-继承方式" class="headerlink" title="1.创建新的线程方式一_继承方式"></a>1.创建新的线程方式一_继承方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i.创建子类 继承 Thread</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ii.子类中重写run方法(在run中编写线程要执行的任务代码)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"子线程..."</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// iii.创建子类对象(实际上就是创建一个线程对象)</span></span><br><span class="line">        MyThread mt = <span class="keyword">new</span> MyThread();</span><br><span class="line">        <span class="comment">//iv. 调用线程对象的start方法(启动该线程)</span></span><br><span class="line">        mt.start();</span><br><span class="line">        <span class="comment">//主线程 不会等待子线程任务结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"主线程..."</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">a.我们可以给线程起名字,也可以使用默认的名字</span><br><span class="line">  b.我们获取线程的名字时:</span><br><span class="line">建议使用通用方式: Thread.currentThread().getName();</span><br><span class="line">如果是子线程内部也可以直接调用getName()获取子线程的名字</span><br></pre></td></tr></table></figure><h5 id="2-创建新的线程方式二-实现方式"><a href="#2-创建新的线程方式二-实现方式" class="headerlink" title="2.创建新的线程方式二_实现方式"></a>2.创建新的线程方式二_实现方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i.创建实现类 实现 Runnable接口(实际上接口中一个任务方法,run方法)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ii.实现类重写run方法(run中编写具体的任务代码)</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//run中写任务代码</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"子线程..."</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//iii.创建实现类对象(该实现类对象并不是线程对象,我们称为任务对象)</span></span><br><span class="line">            MyRunnable mr = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">            <span class="comment">//iv. 创建Thread对象,同时传入实现类对象</span></span><br><span class="line">            Thread tt = <span class="keyword">new</span> Thread(mr);</span><br><span class="line">            <span class="comment">//v. 启动该线程(调用线程对象的start方法)</span></span><br><span class="line">            tt.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主线程不会等待子线程执行完毕</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"主线程..."</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-匿名内部类简化线程创建方式"><a href="#3-匿名内部类简化线程创建方式" class="headerlink" title="3.匿名内部类简化线程创建方式"></a>3.匿名内部类简化线程创建方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.继承方式创建线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="comment">//2.实现方式创建线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//主线程不会等待子线程任务结束</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"..."</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-高并发和线程安全"><a href="#4-高并发和线程安全" class="headerlink" title="4.高并发和线程安全"></a>4.高并发和线程安全</h5><p>什么是高并发: 是指在某个时间点上，有大量的用户(线程)同时访问同一资源</p><p>线程安全: 是指在某个时间点上,发生高并后,访问的数据出现”不合符实际的数据”,称为线程安全有问题   </p><h6 id="4-1-多线程安全性问题-可见性"><a href="#4-1-多线程安全性问题-可见性" class="headerlink" title="4.1.多线程安全性问题-可见性"></a>4.1.多线程安全性问题-可见性</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么有可见性:</span><br><span class="line">当一个共性变量,被多个线程使用时,其中某个线程对共性变量进行了修改,对于其他线程来说并不是立刻可见的</span><br><span class="line">  其他线程获取的值还是以前的副本(旧的值)</span><br></pre></td></tr></table></figure><h6 id="4-2多线程的安全性问题-有序性"><a href="#4-2多线程的安全性问题-有序性" class="headerlink" title="4.2多线程的安全性问题-有序性"></a>4.2多线程的安全性问题-有序性</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是有序性:</span><br><span class="line">在不影响代码的结果的程度上对代码进行<span class="string">"重排"</span></span><br><span class="line">    如果在多线程的情况下,<span class="string">"重排"</span>可能对一样的代码,执行后得出不一样的结果</span><br><span class="line">    我们要保证在多线程的情况下,不对代码进行<span class="string">"重排"</span>,保证代码是有序(不要使用重排!!)</span><br></pre></td></tr></table></figure><h6 id="4-3多线程的安全性问题-原子性"><a href="#4-3多线程的安全性问题-原子性" class="headerlink" title="4.3多线程的安全性问题-原子性"></a>4.3多线程的安全性问题-原子性</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么原子性:</span><br><span class="line">线程对一个共性变量,进行++时,这个++分成两步操作,先取出值加1 然后给共性变量赋值</span><br><span class="line">    如果取出值加1后,还没有来得及赋值,被其他线程抢走CPU,此时我们称为++操作不具有原子性</span><br></pre></td></tr></table></figure><h5 id="5-volatile关键字"><a href="#5-volatile关键字" class="headerlink" title="5.volatile关键字"></a>5.volatile关键字</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">volatile是用来修饰成员变量(静态变量),被他修饰的变量,具有可见性和有序性</span><br><span class="line">a.解决变量的可见性,一旦变量发生改变,所有使用到该变量的线程都会取到最新值</span><br><span class="line">b.解决变量的有序性,一旦变量加上volatile,那么编译器不会该变量的代码进行重排</span><br><span class="line">c.无法解决变量操作过程中原子性,对变量的操作还是有可能被其他线程打断</span><br></pre></td></tr></table></figure><h5 id="6-原子类"><a href="#6-原子类" class="headerlink" title="6.原子类"></a>6.原子类</h5><p>原子类的工作原理-CAS机制(乐观锁机制，自旋机制)  </p><h6 id="6-1原子类"><a href="#6-1原子类" class="headerlink" title="6.1原子类"></a>6.1原子类</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.什么是原子类?</span><br><span class="line"><span class="code">    是对普通类型(比如:int,Integer,double,Double)的原子类封装,使其的操作成员原子操作</span></span><br><span class="line">b.原子类的作用?</span><br><span class="line"><span class="code">    对原子类的增加或者减少操作,保证是原子性,保证中间不会被其他线程"打断"</span></span><br><span class="line">c.原子类有哪些?</span><br><span class="line"><span class="code">    比如:</span></span><br><span class="line"><span class="code">AtomicInteger是对int变量进行操作的原子类</span></span><br><span class="line"><span class="code">    AtomicLong是对long变量进行操作的原子类</span></span><br><span class="line"><span class="code">    AtomicBoolean对boolean变量操作的“原子类”;</span></span><br><span class="line">注意: 原子类,既可以解决原子性,也可以解决有序性和可见性</span><br></pre></td></tr></table></figure><h6 id="6-2AtomicInteger类示例"><a href="#6-2AtomicInteger类示例" class="headerlink" title="6.2AtomicInteger类示例"></a>6.2AtomicInteger类示例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a.AtomicInteger是什么?</span><br><span class="line">    是对<span class="keyword">int</span>类型变量进行操作的原子类</span><br><span class="line">b.AtomicInteger的构造方法</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicInteger</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line">c.AtomicInteger的成员方法</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>;<span class="comment">//就相当于 变量++  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span></span>;<span class="comment">//就相当于 ++变量 </span></span><br><span class="line">    </span><br><span class="line">d.使用AtomicInteger改写案例    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger a = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                a.getAndIncrement();<span class="comment">//相当于 a++</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"修改完毕！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSafeDemo</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">            MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">            MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">            t1.start(); <span class="comment">//线程1 对a加了10000次</span></span><br><span class="line">            t2.start(); <span class="comment">// 线程2 对a加了 10000次</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">"获取a最终值："</span> + MyThread.a);</span><br><span class="line">            <span class="comment">//总是不准确的。原因：两个线程访问a 的步骤不具有：原子性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="6-3使用原子类数组-保证原子性-解决问题"><a href="#6-3使用原子类数组-保证原子性-解决问题" class="headerlink" title="6.3使用原子类数组,保证原子性,解决问题"></a>6.3使用原子类数组,保证原子性,解决问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] intArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1000</span>];<span class="comment">//不直接使用数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicIntegerArray arr = <span class="keyword">new</span> AtomicIntegerArray(intArray);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; intArray.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            intArray[i]++;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length(); i++) &#123;</span><br><span class="line">            arr.addAndGet(i, <span class="number">1</span>);<span class="comment">//将i位置上的元素 + 1,相当于 ++数组[i]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//创建1000个线程，每个线程为数组的每个元素+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> MyThread().start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);<span class="comment">//让所有线程执行完毕</span></span><br><span class="line">        System.out.println(<span class="string">"主线程休息5秒醒来"</span>);</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; MyThread.intArray.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(MyThread.intArray[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MyThread.arr.length(); i++) &#123;</span><br><span class="line">            System.out.println(MyThread.arr.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七、线程安全解决、并发包"><a href="#七、线程安全解决、并发包" class="headerlink" title="七、线程安全解决、并发包"></a>七、线程安全解决、并发包</h4><h5 id="1-synchronize关键字"><a href="#1-synchronize关键字" class="headerlink" title="1.synchronize关键字"></a>1.synchronize关键字</h5><p>synchronized的作用?? 可以让多句代码具有原子性(当某个线程执行多句代码的过程中不被其他线程打断)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.同步代码块</span><br><span class="line">格式:</span><br><span class="line"><span class="keyword">synchronized</span>(锁对象)&#123;</span><br><span class="line">        需要同步的代码(需要保持原子性的代码)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2</span>.同步方法</span><br><span class="line"> 格式:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> 方法名()&#123;</span><br><span class="line">       需要同步的代码(需要保证原子性的代码)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-Lock锁"><a href="#2-Lock锁" class="headerlink" title="2.Lock锁"></a>2.Lock锁</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Lock是一个接口,我们需要使用其实现类 ReentrantLock</span><br><span class="line">ReentrantLock的API:</span><br><span class="line"><span class="code">public ReentrantLock();  </span></span><br><span class="line"><span class="code">public void lock(); //加锁</span></span><br><span class="line"><span class="code">public void unlock();//解锁(释放锁)</span></span><br><span class="line">格式:</span><br><span class="line"><span class="code">ReentrantLock lock = new ReentrantLock();</span></span><br><span class="line"><span class="code">lock.lock(); //加锁</span></span><br><span class="line"><span class="code">需要同步的代码块(需要保持原子性的代码)</span></span><br><span class="line">  lock.unlock();//解锁</span><br></pre></td></tr></table></figure><h5 id="3-并发包"><a href="#3-并发包" class="headerlink" title="3.并发包"></a>3.并发包</h5><ul><li><p><strong>ArrayList</strong>是线程不安全的</p></li><li><p><strong>CopyOnWriteArrayList</strong>是线程安全的</p></li></ul><ul><li><p><strong>HashSet</strong>是线程不安全的</p></li><li><p><strong>Hashtable</strong>是线程安全的，但效率低</p></li><li><p><strong>ConcurrentHashMap</strong>既安全又效率高</p></li><li><p>为什么<strong>Hashtable</strong>效率低而<strong>ConcurrentHashMap</strong>效率高?</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为HashTable对哈希表进行全表加锁</span><br><span class="line">而ConcurrentHashMap只对某个桶(链表)局部加锁,并且也同时使用CAS机制</span><br></pre></td></tr></table></figure><h6 id="3-1-CountDownLatch"><a href="#3-1-CountDownLatch" class="headerlink" title="3.1    CountDownLatch"></a>3.1    CountDownLatch</h6><p>允许当前线程,等待其他线程完成某种操作之后,当前线程继续执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造方法:</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span></span>; 需要传入计数器,需要等待的线程数</span><br><span class="line">成员方法:</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException<span class="comment">// 让当前线程等待 </span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> <span class="comment">// 计数器进行减1</span></span></span><br></pre></td></tr></table></figure><p><strong>CountDownLatch</strong>使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">需求: </span><br><span class="line">线程<span class="number">1</span>要执行打印：A和C，线程<span class="number">2</span>要执行打印：B</span><br><span class="line">  我们需要这样的结果: 线程<span class="number">1</span> 先打印A 线程<span class="number">2</span>打印B 之后 线程<span class="number">1</span>再打印C    </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//0.创建一个CountDownLatch</span></span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//1.创建两个线程</span></span><br><span class="line">        Thread t1  = <span class="keyword">new</span> MyThread1(latch);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> MyThread2(latch);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(CountDownLatch latch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A...."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            latch.await();<span class="comment">//让当前线程等待</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"C...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread2</span><span class="params">(CountDownLatch latch)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B...."</span>);</span><br><span class="line">        <span class="comment">//让latch的计数器减少1</span></span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-2-CyclicBarrier"><a href="#3-2-CyclicBarrier" class="headerlink" title="3.2    CyclicBarrier"></a>3.2    CyclicBarrier</h6><p>让多个线程,都到达了某种要求之后,新的任务才能执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">构造方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span></span>;</span><br><span class="line">需要多少个线程 所有线程都满足要求了,执行的任务</span><br><span class="line"></span><br><span class="line">成员方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span></span>;当某个线程达到了,需要调用await()</span><br></pre></td></tr></table></figure><p><strong>CyclicBarrier</strong>的使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">需求: 部门开会,假设部门有五个人,五个人都到达了才执行开会这个任务</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPersonThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//0.创建一个CyclicBarrier</span></span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"人都齐了,开会吧"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建五个线程</span></span><br><span class="line">        PersonThread p1 = <span class="keyword">new</span> PersonThread(barrier);</span><br><span class="line">        PersonThread p2 = <span class="keyword">new</span> PersonThread(barrier);</span><br><span class="line">        PersonThread p3 = <span class="keyword">new</span> PersonThread(barrier);</span><br><span class="line">        PersonThread p4 = <span class="keyword">new</span> PersonThread(barrier);</span><br><span class="line">        PersonThread p5 = <span class="keyword">new</span> PersonThread(barrier);</span><br><span class="line">        <span class="comment">//2.开启</span></span><br><span class="line">        p1.start();</span><br><span class="line">        p2.start();</span><br><span class="line">        p3.start();</span><br><span class="line">        p4.start();</span><br><span class="line">        p5.start();</span><br><span class="line">        <span class="comment">//Thread.sleep(6000);</span></span><br><span class="line">        <span class="comment">//System.out.println("人都到了,开会吧...");</span></span><br><span class="line">        <span class="comment">//要求,人没到不开会,都到了立刻开会!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CyclicBarrier barrier;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonThread</span><span class="params">(CyclicBarrier barrier)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">6</span>)*<span class="number">1000</span>);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 到了! "</span>);</span><br><span class="line">            <span class="comment">//调用 barrier的await 表示线程到了</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">补充:</span><br><span class="line">Math的静态方法</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">random</span><span class="params">()</span></span>; <span class="comment">//获取一个0(包括)到1(不包括)的正小数</span></span><br></pre></td></tr></table></figure><h6 id="3-3-Semaphore"><a href="#3-3-Semaphore" class="headerlink" title="3.3    Semaphore"></a>3.3    Semaphore</h6><p>用于控制并发线程的数量!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span></span>; <span class="comment">//参数 permits 表示最多允许有多少个线程并发执行</span></span><br><span class="line">成员方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span></span>; <span class="comment">//获取线程的许可证</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>; <span class="comment">//释放线程的许可证</span></span><br></pre></td></tr></table></figure><p><strong>Semaphore</strong>的使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Semaphore semaphore)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.semaphore = semaphore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//从Semaphore获取线程的许可</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 进入 时间="</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>*<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" 结束 时间="</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//归还semaphore线程的许可</span></span><br><span class="line">        semaphore.release();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//0.创建Semaphore</span></span><br><span class="line">        Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最多的并发线程数量为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> MyThread(semaphore).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4-Exchanger"><a href="#3-4-Exchanger" class="headerlink" title="3.4    Exchanger"></a>3.4    Exchanger</h6><p>用于线程间的数据交换    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法:</span><br><span class="line"><span class="keyword">public</span> Exchanger&lt;V&gt;();</span><br><span class="line">成员方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">exchange</span><span class="params">(V x)</span></span>;<span class="comment">//参数为发给别的线程的数据,返回值别的线程发过来的数据</span></span><br></pre></td></tr></table></figure><p><strong>Exchanger</strong>的使用案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExchanger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//0.创建一个线程间数据交互对象</span></span><br><span class="line">        Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建线程A</span></span><br><span class="line">        ThreadA aThread = <span class="keyword">new</span> ThreadA(exchanger);</span><br><span class="line">        aThread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//休眠</span></span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        ThreadB bThread = <span class="keyword">new</span> ThreadB(exchanger);</span><br><span class="line">        bThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadA</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadA</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程A,要将礼物AAA,送给线程B..."</span>);</span><br><span class="line">        <span class="comment">//调用exchanger</span></span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = exchanger.exchange(<span class="string">"AAA"</span>);<span class="comment">//阻塞</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"线程A,获取到线程B的礼物:"</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadB</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exchanger&lt;String&gt; exchanger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadB</span><span class="params">(Exchanger&lt;String&gt; exchanger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exchanger = exchanger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程B,要将礼物BBB,送给线程A..."</span>);</span><br><span class="line">        String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = exchanger.exchange(<span class="string">"BBB"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"线程B,获取到线程A的礼物:"</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="八、线程池"><a href="#八、线程池" class="headerlink" title="八、线程池"></a>八、线程池</h4><h5 id="1-线程池的使用"><a href="#1-线程池的使用" class="headerlink" title="1.线程池的使用"></a>1.线程池的使用</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">线程池的顶层接口:</span><br><span class="line"><span class="code">java.util.concurrent.Executor</span></span><br><span class="line">线程池的子接口:</span><br><span class="line"><span class="code"> java.util.concurrent.ExecutorService</span></span><br><span class="line">线程池有一个工具类:其作用是帮助我们创建一个线程池对象</span><br><span class="line"><span class="code">java.util.concurrent.Executors</span></span><br><span class="line">工具类中静态方法:创建一个线程池对象</span><br><span class="line">   public static ExecutorService newFixedThreadPool(int nThreads);</span><br><span class="line"><span class="code">创建一个具有指定线程个数的线程池对象</span></span><br><span class="line"><span class="code">                                                    </span></span><br><span class="line">如何向线程池中提交任务呢??     </span><br><span class="line"><span class="code">    调用ExecutorService接口中规定的方法:</span></span><br><span class="line"><span class="code">public Future&lt;?&gt; submit(Runnable task); 向线程池中提交无返回值的任务</span></span><br><span class="line"><span class="code">    public Future&lt;T&gt; submit(Callable&lt;T&gt; task);向线程池中提交有返回值的任务,返回Future类型,</span></span><br><span class="line"><span class="code">表示返回了封装线程执行完毕之后结果的那个对象</span></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个线程池,使用多态接收</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.向线程池中提交 无返回值 任务</span></span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//            service.submit(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//                @Override</span></span><br><span class="line"><span class="comment">//                public void run() &#123;</span></span><br><span class="line"><span class="comment">//                    System.out.println(Thread.currentThread().getName()+"执行了....");//pool-1-thread-1</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//3.向线程池中提交 有返回值 任务</span></span><br><span class="line">        <span class="comment">//提交</span></span><br><span class="line">        Future&lt;Integer&gt; future = service.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//求1-100的和任务</span></span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line">                    sum+=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从future中取出结果</span></span><br><span class="line">        Integer result = future.get();<span class="comment">// 因为方法具有阻塞功能,会等待任务直接完毕之后再返回结果</span></span><br><span class="line">        System.out.println(<span class="string">"result = "</span> + result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果想要整个进程停止</span></span><br><span class="line">        <span class="comment">//那么需要关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-死锁"><a href="#2-死锁" class="headerlink" title="2.死锁"></a>2.死锁</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在多线程中有多把锁,最后导致所有都在等待,造成的现象称为死锁</span><br><span class="line"></span><br><span class="line">产生死锁的条件</span><br><span class="line">a.至少有2个线程</span><br><span class="line">b.至少有2个锁对象</span><br><span class="line">c.必须有synchronized的嵌套 </span><br><span class="line"></span><br><span class="line">注意:如果出现了死锁怎么办??</span><br><span class="line">    无解!! 我们只能事先尽量避免死锁</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.先创建2把锁对象</span></span><br><span class="line">        Object obj1 = <span class="keyword">new</span> Object();</span><br><span class="line">        Object obj2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.再创建2个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//3.必须有synchronized嵌套</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj1)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"线程1抢到了obj1,还需要obj2.."</span>);</span><br><span class="line">                        <span class="keyword">synchronized</span> (obj2)&#123;</span><br><span class="line">                            System.out.println(<span class="string">"线程1抢到了obj2,那么可以执行了..."</span>);</span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+<span class="string">"执行了.."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//4.必须有synchronized嵌套</span></span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj2)&#123;</span><br><span class="line">                        System.out.println(<span class="string">"线程2抢到obj2,还需要抢obj1..."</span>);</span><br><span class="line">                        <span class="keyword">synchronized</span> (obj1)&#123;</span><br><span class="line">                            System.out.println(<span class="string">"线程2抢到obj1,那么可以执行了..."</span>);</span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+<span class="string">"执行了...."</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-线程的状态"><a href="#3-线程的状态" class="headerlink" title="3.线程的状态"></a>3.线程的状态</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a.NEW(新建状态)</span><br><span class="line"><span class="code">刚刚创建的且未调用start方法的线程</span></span><br><span class="line">  b.RUNNABLE(可运行状态)</span><br><span class="line">  处于新建状态的线程调用了start方法之后</span><br><span class="line"><span class="code">注意:只有新建状态的线程才能调用start()    </span></span><br><span class="line">  c.TERMINATED(消亡状态)</span><br><span class="line">  当线程的任务执行完毕,此时线程处于消亡状态</span><br><span class="line"><span class="code">注意:处于消亡状态的线程,不能再调用start方法起死回生!    </span></span><br><span class="line">  d.BLOCKED(锁阻塞状态)</span><br><span class="line">  线程运行的过程中遇到了同步方法,同步代码块,Lock锁,但是锁已经被其他线程持</span><br><span class="line">  e.TIMED_WAITING(限时等待状态)</span><br><span class="line">  线程执行到代码Thread.sleep(毫秒值),线程就处于限时等待状态</span><br><span class="line">  f.WAITING(无限等待状态)</span><br><span class="line">  </span><br><span class="line">  怎么进入WAITING状态??</span><br><span class="line">  a.当前线程获取锁对象</span><br><span class="line">  b.调用锁对象.wait()方法</span><br><span class="line">  c.进入WAITING之前自动释放锁对象</span><br><span class="line">  其他线程怎么唤醒WAITING的线程??</span><br><span class="line">  a.其他线程持有锁对象</span><br><span class="line">  b.调用锁对象.notify()方法</span><br><span class="line">  c.WAITING的线程就会醒来,先进入BLOCKED状态,直到再次获取到锁对象</span><br></pre></td></tr></table></figure><h5 id="4-等待唤醒机制"><a href="#4-等待唤醒机制" class="headerlink" title="4.等待唤醒机制"></a>4.等待唤醒机制</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestWaitingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//如何让一个线程进入 无限等待</span></span><br><span class="line">        <span class="comment">//1.创建一把锁对象</span></span><br><span class="line">        Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建一个线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    <span class="comment">//1.进入这个代码块,说明线程A抢到锁了</span></span><br><span class="line">                    System.out.println(<span class="string">"线程A持有锁对象obj..."</span>);</span><br><span class="line">                    <span class="comment">//2.进入无限等待</span></span><br><span class="line">                    System.out.println(<span class="string">"线程A进入了无限等待了..."</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        obj.wait(); <span class="comment">//进入无限等待之前会自动释放锁对象</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//3.醒来后会继续执行</span></span><br><span class="line">                    System.out.println(<span class="string">"线程A从无限等待中醒来了..."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        <span class="comment">//3.再来一个线程,负责唤醒线程A</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//1.持有相同的锁对象</span></span><br><span class="line">                <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"线程B持有锁对象obj..."</span>);</span><br><span class="line">                    System.out.println(<span class="string">"线程B唤醒了线程A...."</span>);</span><br><span class="line">                    <span class="comment">//2.调用锁对象的notify方法</span></span><br><span class="line">                    obj.notify();</span><br><span class="line">                    <span class="comment">//3.线程执行一下任务</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                        System.out.println(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">a.只有线程进入了无限等待,其他线程调用锁对象.notify()才有作用,否则也可以调用,但是没有任何作用(不会报错)</span><br><span class="line">    b.锁对象.notify方法只能唤醒一个线程,具体是哪一个是随机的       </span><br><span class="line">    c.锁对象.notifyAll方法可以唤醒多个线程,谁抢到锁谁执行</span><br></pre></td></tr></table></figure><h5 id="5-定时器"><a href="#5-定时器" class="headerlink" title="5.定时器"></a>5.定时器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay)</span></span>; <span class="comment">//在指定的时间之后执行指定的任务</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay, <span class="keyword">long</span> period)</span></span>;<span class="comment">//在指定的时间之后开始周期性的执行任务,周期的时间间隔是period</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, Date time)</span></span>;<span class="comment">//在指定的时间点执行指定的任务</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, Date firstTime,<span class="keyword">long</span> period)</span></span>;<span class="comment">//在指定的时间点第一次执行任务,继续周期性执行任务,周期的时间间隔period</span></span><br></pre></td></tr></table></figure><h4 id="九、Lambda表达式"><a href="#九、Lambda表达式" class="headerlink" title="九、Lambda表达式"></a>九、Lambda表达式</h4><h5 id="1-函数式编程的思想"><a href="#1-函数式编程的思想" class="headerlink" title="1.函数式编程的思想"></a>1.函数式编程的思想</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">函数式编程思想:</span><br><span class="line">以一种尽量简单的格式,简化面向对象中复杂的格式,</span><br><span class="line">  面向对象强调是以何种形式去做,</span><br><span class="line">  而函数式编程思想强调是拿什么东西做什么事情,而不强调以何种形式去做!</span><br></pre></td></tr></table></figure><h5 id="2-Lambda标准格式"><a href="#2-Lambda标准格式" class="headerlink" title="2.Lambda标准格式"></a>2.Lambda标准格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Lambda的标准格式:</span><br><span class="line">(参数列表)-&gt;&#123;方法体;<span class="keyword">return</span> 返回值;&#125;</span><br><span class="line"></span><br><span class="line">详情介绍:</span><br><span class="line">(参数列表) 相当于方法的参数,如果没有参数,那么只写小括号即可(小括号不能省略)</span><br><span class="line">    -&gt;: 固定用法,代码拿着前面的参数,去做什么事情</span><br><span class="line">    &#123;&#125;: 大括号中先写计算过程,如果有返回值<span class="keyword">return</span> 返回值;,如果没有返回值<span class="keyword">return</span>语句可以省略</span><br><span class="line">      </span><br><span class="line"><span class="comment">//面向对象的格式</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"执行了..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda的格式</span></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;System.out.println(<span class="string">"执行了..."</span>);&#125;).start();</span><br></pre></td></tr></table></figure><h5 id="3-Lambda的省略格式"><a href="#3-Lambda的省略格式" class="headerlink" title="3.Lambda的省略格式"></a>3.Lambda的省略格式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">a.参数类型可以省略</span><br><span class="line">b.如果参数只有一个,那么小括号可以省略</span><br><span class="line">c.如果&#123;&#125;中的代码可以写成一句代码.那么&#123;&#125;,return关键字和分号可以同时省略(不能省略某个)   </span><br><span class="line">//体验一下Lambda表达式(函数式编程)优雅的写法</span><br><span class="line">new Thread(()-&gt;&#123;System.out.println("执行了...");&#125;).start();</span><br><span class="line">//省略格式</span><br><span class="line">new Thread(()-&gt;System.out.println("执行了...")).start();  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用Lambda表达式修改上面冗余的代码</span><br><span class="line">Arrays.sort(nums,(Integer o1, Integer o2)-&gt;&#123;return o2-o1;&#125;);</span><br><span class="line">//省略格式</span><br><span class="line">Arrays.sort(nums,(o1,o2)-&gt; o2-o1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用Lambda表达式修改上面冗余的代码</span><br><span class="line">Arrays.sort(dogs,(Dog o1, Dog o2)-&gt;&#123;return o2.age-o1.age;&#125;);</span><br><span class="line">//省略格式</span><br><span class="line">Arrays.sort(dogs,(o1,o2)-&gt;o2.age-o1.age);</span><br></pre></td></tr></table></figure><h5 id="4-强烈注意-Lambda的使用前提"><a href="#4-强烈注意-Lambda的使用前提" class="headerlink" title="4.强烈注意:Lambda的使用前提"></a>4.强烈注意:Lambda的使用前提</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.Lambda只能用于替换 有且仅有一个抽象方法的接口的匿名内部类对象,这种接口称为函数式接口</span><br><span class="line">b.Lambda具有上下文推断的功能, 所以我们才会出现Lambda的省略格式</span><br></pre></td></tr></table></figure><h4 id="十、Stream流"><a href="#十、Stream流" class="headerlink" title="十、Stream流"></a>十、Stream流</h4><h5 id="1-两种获取流的方式"><a href="#1-两种获取流的方式" class="headerlink" title="1.两种获取流的方式"></a>1.两种获取流的方式</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.Collection集合获取流</span><br><span class="line"><span class="code">    Stream&lt;E&gt; s = 集合对象.stream();</span></span><br><span class="line"></span><br><span class="line">b.Map集合不能直接获取流,但是可以间接获取流</span><br><span class="line"><span class="code">    map.keySet().stream(); 获取map的键流</span></span><br><span class="line"><span class="code">    map.values().stream(); 获取map的值流</span></span><br><span class="line"><span class="code">    map.entrySet().stream(); 获取Map的键值对流</span></span><br><span class="line"></span><br><span class="line">c.数组获取流</span><br><span class="line"><span class="code">    Stream&lt;数据中元素的类型&gt; s = Stream.of(数据类型... 变量名);</span></span><br></pre></td></tr></table></figure><h5 id="2-Steram流中常用方法"><a href="#2-Steram流中常用方法" class="headerlink" title="2.Steram流中常用方法"></a>2.Steram流中常用方法</h5><ul><li><p>逐个处理:forEach(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取到一个流</span></span><br><span class="line">Stream&lt;String&gt; s1 = Stream.of(<span class="string">"jack"</span>, <span class="string">"tom"</span>, <span class="string">"rose"</span>, <span class="string">"lilei"</span>, <span class="string">"jerry"</span>);</span><br><span class="line"><span class="comment">//2.foreach 逐一处理</span></span><br><span class="line"><span class="comment">//使用匿名内部类</span></span><br><span class="line"><span class="comment">//        s1.forEach(new Consumer&lt;String&gt;() &#123; //</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(String s) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(s);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//使用Lambda</span></span><br><span class="line"><span class="comment">//        s1.forEach((String s)-&gt;&#123;System.out.println(s);&#125;);</span></span><br><span class="line"><span class="comment">//使用Lambda的省略格式</span></span><br><span class="line">s1.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>b.统计个数:count(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.count 统计个数</span></span><br><span class="line"><span class="keyword">long</span> count = s1.count();</span><br><span class="line">System.out.println(<span class="string">"流中有多少个元素:"</span>+count);</span><br></pre></td></tr></table></figure></li><li><p>过滤:filter(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.filte 过滤方法</span></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="comment">//        Stream&lt;String&gt; s2 = s1.filter(new Predicate&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public boolean test(String s) &#123;</span></span><br><span class="line"><span class="comment">//                //我们只想要 长度大于4的字符串</span></span><br><span class="line"><span class="comment">//                return s.length() &gt; 4;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda</span></span><br><span class="line">Stream&lt;String&gt; s2 = s1.filter(s -&gt; s.length() &gt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s2.count());</span><br></pre></td></tr></table></figure></li><li><p>取前几个:limit(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5.limit 取前几个</span></span><br><span class="line">Stream&lt;String&gt; s3 = s1.limit(<span class="number">3</span>);</span><br><span class="line">s3.forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>跳过前几个:skip(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//6.skip 跳过前几个</span></span><br><span class="line">Stream&lt;String&gt; s4 = s1.skip(<span class="number">2</span>);</span><br><span class="line">s4.forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>映射方法:map(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">map方法是将流中每个元素,经过某种算法,变成另外一个元素</span><br><span class="line"><span class="comment">//7.map 映射</span></span><br><span class="line"><span class="comment">//        Stream&lt;Integer&gt; s5 = s1.map(new Function&lt;String, Integer&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public Integer apply(String s) &#123;</span></span><br><span class="line"><span class="comment">//                return s.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"><span class="comment">//Lambda改写</span></span><br><span class="line">Stream&lt;Integer&gt; s5 = s1.map(s-&gt;s.length());</span><br><span class="line"></span><br><span class="line">s5.forEach(s-&gt; System.out.println(s));</span><br></pre></td></tr></table></figure></li><li><p>静态方法合并流:concat(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;T&gt; <span class="title">concat</span><span class="params">(Stream&lt;T&gt; s1,Stream&lt;T&gt; s2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.concat 静态方法,合并两个流</span></span><br><span class="line">Stream&lt;String&gt; ss1 = Stream.of(<span class="string">"jack"</span>,<span class="string">"rose"</span>);</span><br><span class="line">Stream&lt;String&gt; ss2  = Stream.of(<span class="string">"tom"</span>,<span class="string">"lucy"</span>);</span><br><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">Stream&lt;String&gt; sss = Stream.concat(ss1,ss2);</span><br><span class="line">sss.forEach(s-&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">a.如果是两个以上流的合并,需要多次两两合并</span><br><span class="line">    b.如果两个流的泛型不一致也可以合并,合并之后新流的泛型是他们共同的父类(不知道其父类,写Object)</span><br></pre></td></tr></table></figure></li></ul><h4 id="十一、File类"><a href="#十一、File类" class="headerlink" title="十一、File类"></a>十一、File类</h4><h5 id="1-File类的构造"><a href="#1-File类的构造" class="headerlink" title="1.File类的构造"></a>1.File类的构造</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String parent,String child)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(File parent,String child)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="2-File类的获取方法"><a href="#2-File类的获取方法" class="headerlink" title="2.File类的获取方法"></a>2.File类的获取方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAbsolutePath</span><span class="params">()</span></span>; 获取该File对象的绝对路径</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span></span>; 获取该File对象构造时,传入的路径    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>; 获取该File对象的代表的文件或者文件夹的名字</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">length</span><span class="params">()</span></span>; 获取该File对象的大小(单位为字节)</span><br></pre></td></tr></table></figure><h5 id="3-相对路径和绝对路径的概念"><a href="#3-相对路径和绝对路径的概念" class="headerlink" title="3.相对路径和绝对路径的概念"></a>3.相对路径和绝对路径的概念</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">绝对路径: 是指以盘符开头的路径</span><br><span class="line">    比如: <span class="string">"C:\Users\Administrator\Desktop\temp\aaa\1.txt"</span></span><br><span class="line">相对路径: 以当前项目的根目录为起始的路径   </span><br><span class="line">比如: <span class="string">"1.txt"</span>  <span class="string">"aa\\1.txt"</span></span><br></pre></td></tr></table></figure><h5 id="4-File类的判断方法"><a href="#4-File类的判断方法" class="headerlink" title="4.File类的判断方法"></a>4.File类的判断方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>; 判断该File对象代表文件和文件夹是否存在</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirectory</span><span class="params">()</span></span>; 判断该File对象说代表是否是文件夹</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFile</span><span class="params">()</span></span>; 判断该File对象说代表是否是文件</span><br></pre></td></tr></table></figure><h5 id="5-File类的创建删除方法"><a href="#5-File类的创建删除方法" class="headerlink" title="5.File类的创建删除方法"></a>5.File类的创建删除方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdir</span><span class="params">()</span></span>;创建单级文件夹,返回值表示是否创建成功   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">mkdirs</span><span class="params">()</span></span>;创建多级文件夹,返回值表示是否创建成功        </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createNewFile</span><span class="params">()</span></span>;创建文件,返回值表示是否创建成功  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span></span>;删除该File对象代表的文件或者空文件夹,返回值表示是否删除成功 </span><br><span class="line">  </span><br><span class="line">注意: a.mkdir和mkdirs的区别</span><br><span class="line">      b.delete方法要么删除文件,要么删除空文件夹,不能删除非空文件夹</span><br></pre></td></tr></table></figure><h5 id="6-File类遍历目录的方法"><a href="#6-File类遍历目录的方法" class="headerlink" title="6.File类遍历目录的方法"></a>6.File类遍历目录的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] list(); 列出当前文件夹下所有直接的文件和文件夹的名字</span><br><span class="line"><span class="keyword">public</span> File[] listFiles();列出当前文件夹下所有直接的文件和文件夹的File对象</span><br><span class="line">  </span><br><span class="line">  注意: list和listFiles只能列直接的子文件或者子文件夹</span><br></pre></td></tr></table></figure><h4 id="十二、递归"><a href="#十二、递归" class="headerlink" title="十二、递归"></a>十二、递归</h4><p>递归就是:在方法中调用该方法本身(自己调自己)，递归不是Java语言独有的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">如果要使用递归,必须保证递归有出口(结束的条件)</span><br><span class="line">没有出口就会出现无限递归(死递归)这个错误: StackOverflowError 栈溢出错误!!!</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method1(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常递归(有出口)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">//这里就是递归的出口</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"method1...."</span>+n);</span><br><span class="line">        <span class="comment">//调用Method自己</span></span><br><span class="line">        method1(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">注意: 就算递归有出口,还要保证递归在运行到出口之前次数不能太多(太多也会栈内存溢出)</span><br></pre></td></tr></table></figure><h5 id="1-递归求和案例"><a href="#1-递归求和案例" class="headerlink" title="1.递归求和案例"></a>1.递归求和案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">需求: 使用递归求<span class="number">1</span>-n的和(开发中不要用递归求和)</span><br><span class="line"></span><br><span class="line">使用递归三大步骤:</span><br><span class="line">a.先定义一个方法(求和)</span><br><span class="line">    b.找规律,调用自己</span><br><span class="line">    c.让递归有出口(结束的条件)       </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需求: 使用递归求1-n的和(开发中不要用递归求和)</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(<span class="number">100</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用递归</span></span><br><span class="line">    <span class="comment">//a.先定义一个方法(求和)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//c.让递归有出口(结束的条件)</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//b.找规律,调用自己</span></span><br><span class="line">        <span class="comment">// 1+2+3..n = (1+2+3..+n-1) + n</span></span><br><span class="line">        <span class="comment">// getSum(n) = getSum(n-1) + n</span></span><br><span class="line">        <span class="keyword">return</span> getSum(n-<span class="number">1</span>) + n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用循环</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-归求阶乘案例"><a href="#2-归求阶乘案例" class="headerlink" title="2.归求阶乘案例"></a>2.归求阶乘案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">需求: 使用递归求n的阶乘(就是求<span class="number">1</span>-n的积)(开发中不要用递归求积)</span><br><span class="line"></span><br><span class="line">使用递归三大步骤:</span><br><span class="line">a.先定义一个方法(求积)</span><br><span class="line">    b.找规律,调用自己</span><br><span class="line">    c.让递归有出口(结束的条件) </span><br><span class="line">        </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需求: 使用递归求n的阶乘(就是求1-n的积)(开发中不要用递归求和)</span></span><br><span class="line">        <span class="keyword">int</span> ji = getJi(<span class="number">4</span>);</span><br><span class="line">        System.out.println(ji);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用递归三大步骤:</span></span><br><span class="line">    <span class="comment">//a.先定义一个方法(求积)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getJi</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="comment">//c.让递归有出口(结束的条件)</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//b.找规律,调用自己</span></span><br><span class="line">        <span class="comment">// 1*2*3..*n = (1*2*3..n-1)*n</span></span><br><span class="line">        <span class="comment">// getJi(n) = getJi(n-1)*n</span></span><br><span class="line">        <span class="keyword">return</span> getJi(n-<span class="number">1</span>)*n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用循环</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getJi1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ji = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            ji *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ji;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-文件搜索案例"><a href="#3-文件搜索案例" class="headerlink" title="3.文件搜索案例"></a>3.文件搜索案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">需求:</span><br><span class="line">在某个目录中找出所有的.txt文件</span><br><span class="line">    某个目录:C:\Users\Administrator\Desktop\temp\aaa</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecursionDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        需求:</span></span><br><span class="line"><span class="comment">//        在某个目录中找出所有的.txt文件</span></span><br><span class="line"><span class="comment">//        某个目录:C:\Users\Administrator\Desktop\temp\aaa</span></span><br><span class="line">        File fileDir = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\Administrator\\Desktop\\temp\\aaa"</span>);</span><br><span class="line">        <span class="comment">//调用</span></span><br><span class="line">        findTxtFile(fileDir);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从指定的目录中搜索txt文件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findTxtFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.列出该文件夹下所有的File对象</span></span><br><span class="line">        File[] files = file.listFiles();</span><br><span class="line">        <span class="comment">//2.遍历列出的数组</span></span><br><span class="line">        <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">            <span class="comment">//3.判断是否为txt文件</span></span><br><span class="line">            <span class="keyword">if</span> (f.getName().endsWith(<span class="string">".txt"</span>) &amp;&amp; f.isFile()) &#123;</span><br><span class="line">                System.out.println(f);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (f.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//那么列出这个f文件夹下的所有.txt文件即可</span></span><br><span class="line">                findTxtFile(f); <span class="comment">// 递归!!!</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十三、IO流"><a href="#十三、IO流" class="headerlink" title="十三、IO流"></a>十三、IO流</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I: Input 输入流, 数据从外部设备到程序中,读数据的流</span><br><span class="line">O: Output 输出流, 数据从程序到外部设备,写数据的流</span><br><span class="line">流: 一种比喻,数据传输的过程比喻成流</span><br></pre></td></tr></table></figure><h5 id="1-IO流的分类"><a href="#1-IO流的分类" class="headerlink" title="1.IO流的分类"></a>1.IO流的分类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a.根据流的方向分类:</span><br><span class="line">输入流</span><br><span class="line">    输出流</span><br><span class="line">b.根据流中操作的数据类型分类:</span><br><span class="line">字节流 <span class="keyword">byte</span> </span><br><span class="line">    字符流 <span class="keyword">char</span>  </span><br><span class="line">以上两种分类我们可以综合一下:</span><br><span class="line">字节输入流</span><br><span class="line">    字节输出流</span><br><span class="line">        </span><br><span class="line">    字符输入流</span><br><span class="line">    字符输出流</span><br></pre></td></tr></table></figure><h5 id="2-Java中IO的四大流"><a href="#2-Java中IO的四大流" class="headerlink" title="2.Java中IO的四大流"></a>2.Java中IO的四大流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">字节输入流: InputStream(顶层父类,抽象类)</span><br><span class="line">    </span><br><span class="line">字节输出流: OutputStream(顶层父类,抽象类)</span><br><span class="line">    </span><br><span class="line">字符输入流: Reader(顶层父类,抽象类) </span><br><span class="line">    </span><br><span class="line">字符输出流 :Writer(顶层父类,抽象类)   </span><br><span class="line">    </span><br><span class="line">技巧: Java中所有的流都会是以上四个流中某一个的子类</span><br><span class="line">    而且具体的流的命名是非常有规范的!!</span><br><span class="line">    规范: 功能名 +父类名</span><br><span class="line">                </span><br><span class="line">      比如:FileWriter 向文件中写出字符为单位的数据  </span><br><span class="line">      比如:FileInputStream 从文件读取以字节为单位的数据</span><br></pre></td></tr></table></figure><h5 id="3-字节流"><a href="#3-字节流" class="headerlink" title="3.字节流"></a>3.字节流</h5><h6 id="3-1字节输出流"><a href="#3-1字节输出流" class="headerlink" title="3.1字节输出流"></a>3.1字节输出流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">顶层父类: OutputStream(抽象类)</span><br><span class="line">共性方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>; 关闭此流,释放资源</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>; 刷新缓冲区(目前没有!!)</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span></span>; <span class="comment">//一次写一个字节  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] bs)</span></span>;<span class="comment">//一次写一个字节数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] bs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;<span class="comment">//一次写一个字节数组的一部分</span></span><br></pre></td></tr></table></figure><h6 id="3-2FileOutputStream类的使用"><a href="#3-2FileOutputStream类的使用" class="headerlink" title="3.2FileOutputStream类的使用"></a>3.2FileOutputStream类的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的字节输出流(向文件中写字节数据的)</span><br></pre></td></tr></table></figure><ul><li><p>a.构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String path)</span></span>;<span class="comment">//必须传入文件的路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file)</span></span>;<span class="comment">//必须传入文件的File对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileOutputStream</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"1.txt"</span>);</span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(new File("1.txt"));</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造方法干了三件事!!!</span></span><br><span class="line"><span class="comment">         * a.创建对象fos</span></span><br><span class="line"><span class="comment">         * b.判断文件是否存在</span></span><br><span class="line"><span class="comment">         *      如果存在,会清空文件的内容</span></span><br><span class="line"><span class="comment">         *      如果不存在,会自动创建该文件</span></span><br><span class="line"><span class="comment">         * c.让对象fos和1.txt绑定     </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>b.写字节数据的三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileOutputStream</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.向文件中写数据</span></span><br><span class="line">        <span class="comment">//a.写一个字节</span></span><br><span class="line">        fos.write(<span class="number">97</span>); <span class="comment">// a</span></span><br><span class="line">        <span class="comment">//思考:我想要打开之后看到97,怎么办???</span></span><br><span class="line"><span class="comment">//        fos.write(57); // 9</span></span><br><span class="line"><span class="comment">//        fos.write(55); // 7</span></span><br><span class="line">        <span class="comment">//b.写一个字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        fos.write(bs);</span><br><span class="line">        <span class="comment">//思考:我想要打开之后看到HelloWorldJavafghjktyuivnm</span></span><br><span class="line"><span class="comment">//        byte[] bs1 = "HelloWorldJavafghjktyuivnm".getBytes();</span></span><br><span class="line"><span class="comment">//        fos.write(bs1);</span></span><br><span class="line">        <span class="comment">//c.写一个字节数组的一部分</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs2 = &#123;<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>&#125;;</span><br><span class="line">        fos.write(bs2,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>c.如何追加续写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">非常简单!!!!!!只要使用以下构造即可</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(String path,<span class="keyword">boolean</span> append)</span></span>;<span class="comment">//append表示是否追加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileOutputStream</span><span class="params">(File file,<span class="keyword">boolean</span> append)</span></span>;<span class="comment">//append表示是否追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileOutputStream</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"1.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>d.如何换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">非常简单!!!!只要写文件中写一个代表换行的符号即可</span><br><span class="line">    windows \r\n</span><br><span class="line">    Linux   \n</span><br><span class="line">    MacOS\r   (MacOSX 也是 \n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileOutputStream</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"1.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">"java\r\n"</span>.getBytes());</span><br><span class="line"><span class="comment">//            fos.write("\r\n".getBytes());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-3字节输入流"><a href="#3-3字节输入流" class="headerlink" title="3.3字节输入流"></a>3.3字节输入流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">顶层父类: InputStream(抽象类)</span><br><span class="line">共性方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">// 关闭流,释放资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>; <span class="comment">//一次读一个字节</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] bs)</span></span>;<span class="comment">//一次读取一个字节数组,返回值表示实际读取的字节个数</span></span><br></pre></td></tr></table></figure><h6 id="3-4FileInputStream类的使用"><a href="#3-4FileInputStream类的使用" class="headerlink" title="3.4FileInputStream类的使用"></a>3.4FileInputStream类的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的字节输入流(从文件中读取以字节为单位的数据)</span><br></pre></td></tr></table></figure><ul><li><p>a.构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String path)</span></span>;<span class="comment">//传入文件的路径</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(File file)</span></span>;<span class="comment">//传入文件的File对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileInputStream对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>);</span><br><span class="line"><span class="comment">//        FileInputStream fis = new FileInputStream(new File("1.txt"));</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以上构造方法干了三件事!!!</span></span><br><span class="line"><span class="comment">         * a.创建对象fis</span></span><br><span class="line"><span class="comment">         * b.判断文件是否存在</span></span><br><span class="line"><span class="comment">         *      如果存在,什么不干(不清空!!!)</span></span><br><span class="line"><span class="comment">         *      如果不存在,会直接抛出异常FileNotFoundException</span></span><br><span class="line"><span class="comment">         * c.让fis和1.txt绑定</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>b.读取一个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileInputStream对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.读数据</span></span><br><span class="line">        <span class="comment">//a.一次读取一个字节</span></span><br><span class="line">        <span class="comment">//int b = fis.read();</span></span><br><span class="line">        <span class="comment">//System.out.println((char) b);</span></span><br><span class="line">        <span class="comment">//==============一次读取一个字节的标准循环代==================</span></span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;<span class="comment">//保存读取到字节</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (b = fis.read()) != -1</span></span><br><span class="line"><span class="comment">         * 这句代码干了三件事!!!</span></span><br><span class="line"><span class="comment">         * a.先读  fis.read()</span></span><br><span class="line"><span class="comment">         * b.赋值  b = 读取字节</span></span><br><span class="line"><span class="comment">         * c.判断  b != -1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((b = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>c.读取一个字节数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileInputStream对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.读数据</span></span><br><span class="line">        <span class="comment">//b.一次读取一个字节数组</span></span><br><span class="line">        <span class="comment">//byte[] bs = new byte[4]; //实际开发中 一般1024 或者 其整数倍</span></span><br><span class="line">        <span class="comment">//int len = fis.read(bs);</span></span><br><span class="line">        <span class="comment">//System.out.println("实际读取到"+len+"个字节");</span></span><br><span class="line">        <span class="comment">//System.out.println(new String(bs,0,len));</span></span><br><span class="line">        <span class="comment">//===============一次读取一个字节数组的标准循环代码===============</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (len = fis.read(bs)) != -1</span></span><br><span class="line"><span class="comment">         * 以上代码干了三件事</span></span><br><span class="line"><span class="comment">         * a.先读  fis.read(bs)</span></span><br><span class="line"><span class="comment">         * b.赋值  len = 实际读取的个数</span></span><br><span class="line"><span class="comment">         * c.判断  len != -1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-5字节流练习-复制图片"><a href="#3-5字节流练习-复制图片" class="headerlink" title="3.5字节流练习:复制图片"></a>3.5字节流练习:复制图片</h6><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//复制文件</span></span><br><span class="line">        <span class="comment">//1.源文件G:\uplaod\1.png</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"G:\\upload\\1.png"</span>);</span><br><span class="line">        <span class="comment">//2.目标文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"copy.png"</span>);</span><br><span class="line">        <span class="comment">//3.复制文件(一次赋值一个字节数组)</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">// 1KB</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bs,<span class="number">0</span>,len); <span class="comment">// 为了防止最后一次读取时 写入多余的数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.释放资源(先开后关)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-字符流"><a href="#4-字符流" class="headerlink" title="4.字符流"></a>4.字符流</h5><h6 id="4-1字符输入流"><a href="#4-1字符输入流" class="headerlink" title="4.1字符输入流"></a>4.1字符输入流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">顶层父类: Reader(抽象类)</span><br><span class="line">    </span><br><span class="line">共性方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>; 释放资源</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>; 一次读一个字符  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>; 一次读取一个字符数组,返回值表示实际读取的字符个数</span><br></pre></td></tr></table></figure><h6 id="4-2FileReader类的使用"><a href="#4-2FileReader类的使用" class="headerlink" title="4.2FileReader类的使用"></a>4.2FileReader类的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的字符输入流(从文件中读取字符数据)</span><br></pre></td></tr></table></figure><ul><li><p>a.构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(String path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileReader</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileReader01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"1.txt"</span>);</span><br><span class="line"><span class="comment">//        FileReader fr = new FileReader(new File("1.txt"));</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以上构造干了三件事!!</span></span><br><span class="line"><span class="comment">         * a.创建对象fr</span></span><br><span class="line"><span class="comment">         * b.判断文件是否存在</span></span><br><span class="line"><span class="comment">         *      如果存在,不清空!!!</span></span><br><span class="line"><span class="comment">         *      如果不存在,报错!</span></span><br><span class="line"><span class="comment">         * c.绑定fr和1.txt文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>b.读取一个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileReader02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"1.txt"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.一次读一个字符</span></span><br><span class="line">        <span class="comment">//int ch = fr.read();</span></span><br><span class="line">        <span class="comment">//System.out.println((char) ch);</span></span><br><span class="line">        <span class="comment">//===========一次读取一个字符的标准循环代码===========</span></span><br><span class="line">        <span class="keyword">int</span> ch = <span class="number">0</span>; <span class="comment">//用来保存读取到的字符</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (ch = fr.read()) != -1</span></span><br><span class="line"><span class="comment">         * 以上代码干了三件事!!</span></span><br><span class="line"><span class="comment">         * a.读取 fr.read();</span></span><br><span class="line"><span class="comment">         * b.赋值 ch = 读到的字符</span></span><br><span class="line"><span class="comment">         * c.判断 ch != -1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((ch = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>) ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>c.读取一个字符数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileReader03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileReader对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.一次读一个字符数组</span></span><br><span class="line">        <span class="comment">//char[] chs = new char[4];</span></span><br><span class="line">        <span class="comment">//int len = fr.read(chs);</span></span><br><span class="line">        <span class="comment">//System.out.println("实际读取到"+len+"个字符");</span></span><br><span class="line">        <span class="comment">//System.out.println(new String(chs,0,len));</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>]; <span class="comment">//保存字符数据的数组</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//保存实际读取的个数</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * (len = fr.read(chs)) != -1</span></span><br><span class="line"><span class="comment">         * 以上代码也是干了三件事!!!</span></span><br><span class="line"><span class="comment">         * a.读取 fr.read(chs);</span></span><br><span class="line"><span class="comment">         * b.赋值 len = 实际读取的个数</span></span><br><span class="line"><span class="comment">         * c.判断 len != -1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="4-3字符输出流"><a href="#4-3字符输出流" class="headerlink" title="4.3字符输出流"></a>4.3字符输出流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">顶层父类:Writer(抽象类)</span><br><span class="line">    </span><br><span class="line">共性方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">//释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;<span class="comment">//对于字符流来说有用!!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> ch)</span></span>; <span class="comment">//写一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>; <span class="comment">//写一个字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>; <span class="comment">//写一个字符数组的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span></span>;<span class="comment">// 直接写一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;<span class="comment">// 直接写一个字符串的一部分</span></span><br></pre></td></tr></table></figure><h6 id="4-4FileWriter类的使用"><a href="#4-4FileWriter类的使用" class="headerlink" title="4.4FileWriter类的使用"></a>4.4FileWriter类的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文件的字符输出流(向文件中写字符数据)</span><br></pre></td></tr></table></figure><ul><li><p>a.构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"2.txt"</span>);</span><br><span class="line"><span class="comment">//        FileWriter fw = new FileWriter(new File("2.txt"));</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 以上构造干了三件事</span></span><br><span class="line"><span class="comment">         * a.创建对象fw</span></span><br><span class="line"><span class="comment">         * b.判断文件是否存在</span></span><br><span class="line"><span class="comment">         *      如果存在,清空文件内容</span></span><br><span class="line"><span class="comment">         *      如果不存在,会创建文件</span></span><br><span class="line"><span class="comment">         * c.绑定fw和2.txt</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>b.写出字符数据的三组方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> ch)</span></span>; <span class="comment">//写一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs)</span></span>; <span class="comment">//写一个字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] chs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>; <span class="comment">//写一个字符数组的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span></span>;<span class="comment">// 直接写一个字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span></span>;<span class="comment">// 直接写一个字符串的一部分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"2.txt"</span>);</span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        <span class="comment">//a.写一个字符</span></span><br><span class="line">        fw.write(<span class="string">'a'</span>);</span><br><span class="line">        fw.write(<span class="string">'中'</span>);</span><br><span class="line">        <span class="comment">//b.写一个字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">'中'</span>,<span class="string">'国'</span>,<span class="string">'j'</span>,<span class="string">'a'</span>,<span class="string">'v'</span>,<span class="string">'a'</span>,<span class="string">'!'</span>&#125;;</span><br><span class="line">        fw.write(chs);</span><br><span class="line">        <span class="comment">//c.写一个字符数组的一部分</span></span><br><span class="line">        fw.write(chs,<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//d.直接写一个字符串</span></span><br><span class="line">        fw.write(<span class="string">"中国万岁我爱你Java,你爱我吗?"</span>);</span><br><span class="line">        <span class="comment">//e.直接写一个字符串的一部分</span></span><br><span class="line">        fw.write(<span class="string">"中国万岁我爱你Java,你爱我吗?"</span>,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>c.关闭和刷新的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">flush(); 只会刷新缓冲区,不关闭流,流可以继续使用</span><br><span class="line">close(); 不仅会刷新缓冲区,还会关闭流,流不能继续使用  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"3.txt"</span>);</span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        fw.write(<span class="string">"php"</span>);</span><br><span class="line">        <span class="comment">//3.刷新缓冲</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">//再次写数据,OK的</span></span><br><span class="line">        fw.write(<span class="string">"python"</span>);</span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">//4.释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        <span class="comment">//再次写数据,报错,流已经关闭</span></span><br><span class="line">        fw.write(<span class="string">"python"</span>);</span><br><span class="line">        fw.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>d.续写和换行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">如何续写: 很简单!!! 只要使用下面这个两个构造即可</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(String path,<span class="keyword">boolean</span> append)</span></span>;<span class="comment">//append表示是否需要续写</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileWriter</span><span class="params">(File file,<span class="keyword">boolean</span> append)</span></span>;<span class="comment">//append表示是否需要续写</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileWriter对象,保证续写</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"3.txt"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//2.续写</span></span><br><span class="line">        fw.write(<span class="string">"python"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">如何换行: 很简单!!! 向文件中写一个换行符即可</span><br><span class="line">    windows: \r\n(windows系统必须使用\r\n)</span><br><span class="line">    Linux:  \n</span><br><span class="line">    MacOS: \r (MacOSX以及以后的系统,也是\n)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFileWriter05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个FileWriter对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"4.txt"</span>);</span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fw.write(<span class="string">"c++\r\n"</span>);</span><br><span class="line"><span class="comment">//            fw.write("\r\n");</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-IO流的异常处理"><a href="#5-IO流的异常处理" class="headerlink" title="5.IO流的异常处理"></a>5.IO流的异常处理</h5><h6 id="5-1JDK7之前的标准IO处理"><a href="#5-1JDK7之前的标准IO处理" class="headerlink" title="5.1JDK7之前的标准IO处理"></a>5.1JDK7之前的标准IO处理</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//IO流异常的标准处理方式(JDK1.7以前)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建FileReader</span></span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(<span class="string">"1.txt"</span>);</span><br><span class="line">        <span class="comment">//2.读</span></span><br><span class="line">        <span class="keyword">int</span> ch = fr.read();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">        ioe.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//写释放资源的代码</span></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fr.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">            ie.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-2JDK7引入的IO处理"><a href="#5-2JDK7引入的IO处理" class="headerlink" title="5.2JDK7引入的IO处理"></a>5.2JDK7引入的IO处理</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>-with-resource(和资源一起<span class="keyword">try</span>)</span><br><span class="line">格式:</span><br><span class="line"><span class="keyword">try</span>(创建资源的代码;创建资源的代码;创建资源的代码)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">catch</span>(XxxException e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//IO流异常的标准处理方式(JDK1.7)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"1.txt"</span>)) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = fr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) ch);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-缓冲流"><a href="#6-缓冲流" class="headerlink" title="6.缓冲流"></a>6.缓冲流</h5><h6 id="6-1缓冲流的分类"><a href="#6-1缓冲流的分类" class="headerlink" title="6.1缓冲流的分类"></a>6.1缓冲流的分类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">缓冲字节输入流:BufferedInputStream  ---&gt; 对普通的字节输入流InputStream的增强    </span><br><span class="line">缓冲字节输出流:BufferedOutputStream   ---&gt; 对普通的字节输出流OutputStream的增强  </span><br><span class="line">    </span><br><span class="line">缓冲字符输入流: BufferedReader  ---&gt; 对普通的字符输入流Reader的增强</span><br><span class="line">缓冲字符输出流: BufferedWriter  ---&gt; 对普通的字符输出流Writer的增强</span><br></pre></td></tr></table></figure><h6 id="6-2字节缓冲流的介绍"><a href="#6-2字节缓冲流的介绍" class="headerlink" title="6.2字节缓冲流的介绍"></a>6.2字节缓冲流的介绍</h6><ul><li><p>字节缓冲流的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedInputStream</span><span class="params">(InputStream in)</span></span>;<span class="comment">//缓冲流的构造需要接收对应普通流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream out)</span></span>;<span class="comment">//缓冲流的构造需要接收对应普通流</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="6-3字符缓冲流的介绍"><a href="#6-3字符缓冲流的介绍" class="headerlink" title="6.3字符缓冲流的介绍"></a>6.3字符缓冲流的介绍</h6><ul><li><p>a.字符缓冲流的构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedWriter</span><span class="params">(Writer w)</span></span>;<span class="comment">//需要传入普通的字符流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedReader</span><span class="params">(Reader r)</span></span>;<span class="comment">//需要传入普通的字符流</span></span><br><span class="line"></span><br><span class="line">字符缓冲流也是对普通字符类的性能增强(课下可以自己复制一个文本文件,做比较)</span><br></pre></td></tr></table></figure></li><li><p>b.字符缓冲流的2个特有方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter  是 普通Writer的增强</span><br><span class="line">    多了一个特有方法: 写一个换行符(根据系统而定)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"> BufferedReader 是 普通Reader的增强</span><br><span class="line">      多个一个特有方法: 一次读取一行内容</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">readLine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">  一次读取一行的标准循环,不会因为有一行为<span class="string">"null"</span>字符串内容或者有一行为<span class="string">""</span>字符串内容而停止</span><br><span class="line">    只有读取到文件的末尾,没有内容返回值<span class="keyword">null</span>才能停止!!</span><br></pre></td></tr></table></figure></li></ul><h5 id="7-转换流"><a href="#7-转换流" class="headerlink" title="7.转换流"></a>7.转换流</h5><h6 id="7-1编码和解码"><a href="#7-1编码和解码" class="headerlink" title="7.1编码和解码"></a>7.1编码和解码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">编码: 把字符 ----&gt; 字节 ,比如 <span class="string">'a'</span>  ---&gt; <span class="number">97</span>(<span class="number">0110</span> <span class="number">0001</span>)</span><br><span class="line">解码: 把字节 ----&gt; 字符 ,比如 <span class="number">97</span>(<span class="number">0110</span> <span class="number">0001</span>) ---&gt; <span class="string">'a'</span></span><br></pre></td></tr></table></figure><h6 id="7-2字符集"><a href="#7-2字符集" class="headerlink" title="7.2字符集"></a>7.2字符集</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符集: 一个系统支持的所有字符的集合(文字,标点,数字,图形符号等)</span><br></pre></td></tr></table></figure><h6 id="7-3字符编码"><a href="#7-3字符编码" class="headerlink" title="7.3字符编码"></a>7.3字符编码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符编码: 字符和二进制一一对应的一套规则,比如 字符<span class="string">'a'</span> 对应的码值 <span class="number">97</span></span><br></pre></td></tr></table></figure><h5 id="常见的字符集和字符编码"><a href="#常见的字符集和字符编码" class="headerlink" title="常见的字符集和字符编码"></a>常见的字符集和字符编码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ASCII字符集  ---&gt; ASCII编码, 规定ASCII字符集中所有的字符都占<span class="number">1</span>个字节</span><br><span class="line">GBK字符集 ---&gt; GBK编码,规定所有中文字符都占<span class="number">2</span>个字节(这两个字节都是负数)</span><br><span class="line">Unicode字符集 ---&gt; UTF-<span class="number">8</span>编码,规定所有中文字符都占<span class="number">3</span>个字节  </span><br><span class="line">    </span><br><span class="line">ISO-<span class="number">8859</span>-<span class="number">1</span>字符集.这是西欧国家的字符集,(我们以后使用Tomcat7以前默认就是使用ISO-<span class="number">8859</span>-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h6 id="7-4-使用转换流InputStreamReader解决读取中文的问题"><a href="#7-4-使用转换流InputStreamReader解决读取中文的问题" class="headerlink" title="7.4 使用转换流InputStreamReader解决读取中文的问题"></a>7.4 使用转换流InputStreamReader解决读取中文的问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换输入流 InputStreamReader extends Reader</span><br></pre></td></tr></table></figure><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in,String charsetName)</span></span>;<span class="comment">//指定使用何种编码读文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InputStreamReader</span><span class="params">(InputStream in)</span></span>;<span class="comment">//使用工具默认的编码去读文件(IDEA默认UTF-8)</span></span><br></pre></td></tr></table></figure></li><li><p>使用InputStreamReader读取不同编码的文件(代码演示)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建InputStreamReader对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"utf8.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(new FileInputStream("gbk.txt"),"GBK");</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(new FileInputStream("utf8.txt"),"GBK");</span></span><br><span class="line">        <span class="comment">//2.读数据</span></span><br><span class="line">        <span class="keyword">int</span> ch = isr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) ch);</span><br><span class="line"></span><br><span class="line">        ch = isr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) ch);</span><br><span class="line"></span><br><span class="line">        ch = isr.read();</span><br><span class="line">        System.out.println((<span class="keyword">char</span>) ch);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="7-5使用转换流OutputStreamWriter写不同编码的中文"><a href="#7-5使用转换流OutputStreamWriter写不同编码的中文" class="headerlink" title="7.5使用转换流OutputStreamWriter写不同编码的中文"></a>7.5使用转换流OutputStreamWriter写不同编码的中文</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换输出流OutputStreamWriter extends Writer</span><br></pre></td></tr></table></figure><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out,String charsetName)</span></span>;<span class="comment">//写文件时指定编码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span></span>;<span class="comment">//使用工具默认的编码写文本(IDEA是UTF-8)</span></span><br></pre></td></tr></table></figure></li><li><p>输出指定编码的中文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOutputStreamWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建OutputStreamWriter对象</span></span><br><span class="line"><span class="comment">//        OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("newgbk.txt"),"GBK");</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"newutf8.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//2.写数据</span></span><br><span class="line">        osw.write(<span class="string">"你好"</span>);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="7-6-转换流练习"><a href="#7-6-转换流练习" class="headerlink" title="7.6 转换流练习"></a>7.6 转换流练习</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">需求:将GBK编码的文本文件，转换为UTF-<span class="number">8</span>编码的文本文件。</span><br><span class="line">分析:</span><br><span class="line">a.先把GBK文件中内容读取出来(指定以GBK编码读取)</span><br><span class="line">    b.再把数据写入到UtF-<span class="number">8</span>文件中(指定以UTF-<span class="number">8</span>编码写入)    </span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        需求:将GBK编码的文本文件，转换为UTF-8编码的文本文件。</span></span><br><span class="line"><span class="comment">//        分析:</span></span><br><span class="line"><span class="comment">//        a.先把GBK文件中内容读取出来(指定以GBK编码读取)</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"gbk.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line"><span class="comment">//        b.再把数据写入到UtF-8文件中(指定以UTF-8编码写入)</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"UTF8.txt"</span>),<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//复制</span></span><br><span class="line">        <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((ch = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-序列化流"><a href="#8-序列化流" class="headerlink" title="8. 序列化流"></a>8. 序列化流</h5><h6 id="8-1-什么是序列化流"><a href="#8-1-什么是序列化流" class="headerlink" title="8.1.什么是序列化流"></a>8.1.什么是序列化流</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">序列化流: 写出对象的流 </span><br><span class="line">    ObjectOutputStream</span><br><span class="line">反序列化流: 读取对象的流  </span><br><span class="line">    ObjectInputStream</span><br></pre></td></tr></table></figure><h6 id="8-2-ObjectOutputStream的介绍和使用"><a href="#8-2-ObjectOutputStream的介绍和使用" class="headerlink" title="8.2.ObjectOutputStream的介绍和使用"></a>8.2.ObjectOutputStream的介绍和使用</h6><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectOutputStream</span><span class="params">(OutputStream out)</span></span>; <span class="comment">//需要接收一个普通的字节输出流</span></span><br></pre></td></tr></table></figure></li><li><p>序列化操作的前提</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">想要序列化必须实现java.io.Serializable 接口</span><br><span class="line">    </span><br><span class="line">该接口中没有方法,该接口一般称为标记接口</span><br></pre></td></tr></table></figure></li><li><p>==序列化操作(代码演示)==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ObjectOutputStream对象</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"dog.txt"</span>));</span><br><span class="line">        <span class="comment">//2.写对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog(<span class="number">10</span>,<span class="string">"旺财"</span>);</span><br><span class="line">        oos.writeObject(dd);<span class="comment">//NotSerializableException</span></span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意: 不需要查看dog.txt文件,因为这个文件中的字节数据我们是看不懂的</span><br></pre></td></tr></table></figure></li></ul><h6 id="8-3-ObjectInputStream的介绍和使用【重点】"><a href="#8-3-ObjectInputStream的介绍和使用【重点】" class="headerlink" title="8.3.ObjectInputStream的介绍和使用【重点】"></a>8.3.ObjectInputStream的介绍和使用【重点】</h6><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectInputStream</span><span class="params">(InputStream in)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>==反序列操作(正常演示)==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ObjectInputStream对象</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"dog.txt"</span>));</span><br><span class="line">        <span class="comment">//2.读对象</span></span><br><span class="line">        Dog obj = (Dog) ois.readObject();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="8-4-反序列化操作的两种异常演示【了解】"><a href="#8-4-反序列化操作的两种异常演示【了解】" class="headerlink" title="8.4.反序列化操作的两种异常演示【了解】"></a>8.4.反序列化操作的两种异常演示【了解】</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.ClassNotFoundException 没有找到类异常</span><br><span class="line">    出现原因:</span><br><span class="line">序列化之后,反序列化之前,删除了原来序列化的那个类!!</span><br><span class="line">b.InvalidClassException 无效类异常</span><br><span class="line">    出现原因:</span><br><span class="line">序列化之后,反序列化之前,修改了原来序列化的那个类!!!</span><br><span class="line">            </span><br><span class="line">c.实际上序列化流判断类是否有效通过:serialVersionUID来识别的</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注意: 序列化流一个文件只适合序列化一个对象</span><br><span class="line">如果要序列化多个对象怎么办？</span><br><span class="line">分析:</span><br><span class="line"><span class="code">a.把你要序列化的多个对象,保存到一个集合对象</span></span><br><span class="line"><span class="code">    b.将这个集合作为对象,序列化到文件中</span></span><br><span class="line"><span class="code">    c.可以从文件中将整个集合反序列化回来</span></span><br><span class="line"><span class="code">    d.遍历集合把里面的对象一一打印出来</span></span><br></pre></td></tr></table></figure><h5 id="9-打印流"><a href="#9-打印流" class="headerlink" title="9.打印流"></a>9.打印流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">构造方法</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PrintStream</span><span class="params">(String path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintStream</span><span class="params">(File file)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PrintStream</span><span class="params">(OutputStream out)</span></span>;</span><br><span class="line"></span><br><span class="line">成员方法:</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(各种类型)</span></span>; <span class="comment">//不带换行的打印</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(各种类型)</span></span>; <span class="comment">//带换行的打印</span></span><br><span class="line"></span><br><span class="line">修改系统打印流的流向</span><br><span class="line"><span class="comment">//1.创建一个打印流</span></span><br><span class="line">        PrintStream ps1 = <span class="keyword">new</span> PrintStream(<span class="string">"p.txt"</span>);</span><br><span class="line">        <span class="comment">//2.系统的输出</span></span><br><span class="line">        System.out.println(<span class="string">"Java"</span>);</span><br><span class="line">        <span class="comment">//3.修改系统打印流的流向</span></span><br><span class="line">        System.setOut(ps1);</span><br><span class="line">        System.out.println(<span class="string">"Java"</span>);</span><br></pre></td></tr></table></figure><h5 id="10-commons-io工具包"><a href="#10-commons-io工具包" class="headerlink" title="10.commons-io工具包"></a>10.commons-io工具包</h5><p>commons-io是Apache公司提供简化IO操作的工具包</p><ul><li><p>复制文件API</p></li><li><p>复制文件夹API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCommonsDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.IOUtils 适合复制2G大小以下的文件</span></span><br><span class="line">        IOUtils.copy(<span class="keyword">new</span> FileInputStream(<span class="string">"G:\\upload\\1546241961620.png"</span>),<span class="keyword">new</span> FileOutputStream(<span class="string">"copy.png"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.IOUtils适合复制2G大小以上的文件</span></span><br><span class="line">        IOUtils.copyLarge(<span class="keyword">new</span> FileInputStream(<span class="string">"G:\\upload\\1546241961620.png"</span>), <span class="keyword">new</span> FileOutputStream(<span class="string">"copy1.png"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.FileUtils 复制文件</span></span><br><span class="line">        FileUtils.copyFileToDirectory(<span class="keyword">new</span> File(<span class="string">"G:\\upload\\1546241961620.png"</span>), <span class="keyword">new</span> File(<span class="string">"G:\\uploads"</span>));</span><br><span class="line">        <span class="comment">//4.FileUtils 复制文件夹</span></span><br><span class="line">        FileUtils.copyDirectoryToDirectory(<span class="keyword">new</span> File(<span class="string">"C:\\Users\\Administrator\\Desktop\\temp\\aaa"</span>),<span class="keyword">new</span> File(<span class="string">"G:\\uploads"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="十四、-Properties类"><a href="#十四、-Properties类" class="headerlink" title="十四、 Properties类"></a>十四、 Properties类</h4><h5 id="1-Propertie类的介绍"><a href="#1-Propertie类的介绍" class="headerlink" title="1.Propertie类的介绍"></a>1.Propertie类的介绍</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a.Properties就是一个双列集合(Properties extends HashTable extends Dictionary implments Map)</span><br><span class="line">b.Properties的键和值已经确定为String了 </span><br><span class="line">c.通过System类的静态方法.getProperties()可以获取系统相关的一些键值对</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System类</span></span><br><span class="line">        <span class="comment">//System.exit(0); //退出JVM</span></span><br><span class="line">        <span class="comment">//long timeMillis = System.currentTimeMillis();//获取当前时间的毫秒值</span></span><br><span class="line">         Properties ps = System.getProperties();<span class="comment">//获取系统相关的一些键值对</span></span><br><span class="line">            System.out.println(ps); </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h5 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Properties</span><span class="params">()</span></span>; <span class="comment">//创建一个空的Properties对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.创建一个空的Properties对象</span></span><br><span class="line">    Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">    System.out.println(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-基本保存数据的方法"><a href="#3-基本保存数据的方法" class="headerlink" title="3.基本保存数据的方法"></a>3.基本保存数据的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">回忆一下Map接口中定义的方法:</span><br><span class="line">增:  put(键,值)</span><br><span class="line">    删:  remove(键)</span><br><span class="line">    改:  put(键,值)</span><br><span class="line">    查:  get(键)</span><br><span class="line">    遍历的两个方法:</span><br><span class="line">Set&lt;键的类型&gt; keys = map.keySet();</span><br><span class="line">Set&lt;Map.Entry&lt;K,V&gt;&gt; entrys = map.entrySet();</span><br><span class="line"></span><br><span class="line">Properties也具有以上方法,但是我们一般使用其特有方法</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setProperty</span><span class="params">(String key, String value)</span></span>;添加/修改键值对, 和put功能是一样的</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span></span>; 以键找值,和get功能是一样</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">stringPropertyNames</span><span class="params">()</span></span>;获取所有属性名的集合,和keySet功能是一样</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个空的Properties对象</span></span><br><span class="line">        Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        <span class="comment">//2.添加属性(键值对)</span></span><br><span class="line">        ps.setProperty(<span class="string">"xiaomi"</span>,<span class="string">"6888"</span>);</span><br><span class="line">        ps.setProperty(<span class="string">"huawei"</span>,<span class="string">"8888"</span>);</span><br><span class="line">        ps.setProperty(<span class="string">"vivo"</span>,<span class="string">"2222"</span>);</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        <span class="comment">//3.修改</span></span><br><span class="line">        ps.setProperty(<span class="string">"vivo"</span>,<span class="string">"3333"</span>);</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">        <span class="comment">//4.获取</span></span><br><span class="line">        System.out.println(ps.getProperty(<span class="string">"huawei"</span>));</span><br><span class="line">        <span class="comment">//5.获取所有的属性名(键!)</span></span><br><span class="line">        Set&lt;String&gt; propertyNames = ps.stringPropertyNames();<span class="comment">// 和 keySet</span></span><br><span class="line">        System.out.println(propertyNames);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-与流相关的方法"><a href="#4-与流相关的方法" class="headerlink" title="4.与流相关的方法"></a>4.与流相关的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Properties有两个和流相关的方法,一个叫保存,一个加加载</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(OutputStream out,String 说明内容)</span></span>; <span class="comment">//保存Properties对象中的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(Writer write,String 说明内容)</span></span>;<span class="comment">//保存Properties对象中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(InputStream in)</span></span>;<span class="comment">//把Properties文件内容加到当前对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(Reader r)</span></span>;<span class="comment">//把Properties文件内容加到当前对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个空的Properties对象</span></span><br><span class="line">        Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//2.添加</span></span><br><span class="line">        ps.setProperty(<span class="string">"username"</span>,<span class="string">"root"</span>);</span><br><span class="line">        ps.setProperty(<span class="string">"password"</span>,<span class="string">"123321"</span>);</span><br><span class="line">        <span class="comment">//3.保存,规范,文件名建议使用.properties作为后缀</span></span><br><span class="line">        ps.store(<span class="keyword">new</span> FileOutputStream(<span class="string">"5.properties"</span>),<span class="string">"this is a test file"</span>);</span><br><span class="line">        <span class="comment">//4.加载</span></span><br><span class="line">        ps.load(<span class="keyword">new</span> FileInputStream(<span class="string">"5.properties"</span>));</span><br><span class="line">        System.out.println(ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">注意: 一般我们不会使用Properties文件来保存中文数据</span><br></pre></td></tr></table></figure><h5 id="5-ResourceBundle工具类"><a href="#5-ResourceBundle工具类" class="headerlink" title="5.ResourceBundle工具类"></a>5.ResourceBundle工具类</h5><h6 id="5-1-ResourceBundle类的介绍"><a href="#5-1-ResourceBundle类的介绍" class="headerlink" title="5.1.ResourceBundle类的介绍"></a>5.1.ResourceBundle类的介绍</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResourceBundle实际上是一个抽象类,他的子类PropertyResourceBundle,可以读取以.properties为后缀的文件中的内容</span><br></pre></td></tr></table></figure><h6 id="5-2-ResourceBundle类对象的创建"><a href="#5-2-ResourceBundle类对象的创建" class="headerlink" title="5.2.ResourceBundle类对象的创建"></a>5.2.ResourceBundle类对象的创建</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResourceBundle <span class="title">getBundle</span><span class="params">(String baseName)</span></span>; 用于绑定指定的.properties资源文件</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">a.xxx.properties文件必须放在类的根路径下(src文件夹下)</span><br><span class="line">    b.给定参数时,我们只需要给文件名的名字,不需要写文件的后缀  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ResourceBundle实现类的对象</span></span><br><span class="line">        ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">"data"</span>);</span><br><span class="line">        System.out.println(resourceBundle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-3-ResourceBundle读取配置文件操作"><a href="#5-3-ResourceBundle读取配置文件操作" class="headerlink" title="5.3.ResourceBundle读取配置文件操作"></a>5.3.ResourceBundle读取配置文件操作</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceBundleDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ResourceBundle实现类的对象</span></span><br><span class="line">        ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">"data"</span>);</span><br><span class="line">        System.out.println(resourceBundle);</span><br><span class="line">        <span class="comment">//2.根据键获取值</span></span><br><span class="line">        String password = resourceBundle.getString(<span class="string">"password"</span>);</span><br><span class="line">        String username = resourceBundle.getString(<span class="string">"username"</span>);</span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十五、装饰器设计模式"><a href="#十五、装饰器设计模式" class="headerlink" title="十五、装饰器设计模式"></a>十五、装饰器设计模式</h4><h5 id="1-装饰模式作用"><a href="#1-装饰模式作用" class="headerlink" title="1.装饰模式作用"></a>1.装饰模式作用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">装饰模式指的是在不改变原类, 不使用继承的基础上，动态地扩展一个对象的功能。</span><br></pre></td></tr></table></figure><h5 id="2-装饰者设计模式的4个基本步骤"><a href="#2-装饰者设计模式的4个基本步骤" class="headerlink" title="2.装饰者设计模式的4个基本步骤"></a>2.装饰者设计模式的4个基本步骤</h5><ul><li>装饰类(我们定义的新类)和被装饰类(原类)必须实现相同的接口</li><li>在装饰类中必须传入被装饰类的对象引用</li><li>在装饰类中对需要扩展的方法进行重写扩展</li><li>在装饰类中对不需要扩展的方法调用被装饰类中的同名方法，执行原有的逻辑</li></ul><h5 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Lvjing(<span class="keyword">new</span> Meiyan(<span class="keyword">new</span> HuaWei()));</span><br><span class="line">        phone.take();</span><br><span class="line">        phone.call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口规范</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">take</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被包装类，一会对他增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuaWei</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3200W像素拍照"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包装抽象类，做一个默认的实现，调用原有的功能</span></span><br><span class="line"><span class="comment">//作用：可以简化实体装饰类的步骤，只需要重写需要增强的方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneWrapper</span> <span class="keyword">implements</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Phone phone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneWrapper</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.take();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        phone.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 美颜增强,实际包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meiyan</span> <span class="keyword">extends</span> <span class="title">PhoneWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Meiyan</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用拍照的原有功能</span></span><br><span class="line">        <span class="keyword">super</span>.take();</span><br><span class="line">        System.out.println(<span class="string">"美颜..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 滤镜增强</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lvjing</span> <span class="keyword">extends</span> <span class="title">PhoneWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lvjing</span><span class="params">(Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.take();<span class="comment">// 原有功能</span></span><br><span class="line">        System.out.println(<span class="string">"滤镜"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十六、Socket网络编程"><a href="#十六、Socket网络编程" class="headerlink" title="十六、Socket网络编程"></a>十六、Socket网络编程</h4><h5 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">C/S架构: 客户端/服务器 比如:QQ,百度网盘,淘宝App</span><br><span class="line">B/S结构: 浏览器/服务器 比如:网页QQ,网页淘宝   </span><br><span class="line"></span><br><span class="line">网络通信协议</span><br><span class="line"><span class="code">网络: 互联网/局域网</span></span><br><span class="line"><span class="code">通信: 数据传输 </span></span><br><span class="line"><span class="code">协议: 规则规范  </span></span><br><span class="line"><span class="code"></span></span><br><span class="line">TCP/IP协议</span><br><span class="line"><span class="code">TCP协议: 传输控制协议</span></span><br><span class="line"><span class="code">特点: 面向有连接(数据传输之前必须先建立连接,底层是通过"三次握手"建立连接)</span></span><br><span class="line"><span class="code">    优点: 保存数据是完整,安全的 </span></span><br><span class="line"><span class="code">    缺点: 性能较低  </span></span><br><span class="line"><span class="code">IP协议: 因特网协议</span></span><br><span class="line"><span class="code">特点: 面向无连接(数据传输时不需要关系对方是否存在,甚至不需要关系对象是否开机)</span></span><br><span class="line"><span class="code">    缺点: 不能保证数据完整和不能保证安全的    </span></span><br><span class="line"><span class="code">    优点: 性能较高</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">网络编程的三要素：</span><br><span class="line"><span class="code">1.网络通信协议</span></span><br><span class="line"><span class="code">2.IP地址: 每台连接到互联网的计算机的唯一标识(就类似于人的身份证号,或者电话机的电话号码)  </span></span><br><span class="line"><span class="code">    组成:由32位二进制组成 0110 0100 0100 0100 0100 0110 0100 0110</span></span><br><span class="line"><span class="code">        我们通常会搞成10进制:  192.168.120.250</span></span><br><span class="line"><span class="code">3.端口号: 一台计算机上不同软件的标识 </span></span><br><span class="line"><span class="code">    端口号一共有0-65535号,其中1024以下的端口被牛逼软件厂商占用!!(我们写软件时,用1024以上的)</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line">   </span><br><span class="line">IP地址的相关命令</span><br><span class="line"><span class="code">ipconfig:查看本机IP</span></span><br><span class="line"><span class="code">ping 对方IP: 测试你和对象网络是否畅通/通畅  </span></span><br><span class="line"><span class="code">127.0.0.1(localhost): 本机回环地址(相当于Java中this)</span></span><br></pre></td></tr></table></figure><h5 id="2-InetAddress类的基本使用"><a href="#2-InetAddress类的基本使用" class="headerlink" title="2.InetAddress类的基本使用"></a>2.InetAddress类的基本使用</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.InetAddress类代表IP地址类</span><br><span class="line">b.获取本地IP</span><br><span class="line">    InetAddress.getLocalHost();<span class="comment">//获取主机(本机)的IP地址对象</span></span><br><span class="line">c.获取其他机器的IP</span><br><span class="line">    InetAddress.getByName(域名/IP地址);<span class="comment">//获取其他机器的IP地址对象</span></span><br><span class="line">d.成员方法</span><br><span class="line">     <span class="function">String <span class="title">getHostName</span><span class="params">()</span></span>;获得主机名 </span><br><span class="line">     <span class="function">String <span class="title">getHostAddress</span><span class="params">()</span></span>;获得IP地址字符串</span><br></pre></td></tr></table></figure><h5 id="3-TCP通信"><a href="#3-TCP通信" class="headerlink" title="3.TCP通信"></a>3.TCP通信</h5><p>Socket类,代表客户端类(套接字)</p><p>ServerSocket类,代表服务器端类(服务器套接字)    </p><h6 id="3-1Socket类的介绍"><a href="#3-1Socket类的介绍" class="headerlink" title="3.1Socket类的介绍"></a>3.1Socket类的介绍</h6><ul><li>构造方法</li></ul><p>​    public Socket(String ip,int port);//服务器的IP地址,服务器的端口号</p><p>​    此构造非常牛逼!! 会根据传入的参数,自动去连接服务器<br>​                    如果连接成功,那么对象正常创建<br>​                    如果连接失败,那么直接抛出异常!!</p><ul><li>常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> OutputStream <span class="title">getOutputStream</span><span class="params">()</span></span>;<span class="comment">//获取连接通道中输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span></span>;<span class="comment">//获取连接通道中输入流</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownOutput</span><span class="params">()</span></span>;<span class="comment">//关闭连接通道中的输出流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutDownInput</span><span class="params">()</span></span>;<span class="comment">//关闭连接通道中的输入流</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;<span class="comment">//关闭客户端对象</span></span><br></pre></td></tr></table></figure><h6 id="3-2ServerSocket类的介绍"><a href="#3-2ServerSocket类的介绍" class="headerlink" title="3.2ServerSocket类的介绍"></a>3.2ServerSocket类的介绍</h6><ul><li><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServerSocket</span><span class="params">(<span class="keyword">int</span> port)</span></span>;<span class="comment">//指定服务器端使用的端口号</span></span><br></pre></td></tr></table></figure></li><li><p>常用的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Socket <span class="title">accept</span><span class="params">()</span></span>;<span class="comment">//接收连接到服务器的那个Socket对象,如果暂时没有客户端,该方法会阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>; <span class="comment">//关闭服务器端对象</span></span><br><span class="line"></span><br><span class="line">注意: 服务器获取到客户端对象之后,也可以获取连接中两个流,</span><br><span class="line">但是获取时是输入流还是输出流,相当于服务器而言了</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-3简单的TCP通信实现-双向通信-【重点】"><a href="#3-3简单的TCP通信实现-双向通信-【重点】" class="headerlink" title="3.3简单的TCP通信实现(双向通信)【重点】"></a>3.3简单的TCP通信实现(双向通信)【重点】</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">客户端给服务器发信息,服务器接收到之后,给客户端回信息</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//客户端步骤:</span></span><br><span class="line">        <span class="comment">//1.创建Socket对象</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功..."</span>);</span><br><span class="line">        <span class="comment">//2.获取输出流</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.调用输出流的write方法</span></span><br><span class="line">        out.write(<span class="string">"你好,我又来了..."</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"发送成功..."</span>);</span><br><span class="line">        <span class="comment">//==读取服务器回的信息==</span></span><br><span class="line">        <span class="comment">//4.获取输入流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="comment">//5.调用输入流的read方法</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">        System.out.println(<span class="string">"服务器回复:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">//================</span></span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">"客户端关闭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//服务器的步骤</span></span><br><span class="line">        <span class="comment">//1.创建ServerSocket对象</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器启动..."</span>);</span><br><span class="line">        <span class="comment">//2.接收连接到的客户端对象</span></span><br><span class="line">        Socket socket = server.accept();<span class="comment">//阻塞</span></span><br><span class="line">        System.out.println(<span class="string">"客户端来了..."</span>);</span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.调用输入流的read方法</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = in.read(bs);</span><br><span class="line">        System.out.println(<span class="string">"客户端说:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">//=======回信息========</span></span><br><span class="line">        <span class="comment">//5.获取输出流</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.调用输出流的write方法</span></span><br><span class="line">        out.write(<span class="string">"您的信息我收到了,安息吧!"</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"成功回复..."</span>);</span><br><span class="line">        <span class="comment">//====================</span></span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">        System.out.println(<span class="string">"服务器关闭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4文件上传案例"><a href="#3-4文件上传案例" class="headerlink" title="3.4文件上传案例"></a>3.4文件上传案例</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端代码实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件上传客户端步骤:</span></span><br><span class="line">        <span class="comment">//1.创建Socket</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>,<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"连接成功..."</span>);</span><br><span class="line">        <span class="comment">//2.获取输出流</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.创建文件的输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"555.png"</span>);</span><br><span class="line">        <span class="comment">//循环:一边读文件,一边发送</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(bs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加一句代码,告知服务器文件发送完毕</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">"文件上传完毕..."</span>);</span><br><span class="line">        <span class="comment">//4.获取输入流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="comment">//5.读取服务器回复的信息</span></span><br><span class="line">        len = in.read(bs);</span><br><span class="line">        System.out.println(<span class="string">"服务器回复:"</span> + <span class="keyword">new</span> String(bs, <span class="number">0</span>, len));</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        in.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        out.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">"客户端关闭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//服务器代码实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件上传服务器步骤:</span></span><br><span class="line">        <span class="comment">//1.创建ServerSocket</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器启动..."</span>);</span><br><span class="line">        <span class="comment">//2.获取客户端</span></span><br><span class="line">        Socket socket = server.accept();</span><br><span class="line">        System.out.println(<span class="string">"有客户端来了..."</span>);</span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InputStream in = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.创建文件的输出流</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis()+<span class="string">".png"</span>);</span><br><span class="line">        <span class="comment">//循环:一边读数据,一边写文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"文件保存成功..."</span>);</span><br><span class="line">        <span class="comment">//5.获取输出流</span></span><br><span class="line">        OutputStream out = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//6.给客户端回信息</span></span><br><span class="line">        out.write(<span class="string">"您的图片我收到了,安息吧~~"</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"消息回复成功..."</span>);</span><br><span class="line">        <span class="comment">//7.释放资源</span></span><br><span class="line">        out.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        in.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        server.close();</span><br><span class="line">        System.out.println(<span class="string">"服务器关闭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-5扩展-服务器多线程版本"><a href="#3-5扩展-服务器多线程版本" class="headerlink" title="3.5扩展_服务器多线程版本"></a>3.5扩展_服务器多线程版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketMultiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//文件上传服务器步骤:</span></span><br><span class="line">        <span class="comment">//1.创建ServerSocket</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器启动..."</span>);</span><br><span class="line">        <span class="comment">//2.获取客户端</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            System.out.println(<span class="string">"有客户端来了..."</span>);</span><br><span class="line">            <span class="comment">//创建线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; </span><br><span class="line">                    <span class="comment">//3.获取输入流</span></span><br><span class="line">                    InputStream in = socket.getInputStream();</span><br><span class="line">                    <span class="comment">//4.创建文件的输出流</span></span><br><span class="line">                    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(System.currentTimeMillis() + <span class="string">".png"</span>);</span><br><span class="line">                    <span class="comment">//循环:一边读数据,一边写文件</span></span><br><span class="line">                    <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> ((len = in.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        fos.write(bs, <span class="number">0</span>, len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"文件保存成功..."</span>);</span><br><span class="line">                    <span class="comment">//5.获取输出流</span></span><br><span class="line">                    OutputStream out = socket.getOutputStream();</span><br><span class="line">                    <span class="comment">//6.给客户端回信息</span></span><br><span class="line">                    out.write(<span class="string">"您的图片我收到了,安息吧~~"</span>.getBytes());</span><br><span class="line">                    System.out.println(<span class="string">"消息回复成功..."</span>);</span><br><span class="line">                    <span class="comment">//7.释放资源</span></span><br><span class="line">                    out.close();</span><br><span class="line">                    fos.close();</span><br><span class="line">                    in.close();</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">                    ie.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="comment">//server.close();</span></span><br><span class="line">        <span class="comment">//System.out.println("服务器关闭...");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-6模拟B-S架构服务器"><a href="#3-6模拟B-S架构服务器" class="headerlink" title="3.6模拟B/S架构服务器"></a>3.6模拟B/S架构服务器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务器</span></span><br><span class="line">        ServerSocket server = <span class="keyword">new</span> ServerSocket(<span class="number">12345</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器启动..."</span>);</span><br><span class="line">        <span class="comment">//2.接收客户端</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Socket socket = server.accept();</span><br><span class="line">            System.out.println(<span class="string">"客户端来了.."</span>);</span><br><span class="line">            <span class="comment">//3.获取输入流</span></span><br><span class="line">            InputStream in = socket.getInputStream();</span><br><span class="line">            <span class="comment">//4.使用输入流的read方法,把浏览器发送过的数据读取出来</span></span><br><span class="line">            <span class="comment">//我们现在只想读取,客户端要的那个文件</span></span><br><span class="line">            <span class="comment">//a.只读第一行</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String line = br.readLine();</span><br><span class="line">            <span class="comment">//b.从中获取浏览器想要的那个文件名字</span></span><br><span class="line">            String[] splits = line.split(<span class="string">" "</span>);</span><br><span class="line">            String fileName = splits[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"浏览器想要:"</span> + fileName);</span><br><span class="line">            <span class="comment">//5.把浏览器想要的文件,读取出来,发送给浏览器</span></span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">            OutputStream out = socket.getOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            out.write(<span class="string">"HTTP/1.1 200 OK\r\n"</span>.getBytes());</span><br><span class="line">            out.write(<span class="string">"Content-Type:text/html\r\n"</span>.getBytes());</span><br><span class="line">            out.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(bs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(bs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5.释放资源</span></span><br><span class="line">            in.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        server.close();</span></span><br><span class="line"><span class="comment">//        System.out.println("服务器关闭..");</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十七、Juntil"><a href="#十七、Juntil" class="headerlink" title="十七、Juntil"></a>十七、Juntil</h4><h5 id="1-具体使用步骤"><a href="#1-具体使用步骤" class="headerlink" title="1.具体使用步骤"></a>1.具体使用步骤</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">a.编写一个被测试类(业务类)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被测试类,业务类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = a + b + c;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">b.编写测试类</span><br><span class="line">c.在测试类使用Junit单元测试框架来测试 </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//测试代码</span></span><br><span class="line">            Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">            <span class="keyword">int</span> sum = dd.getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            System.out.println(<span class="string">"结果为:"</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//测试代码</span></span><br><span class="line">            Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">            <span class="keyword">int</span> sum = dd.getSum(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line">            System.out.println(<span class="string">"结果为:"</span>+sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-单元测试中其他四个注解"><a href="#2-单元测试中其他四个注解" class="headerlink" title="2.单元测试中其他四个注解"></a>2.单元测试中其他四个注解</h5><h6 id="2-1-Juntil4-X"><a href="#2-1-Juntil4-X" class="headerlink" title="2.1.Juntil4.X"></a>2.1.Juntil4.X</h6><p>@Before 表示该方法会自动在”每个”@Test方法执行之前执行<br>        @After 表示该方法会自动在”每个”@Test方法执行之后执行</p><p>@BeforeClass 表示该方法会自动在”所有”@Test方法执行之前执行<br>        @AfterClass 表示该方法会自动在”所有”@Test方法执行之后执行    </p><p>注意: @BeforeClass和@AfterClass必须修饰静态方法</p><h6 id="2-2-Juntil5-X"><a href="#2-2-Juntil5-X" class="headerlink" title="2.2.Juntil5.X"></a>2.2.Juntil5.X</h6><p>@BeforeEach: 相当于@Before<br>        @AfterEach: 相当于@After</p><p>@BeforeAll: 相当于@BeforeClass<br>        @AfterAll: 相当于@AfterClass</p><p>注意: @BeforeAll和@AfterAll必须修饰静态方法   </p><p>断言: Assert.assertEquals(“异常信息”,得到结果,预期的结果);<br>        作用: 比较 “得到结果” 和 “预期的结果”<br>         如果一样,什么都不做,如果不一样抛出异常,并且封装异常的信息    </p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="comment">//测试代码</span></span><br><span class="line">   Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">   <span class="keyword">int</span> sum = dd.getSum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">   <span class="comment">//使用断言</span></span><br><span class="line">   Assert.assertEquals(<span class="string">"结果不一致呀"</span>,sum,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十八、NIO-AIO"><a href="#十八、NIO-AIO" class="headerlink" title="十八、NIO,AIO"></a>十八、NIO,AIO</h4><h5 id="1-NIO"><a href="#1-NIO" class="headerlink" title="1.NIO"></a>1.NIO</h5><h6 id="1-1-阻塞与非阻塞"><a href="#1-1-阻塞与非阻塞" class="headerlink" title="1.1.阻塞与非阻塞"></a>1.1.阻塞与非阻塞</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">阻塞: 完成某个任务时,任务没有结束之前,当前线程无法向下继续执行</span><br><span class="line">非阻塞: 完成某个任务时,不需要等待任务结束,当前线程立即可以继续向下执行,后期我们再通过其他代码获取任务结果</span><br></pre></td></tr></table></figure><h6 id="1-2-同步与异步"><a href="#1-2-同步与异步" class="headerlink" title="1.2.同步与异步"></a>1.2.同步与异步</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步: </span><br><span class="line">同步可能是阻塞的,也可能非阻塞的</span><br><span class="line">  <span class="string">"同步阻塞"</span>:  完成某个任务时,任务没有结束之前,当前线程无法向下执行</span><br><span class="line"><span class="string">"同步非阻塞"</span>: 完成某个任务时,不需要等待任务结束,当前线程立即可以继续向下执行,</span><br><span class="line">后期需要我们自己写其他代码获取结果</span><br><span class="line">异步:</span><br><span class="line"> 异步一般来说都是非阻塞</span><br><span class="line">  <span class="string">"异步非阻塞"</span>: 完成某个任务时,不需要等待任务结束,当前线程立即可以继续向下执行,后期我们不需要自己写其他代码来获取结果,任务完成之后自动会通过其他机制把结果传递给我们</span><br></pre></td></tr></table></figure><h6 id="1-3-BIO-NIO-AIO的介绍"><a href="#1-3-BIO-NIO-AIO的介绍" class="headerlink" title="1.3.BIO,NIO,AIO的介绍"></a>1.3.BIO,NIO,AIO的介绍</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BIO(传统的IO): 同步阻塞的IO</span><br><span class="line">NIO(New新的IO): 同步阻塞的也可以是同步非阻塞,由Buffer(缓冲区),Channel(通道),Selector(选择器)  </span><br><span class="line">NIO2(也叫AIO): 异步非阻塞的IO</span><br></pre></td></tr></table></figure><h5 id="2-NIO-Buffer类"><a href="#2-NIO-Buffer类" class="headerlink" title="2.NIO-Buffer类"></a>2.NIO-Buffer类</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Buffer称为缓冲区,本质就是一个数组</span><br></pre></td></tr></table></figure><ul><li><p>Buffer的一般操作步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.写入缓冲区(把数据保存到数组中)</span><br><span class="line">b.调用flip方法(切换缓冲区的写模式为读模式)</span><br><span class="line">c.读缓冲区(把数组中的数据读取出来)</span><br><span class="line">d.调用clear或者compact方法(清空缓冲区或者清除缓冲区中已经读取过的数据)</span><br></pre></td></tr></table></figure></li><li><p>Buffer的种类</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer 字节缓冲区(字节数组)【最常用】</span><br><span class="line">CharBuffer 字符缓冲区(字符数组)</span><br><span class="line">DoubleBuffer Double缓冲区(小数数组)</span><br><span class="line">FloatBuffer Float缓冲区(小数数组)</span><br><span class="line">IntBuffer 整型缓冲区(整型数组)</span><br><span class="line">LongBuffer 长整型缓冲区(长整型数组)</span><br><span class="line">ShortBuffer 短整型缓冲区(短整型数组)</span><br></pre></td></tr></table></figure></li></ul><h6 id="2-1-ByteBuffer的三种创建方式"><a href="#2-1-ByteBuffer的三种创建方式" class="headerlink" title="2.1.ByteBuffer的三种创建方式"></a>2.1.ByteBuffer的三种创建方式</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.public static allocate(int capacity); 在堆区申请一个固定字节大小的ByteBuffer缓冲区</span><br><span class="line">//创建和销毁角度来看,效率更高</span><br><span class="line">b.public static allocatDirect(int capacity);在系统的内存中申请一个固定字节大小的ByteBuffer缓冲区 </span><br><span class="line">//操作缓冲区角度俩看,效率更好</span><br><span class="line">c.public static wrap(byte[] arr);把一个字节数组直接包装成ByteBuffer缓冲区 </span><br><span class="line">//属于间接缓冲区</span><br></pre></td></tr></table></figure><h6 id="2-2ByteBuffer的三种添加数据方式"><a href="#2-2ByteBuffer的三种添加数据方式" class="headerlink" title="2.2ByteBuffer的三种添加数据方式"></a>2.2ByteBuffer的三种添加数据方式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span> b)</span></span>; 添加单个字节</span><br><span class="line">b.<span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] bs)</span></span>;添加字节数组</span><br><span class="line">c.<span class="function"><span class="keyword">public</span> ByteBuffer <span class="title">put</span><span class="params">(<span class="keyword">byte</span>[] bs,<span class="keyword">int</span> startIndex,<span class="keyword">int</span> len)</span>：添加一个字节数组的一部分</span></span><br></pre></td></tr></table></figure><h6 id="2-3ByteBuffer的容量-capacity"><a href="#2-3ByteBuffer的容量-capacity" class="headerlink" title="2.3ByteBuffer的容量-capacity"></a>2.3ByteBuffer的容量-capacity</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">什么是容量(capacity):</span><br><span class="line">是指Buffer最多包含元素的个数,并且Buffer一旦创建容量无法更改</span><br><span class="line">public int capacity(); 获取Buffer的容量</span><br></pre></td></tr></table></figure><h6 id="2-4ByteBuffer的限制-limit"><a href="#2-4ByteBuffer的限制-limit" class="headerlink" title="2.4ByteBuffer的限制-limit"></a>2.4ByteBuffer的限制-limit</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">什么是限制: 是指第一个不能操作的元素索引,限制的取值范围(0-capacity)   </span><br><span class="line">限制作用: 相当于人为<span class="string">"修改"</span>缓冲区的大小(实际上缓冲区大小没有改变,只是可访问的元素的个数变了)</span><br></pre></td></tr></table></figure><h6 id="2-5ByteBuffer的位置-position"><a href="#2-5ByteBuffer的位置-position" class="headerlink" title="2.5ByteBuffer的位置-position"></a>2.5ByteBuffer的位置-position</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是位置: 将要写入/读取的元素的索引,位置取值范围(<span class="number">0</span>-capacity/limit)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">position</span><span class="params">()</span></span>; 获取当前位置</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">positon</span><span class="params">(<span class="keyword">int</span> newPosition)</span></span>;修改当的位置</span><br></pre></td></tr></table></figure><h6 id="2-6ByteBuffer的标记-mark"><a href="#2-6ByteBuffer的标记-mark" class="headerlink" title="2.6ByteBuffer的标记-mark"></a>2.6ByteBuffer的标记-mark</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">什么是标记: 给当前的position记录下来,当调用reset(重置)时,position会回到标记,标记范围(0-position)</span><br></pre></td></tr></table></figure><h6 id="2-7-ByteBuffer的其他方法"><a href="#2-7-ByteBuffer的其他方法" class="headerlink" title="2.7 ByteBuffer的其他方法"></a>2.7 ByteBuffer的其他方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remaining</span><span class="params">()</span>：获取position与limit之间的元素数。</span></span><br><span class="line"><span class="function">b.<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReadOnly</span><span class="params">()</span>：获取当前缓冲区是否只读。  </span></span><br><span class="line"><span class="function">c.<span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDirect</span><span class="params">()</span></span>;获取当前缓冲区是否为直接缓冲区。</span><br><span class="line">d.<span class="function"><span class="keyword">public</span> Buffer <span class="title">clear</span><span class="params">()</span></span>; 清空缓冲区(还原缓冲区的状态) </span><br><span class="line">    将position设置为：<span class="number">0</span></span><br><span class="line">    将限制limit设置为容量capacity</span><br><span class="line">    并且会丢弃标记</span><br><span class="line">e.<span class="function"><span class="keyword">public</span> Buffer <span class="title">flip</span><span class="params">()</span></span>; 切换读写模式(缩小范围)</span><br><span class="line">    将limit设置为当前position位置 </span><br><span class="line">    将当前position位置设置为<span class="number">0</span></span><br><span class="line">    并且丢弃标记</span><br><span class="line">f.<span class="function"><span class="keyword">public</span> Buffer <span class="title">rewind</span><span class="params">()</span></span>;重绕此缓冲区。    </span><br><span class="line">    将position位置设置为<span class="number">0</span></span><br><span class="line">    限制limit不变</span><br><span class="line">    丢弃标记</span><br></pre></td></tr></table></figure><h5 id="3-Channel（通道"><a href="#3-Channel（通道" class="headerlink" title="3. Channel（通道)"></a>3. Channel（通道)</h5><h6 id="3-1-Channel介绍和分类"><a href="#3-1-Channel介绍和分类" class="headerlink" title="3.1. Channel介绍和分类"></a>3.1. Channel介绍和分类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">什么是Channel: Channel是一个读写数据的类,和我们学的IO流类似,最大的不同在于IO流有Input和Output之分,但是通道没有输入和输出通道之分,都叫Channel</span><br><span class="line">  </span><br><span class="line">通道(Channel的分类):</span><br><span class="line">FileChannel 文件通道,读写文件的</span><br><span class="line">    DatagramChannel   UPD协议通道(通过UDP协议收发数据)</span><br><span class="line">    SocketChannel    TCP协议中客户端的通道(给客户端读写数据用的)</span><br><span class="line">    ServerSocketChannel TCP协议中服务器端通道(给服务器端读写数据用的)</span><br></pre></td></tr></table></figure><h6 id="3-2FileChannel类的基本使用"><a href="#3-2FileChannel类的基本使用" class="headerlink" title="3.2FileChannel类的基本使用"></a>3.2FileChannel类的基本使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//复制文件</span></span><br><span class="line">        <span class="comment">//1.创建文件对象</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">"G:\\upload\\111.png"</span>); <span class="comment">//源文件</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">"copy.png"</span>);</span><br><span class="line">        <span class="comment">//2.创建文件的输入输出流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(destFile);</span><br><span class="line">        <span class="comment">//3.通道</span></span><br><span class="line">        FileChannel inChannel = fis.getChannel();</span><br><span class="line">        FileChannel outChannel = fos.getChannel();</span><br><span class="line">        <span class="comment">//4.复制文件</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inChannel.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//切换模式</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">//读缓冲区数据,写入到文件中</span></span><br><span class="line">            outChannel.write(buffer);</span><br><span class="line">            <span class="comment">//清空</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.是否资源</span></span><br><span class="line">        outChannel.close();</span><br><span class="line">        inChannel.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-3FileChannel结合MappedByteBuffer实现高效读写"><a href="#3-3FileChannel结合MappedByteBuffer实现高效读写" class="headerlink" title="3.3FileChannel结合MappedByteBuffer实现高效读写"></a>3.3FileChannel结合MappedByteBuffer实现高效读写</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileChannelDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建两个文件</span></span><br><span class="line">        <span class="comment">// 只读模式 r</span></span><br><span class="line">        <span class="comment">// 读写模式 rw</span></span><br><span class="line">        RandomAccessFile srcFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"H:\\BaiduNetdiskDownload\\cxf_web\\day03.zip"</span>, <span class="string">"r"</span>);</span><br><span class="line">        RandomAccessFile destFile = <span class="keyword">new</span> RandomAccessFile(<span class="string">"copy.zip"</span>, <span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">//2.获取通道</span></span><br><span class="line">        FileChannel inChannel = srcFile.getChannel();</span><br><span class="line">        FileChannel outChannel = destFile.getChannel();</span><br><span class="line">        <span class="comment">//3.获取文件的大小</span></span><br><span class="line">        <span class="keyword">int</span> size = (<span class="keyword">int</span>) inChannel.size();<span class="comment">//</span></span><br><span class="line">        <span class="comment">//4.建立映射字节缓冲区</span></span><br><span class="line">        <span class="comment">//map(模式,开始索引,字节数);</span></span><br><span class="line">        MappedByteBuffer inMap = inChannel.map(FileChannel.MapMode.READ_ONLY, <span class="number">0</span>, size);</span><br><span class="line">        MappedByteBuffer outMap = outChannel.map(FileChannel.MapMode.READ_WRITE, <span class="number">0</span>, size);</span><br><span class="line">        <span class="comment">//5.复制 耗时:10949毫秒</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">byte</span> b = inMap.get(i);</span><br><span class="line">            outMap.put(i, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"耗时:"</span>+(end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        outChannel.close();</span><br><span class="line">        inChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意: </span><br><span class="line">a.MappedByteBuffer只适用于复制<span class="number">2</span>G以下的文件</span><br><span class="line">    b.如果是<span class="number">2</span>G以上文件,分多次复制(参考案例:复制<span class="number">2</span>GB以上文件)</span><br></pre></td></tr></table></figure><h6 id="3-4-SocketChannel和ServerSocketChannel的实现连接"><a href="#3-4-SocketChannel和ServerSocketChannel的实现连接" class="headerlink" title="3.4 SocketChannel和ServerSocketChannel的实现连接"></a>3.4 SocketChannel和ServerSocketChannel的实现连接</h6><ul><li><p>ServerSocketChannel的创建(阻塞方式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建阻塞的服务器通道</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.绑定本地的某个端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        System.out.println(<span class="string">"服务器已经启动..."</span>);</span><br><span class="line">        <span class="comment">//3.接收客户端通道</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="comment">//4.后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"后续代码..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ServerSocketChannel的创建(非阻塞方式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步非阻塞的服务器通道..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketChannelDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ServerSocketChannel</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//设置为同步非阻塞的服务器通道</span></span><br><span class="line">        serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//2.绑定本地的某个端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        System.out.println(<span class="string">"服务器已经启动..."</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//3.接收客户端通道</span></span><br><span class="line">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">            <span class="comment">//4.后续代码</span></span><br><span class="line">            System.out.println(<span class="string">"后续代码..."</span>);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">            <span class="keyword">if</span> (socketChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"和客户端进行交互..."</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"暂时没有客户端,2秒后继续查看..."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>); <span class="comment">//模拟服务器去做其他任务</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SocketChannel的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻塞式的客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建SocketChannel对象</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//2.去连接服务器</span></span><br><span class="line">        <span class="keyword">boolean</span> b = socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//相当于以前 Socket socket = new Socket("127.0.0.1",8888);</span></span><br><span class="line">        <span class="comment">//3.后续代码</span></span><br><span class="line">        System.out.println(<span class="string">"后续代码..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非阻塞式的客户端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建SocketChannel对象</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//设置,设置为非阻塞的</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">              <span class="comment">//2.去连接服务器</span></span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="keyword">boolean</span> b = socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">                  <span class="comment">//相当于以前 Socket socket = new Socket("127.0.0.1",8888);</span></span><br><span class="line">                  <span class="comment">//3.后续代码</span></span><br><span class="line">                  System.out.println(<span class="string">"后续代码..."</span>);</span><br><span class="line">                  <span class="comment">//4.判断</span></span><br><span class="line">                  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">                      System.out.println(<span class="string">"和服务器进行交互..."</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                  System.out.println(<span class="string">"两秒后重写连接..."</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-5-SocketChannel和ServerSocketChannel的实现通信"><a href="#3-5-SocketChannel和ServerSocketChannel的实现通信" class="headerlink" title="3.5. SocketChannel和ServerSocketChannel的实现通信"></a>3.5. SocketChannel和ServerSocketChannel的实现通信</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocketChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建ServerSocketChannel对象</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line">        <span class="comment">//2.接收客户端</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        System.out.println(<span class="string">"有客户端连接了..."</span>);</span><br><span class="line">        <span class="comment">//3.读取数据</span></span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="keyword">int</span> len = socketChannel.read(byteBuffer);</span><br><span class="line">        <span class="comment">//4.打印数据</span></span><br><span class="line">        byteBuffer.flip(); <span class="comment">//先把byteBuffer切换为读模式</span></span><br><span class="line">        String str = <span class="keyword">new</span> String(byteBuffer.array(), <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(<span class="string">"客户端说:"</span>+str);</span><br><span class="line">        <span class="comment">//5.回数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.put(<span class="string">"Hello,我是服务器.."</span>.getBytes());</span><br><span class="line">        <span class="comment">//切换为读模式</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        socketChannel.write(buffer);</span><br><span class="line">        <span class="comment">//6.释放资源</span></span><br><span class="line">        socketChannel.close();</span><br><span class="line">        serverSocketChannel.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1,创建SocketChannel对象</span></span><br><span class="line">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="comment">//2.去连接</span></span><br><span class="line">        <span class="keyword">boolean</span> b = socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>));</span><br><span class="line">        <span class="comment">//3.判断</span></span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="comment">//4.发送数据</span></span><br><span class="line">            System.out.println(<span class="string">"连接服务器成功...."</span>);</span><br><span class="line">            ByteBuffer byteBuffer = ByteBuffer.wrap(<span class="string">"Hello,我是客户端..."</span>.getBytes());</span><br><span class="line">            socketChannel.write(byteBuffer);</span><br><span class="line">            <span class="comment">//5.读取数据</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            <span class="keyword">int</span> len = socketChannel.read(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,len));</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">            socketChannel.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-Select-选择器-多路复用器"><a href="#4-Select-选择器-多路复用器" class="headerlink" title="4.Select(选择器,多路复用器)"></a>4.Select(选择器,多路复用器)</h5><h6 id="4-1-多路复用的概念"><a href="#4-1-多路复用的概念" class="headerlink" title="4.1. 多路复用的概念"></a>4.1. 多路复用的概念</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">多路: 多个服务器分别去监听多个端口!</span><br><span class="line">如果多路不复用,每个服务器都需要开启一个线程(在高并发下性能较差)</span><br><span class="line">如果多路复用,可以把多个服务器注册到一个Selector(选择器)上,只需要开启一个线程即可处理这些服务器(在高并发性能较高)</span><br></pre></td></tr></table></figure><h6 id="4-2-选择器Selector"><a href="#4-2-选择器Selector" class="headerlink" title="4.2. 选择器Selector"></a>4.2. 选择器Selector</h6><ul><li><p>什么是Selector</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Selector称为选择器,也叫多路复用器,他可以让多个Channel注册给他,然后监听各个Channel发生的事件</span><br></pre></td></tr></table></figure></li><li><p>Selector的创建API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.创建Selector的方式</span><br><span class="line">    Selector selector = Selector.open();</span><br></pre></td></tr></table></figure></li><li><p>Channel注册到Selector的API</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b.将我们要交给选择器管理的通道注册到选择器里</span><br><span class="line">    channel是一个通道,并且必须是非阻塞的通道</span><br><span class="line">    SelectionKey key = channel.register(selector,SelectionKey.OP_ACCEPT);</span><br><span class="line">参数1: 该通道注册到的选择器对象</span><br><span class="line">    参数2: 表示我们选择器对何种事件感兴趣(服务器通道只能写SelectionKey.OP_ACCEPT,表示有客户端连接)</span><br><span class="line">        </span><br><span class="line">返回值: SelectionKey是对象,该对象中包含注册到选择器的通道</span><br></pre></td></tr></table></figure></li></ul><h6 id="4-3-Selector中的常用方法"><a href="#4-3-Selector中的常用方法" class="headerlink" title="4.3 Selector中的常用方法"></a>4.3 Selector中的常用方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.获取所有注册到当前选择器的通道集合</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title">keys</span><span class="params">()</span></span>;</span><br><span class="line">b.获取所有已经有客户端连接的通道集合</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set&lt;SelectionKey&gt; <span class="title">selectedKeys</span><span class="params">()</span></span>;</span><br><span class="line">c. 如果目前没有客户端连接,那么该方法会阻塞,如果有客户端连接,会返回<span class="string">"本次"</span>连接的客户端数量</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">select</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h6 id="4-4-Selector实现多路连接-上"><a href="#4-4-Selector实现多路连接-上" class="headerlink" title="4.4    Selector实现多路连接(上)"></a>4.4    Selector实现多路连接(上)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.多路(多个服务器监听多个端口)</span></span><br><span class="line">        ServerSocketChannel server1 = ServerSocketChannel.open();</span><br><span class="line">        server1.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server1.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server2 = ServerSocketChannel.open();</span><br><span class="line">        server2.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server2.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server3 = ServerSocketChannel.open();</span><br><span class="line">        server3.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server3.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Selector选择器对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将多个server注册到同一个Selector上</span></span><br><span class="line">        server1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server3.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.接收客户端连接</span></span><br><span class="line">        Set&lt;SelectionKey&gt; keys = selector.keys();<span class="comment">//获取已注册通道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"注册通道数量："</span> + keys.size());</span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<span class="comment">//获取已连接通 道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"已连接通道数量:"</span> + selectionKeys.size());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【服务器】等待连接......"</span>);</span><br><span class="line">        <span class="keyword">int</span> selectedCount = selector.select();<span class="comment">//此方法会"阻塞"</span></span><br><span class="line">        System.out.println(<span class="string">"本次连接数量："</span> + selectedCount);</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        Set&lt;SelectionKey&gt; keys1 = selector.keys();</span><br><span class="line">        System.out.println(<span class="string">"注册通道数量："</span> + keys1.size());</span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys1 = selector.selectedKeys();</span><br><span class="line">        System.out.println(<span class="string">"已连接的通道数量："</span> + selectionKeys1.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"7777客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">7777</span>));</span><br><span class="line">                System.out.println(<span class="string">"7777客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"7777异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"8888客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">                System.out.println(<span class="string">"8888客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"8888异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"9999客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>));</span><br><span class="line">                System.out.println(<span class="string">"9999客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"9999异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-5-Selector实现多路连接-下"><a href="#4-5-Selector实现多路连接-下" class="headerlink" title="4.5    Selector实现多路连接(下)"></a>4.5    Selector实现多路连接(下)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.多路(多个服务器监听多个端口)</span></span><br><span class="line">        ServerSocketChannel server1 = ServerSocketChannel.open();</span><br><span class="line">        server1.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server1.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server2 = ServerSocketChannel.open();</span><br><span class="line">        server2.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server2.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server3 = ServerSocketChannel.open();</span><br><span class="line">        server3.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server3.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Selector选择器对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将多个server注册到同一个Selector上</span></span><br><span class="line">        server1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server3.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//4.接收客户端连接</span></span><br><span class="line">        Set&lt;SelectionKey&gt; keys = selector.keys();<span class="comment">//获取已注册通道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"注册通道数量："</span> + keys.size());</span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<span class="comment">//获取已连接通 道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"已连接通道数量:"</span> + selectionKeys.size());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"【服务器】等待连接......"</span>);</span><br><span class="line">            <span class="keyword">int</span> selectedCount = selector.select();<span class="comment">//此方法会"阻塞"</span></span><br><span class="line">            System.out.println(<span class="string">"本次连接数量："</span> + selectedCount);</span><br><span class="line">            System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">            Set&lt;SelectionKey&gt; keys1 = selector.keys();</span><br><span class="line">            System.out.println(<span class="string">"注册通道数量："</span> + keys1.size());</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys1 = selector.selectedKeys();</span><br><span class="line">            System.out.println(<span class="string">"已连接的通道数量："</span> + selectionKeys1.size());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"============处理被连接的服务器通道============"</span>);</span><br><span class="line">            <span class="comment">//遍历已连接通道的集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; it = selectionKeys1.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//获取当前连接通道的</span></span><br><span class="line">                SelectionKey key = it.next();</span><br><span class="line">                <span class="comment">//从SelectionKey中获取通道对象</span></span><br><span class="line">                ServerSocketChannel channel = (ServerSocketChannel) key.channel();</span><br><span class="line">                <span class="comment">//看一下此通道是监听哪个端口的</span></span><br><span class="line">                System.out.println(<span class="string">"监听端口："</span> + channel.getLocalAddress());</span><br><span class="line">                <span class="comment">//取出连接到该服务器的客户端通道</span></span><br><span class="line">                SocketChannel accept = channel.accept();</span><br><span class="line">                System.out.println(accept);</span><br><span class="line">                System.out.println(<span class="string">"写与该客户端进行交互的代码...."</span>);</span><br><span class="line">                <span class="comment">//从连接的通道中把已经处理过的服务器通道移出</span></span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"休息5秒......"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println();<span class="comment">//打印一个空行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"7777客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">7777</span>));</span><br><span class="line">                System.out.println(<span class="string">"7777客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"7777异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"8888客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>));</span><br><span class="line">                System.out.println(<span class="string">"8888客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"8888异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> (SocketChannel socket = SocketChannel.open()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"9999客户端连接服务器......"</span>);</span><br><span class="line">                socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9999</span>));</span><br><span class="line">                System.out.println(<span class="string">"9999客户端连接成功...."</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">"9999异常重连"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-6Selector多路信息接收测试"><a href="#4-6Selector多路信息接收测试" class="headerlink" title="4.6Selector多路信息接收测试"></a>4.6Selector多路信息接收测试</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectorDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.多路(多个服务器监听多个端口)</span></span><br><span class="line">        ServerSocketChannel server1 = ServerSocketChannel.open();</span><br><span class="line">        server1.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server1.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">7777</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server2 = ServerSocketChannel.open();</span><br><span class="line">        server2.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server2.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line"></span><br><span class="line">        ServerSocketChannel server3 = ServerSocketChannel.open();</span><br><span class="line">        server3.configureBlocking(<span class="keyword">false</span>); <span class="comment">//一定要改为非阻塞</span></span><br><span class="line">        server3.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">9999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Selector选择器对象</span></span><br><span class="line">        Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将多个server注册到同一个Selector上</span></span><br><span class="line">        server1.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server2.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        server3.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.接收客户端连接</span></span><br><span class="line">        Set&lt;SelectionKey&gt; keys = selector.keys();<span class="comment">//获取已注册通道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"注册通道数量："</span> + keys.size());</span><br><span class="line">        Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();<span class="comment">//获取已连接通 道的集合</span></span><br><span class="line">        System.out.println(<span class="string">"已连接通道数量:"</span> + selectionKeys.size());</span><br><span class="line">        System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"【服务器】等待连接......"</span>);</span><br><span class="line">            <span class="keyword">int</span> selectedCount = selector.select();<span class="comment">//此方法会"阻塞"</span></span><br><span class="line">            System.out.println(<span class="string">"本次连接数量："</span> + selectedCount);</span><br><span class="line">            System.out.println(<span class="string">"----------------------------------------------"</span>);</span><br><span class="line">            Set&lt;SelectionKey&gt; keys1 = selector.keys();</span><br><span class="line">            System.out.println(<span class="string">"注册通道数量："</span> + keys1.size());</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys1 = selector.selectedKeys();</span><br><span class="line">            System.out.println(<span class="string">"已连接的通道数量："</span> + selectionKeys1.size());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"============处理被连接的服务器通道============"</span>);</span><br><span class="line">            <span class="comment">//遍历已连接通道的集合</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; it = selectionKeys1.iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="comment">//获取当前连接通道的</span></span><br><span class="line">                SelectionKey key = it.next();</span><br><span class="line">                <span class="comment">//从SelectionKey中获取通道对象</span></span><br><span class="line">                ServerSocketChannel channel = (ServerSocketChannel) key.channel();</span><br><span class="line">                <span class="comment">//看一下此通道是监听哪个端口的</span></span><br><span class="line">                System.out.println(<span class="string">"监听端口："</span> + channel.getLocalAddress());</span><br><span class="line">                <span class="comment">//取出连接到该服务器的客户端通道</span></span><br><span class="line">                SocketChannel accept = channel.accept();</span><br><span class="line">                System.out.println(<span class="string">"写与该客户端进行交互的代码...."</span>);</span><br><span class="line">                <span class="comment">//接收客户端发送过来的信息</span></span><br><span class="line">                ByteBuffer inBuf = ByteBuffer.allocate(<span class="number">1000</span>);</span><br><span class="line">                accept.read(inBuf);</span><br><span class="line">                inBuf.flip();</span><br><span class="line">                String msg = <span class="keyword">new</span> String(inBuf.array(), <span class="number">0</span>, inBuf.limit());</span><br><span class="line">                System.out.println(<span class="string">"【服务器】接收到通道【"</span> + channel.getLocalAddress() + <span class="string">"】的信息："</span> + msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//从连接的通道中把已经处理过的服务器通道移出</span></span><br><span class="line">                it.remove();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"休息5秒......"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            System.out.println();<span class="comment">//打印一个空行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-AIO-异步、非阻塞"><a href="#5-AIO-异步、非阻塞" class="headerlink" title="5.AIO(异步、非阻塞)"></a>5.AIO(异步、非阻塞)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">什么AIO: ASynchronized 异步非阻塞的IO</span><br><span class="line">AIO的分类:</span><br><span class="line">异步的文件通道  AsynchronousFileChannel</span><br><span class="line">    异步的客户端通道: AsynchronousSocketChannel</span><br><span class="line">    异步的服务器通道: AsynchronousServerSocketChannel</span><br><span class="line">    异步的UDP协议通道: AsynchronousDatagramChannel</span><br><span class="line">AIO的异步:</span><br><span class="line">表现两个方面:</span><br><span class="line">a.连接时,可以使用异步(调用连接的方法时,非阻塞,连接成功之后会以方法回调的机制通知我们)</span><br><span class="line">    b.读写数据时,可以使用异步(调用<span class="built_in">read</span>方法时,非阻塞,等数据接收到之后以方法调用的机制通知我们)</span><br></pre></td></tr></table></figure><h6 id="5-1-AIO-异步非阻塞连接的建立"><a href="#5-1-AIO-异步非阻塞连接的建立" class="headerlink" title="5.1 AIO 异步非阻塞连接的建立"></a>5.1 AIO 异步非阻塞连接的建立</h6><ul><li><p>异步非阻塞的客户端通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步客户端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建 异步的客户端通道</span></span><br><span class="line">        AsynchronousSocketChannel socketChannel = AsynchronousSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.去连接服务器,采用异步非阻塞方法</span></span><br><span class="line">        <span class="comment">//connect(服务器的IP和端口号,附件(null),接口);</span></span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>), <span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;Void, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Void result, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器成功..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行...."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异步非阻塞的服务器通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步服务器端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOServerSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个异步的服务器通道</span></span><br><span class="line">        AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.绑定本地某个端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//3.接收异步客户端,采用异步非阻塞方式</span></span><br><span class="line">        <span class="comment">//accpet(附件(nulll),接口);</span></span><br><span class="line">        serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel result, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"有客户端连接...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端连接失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行.."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>异步非阻塞建立连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">见AIO异步客户端和AIO异步服务器端建立</span><br></pre></td></tr></table></figure></li></ul><h6 id="5-2-AIO同步读写数据"><a href="#5-2-AIO同步读写数据" class="headerlink" title="5.2 AIO同步读写数据"></a>5.2 AIO同步读写数据</h6>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步客户端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建 异步的客户端通道</span></span><br><span class="line">        AsynchronousSocketChannel socketChannel = AsynchronousSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.去连接服务器,采用异步非阻塞方法</span></span><br><span class="line">        <span class="comment">//connect(服务器的IP和端口号,附件(null),接口);</span></span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>), <span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;Void, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Void result, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器成功..."</span>);</span><br><span class="line">                <span class="comment">//客户端给服务器发送数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                buffer.put(<span class="string">"你好我是AIO客户端..."</span>.getBytes());</span><br><span class="line">                <span class="comment">//切换读写模式</span></span><br><span class="line">                buffer.flip();</span><br><span class="line">                socketChannel.write(buffer);</span><br><span class="line">                <span class="comment">//释放资源</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketChannel.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步服务器端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOServerSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个异步的服务器通道</span></span><br><span class="line">        AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.绑定本地某个端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//3.接收异步客户端,采用异步非阻塞方式</span></span><br><span class="line">        <span class="comment">//accpet(附件(nulll),接口);</span></span><br><span class="line">        serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel socketChannel, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"有客户端连接...."</span>);</span><br><span class="line">                <span class="comment">//去读客户端发送来的数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                Future&lt;Integer&gt; future = socketChannel.read(buffer);</span><br><span class="line"><span class="comment">//            </span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] array = buffer.array();</span><br><span class="line">                                      System.out.println(Arrays.toString(array));</span><br><span class="line"></span><br><span class="line">                    Integer len = future.get();</span><br><span class="line">                    System.out.println(len);</span><br><span class="line"><span class="comment">//当调用future的get方法时,数据才写入到buffer中</span></span><br><span class="line">                    <span class="comment">//所以我们不能在调用get方法之前,调用flip,否则数据将无法写入</span></span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    System.out.println(<span class="keyword">new</span> String(array,<span class="number">0</span>,len));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端连接失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5-3-AIO异步读写数据"><a href="#5-3-AIO异步读写数据" class="headerlink" title="5.3    AIO异步读写数据"></a>5.3    AIO异步读写数据</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步客户端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建 异步的客户端通道</span></span><br><span class="line">        AsynchronousSocketChannel socketChannel = AsynchronousSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.去连接服务器,采用异步非阻塞方法</span></span><br><span class="line">        <span class="comment">//connect(服务器的connectIP和端口号,附件(null),接口);</span></span><br><span class="line">        socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8888</span>), <span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;Void, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Void result, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器成功..."</span>);</span><br><span class="line">                <span class="comment">//给服务器发送数据</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1000</span>);</span><br><span class="line">                buffer.put(<span class="string">"你好我是AIO客户端.."</span>.getBytes());</span><br><span class="line">                buffer.flip();</span><br><span class="line">                <span class="comment">//异步的write(缓冲区,超时时间,时间单位,附件(null),回调接口);</span></span><br><span class="line">                socketChannel.write(buffer, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"数据成功发送..."</span>);</span><br><span class="line">                        <span class="comment">//释放资源</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            socketChannel.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"数据发送失败..."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"连接服务器失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行...."</span>);</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AIO下的 异步服务器端通道</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AIOServerSocketChannelDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个异步的服务器通道</span></span><br><span class="line">        AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//2.绑定本地某个端口</span></span><br><span class="line">        serverSocketChannel.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8888</span>));</span><br><span class="line">        <span class="comment">//3.接收异步客户端,采用异步非阻塞方式</span></span><br><span class="line">        <span class="comment">//accpet(附件(nulll),接口);</span></span><br><span class="line">        serverSocketChannel.accept(<span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel socketChannel, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"有客户端连接...."</span>);</span><br><span class="line">                <span class="comment">//从客户端中读取数据</span></span><br><span class="line">                <span class="comment">//异步的read(字节缓冲区,超时时间,时间单位,附件(null),回调接口)</span></span><br><span class="line">                ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1000</span>);</span><br><span class="line">                socketChannel.read(buffer, <span class="number">10</span>, TimeUnit.SECONDS, <span class="keyword">null</span>, <span class="keyword">new</span> CompletionHandler&lt;Integer, Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(Integer result, Object attachment)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"数据读取完毕.."</span>);</span><br><span class="line">                        System.out.println(<span class="string">"接收到数据的长度:"</span>+result);</span><br><span class="line">                        System.out.println(<span class="string">"接收到的数据是:"</span> + <span class="keyword">new</span> String(buffer.array(), <span class="number">0</span>, result));</span><br><span class="line">                        <span class="comment">//释放资源</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            socketChannel.close();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                        System.out.println(<span class="string">"读取数据失败..."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable exc, Object attachment)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"客户端连接失败..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"程序继续执行.."</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十九、反射、注解"><a href="#十九、反射、注解" class="headerlink" title="十九、反射、注解"></a>十九、反射、注解</h4><h5 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1.类加载器"></a>1.类加载器</h5><ul><li><h5 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">比如,现在我们定义了一个类,Student,我们使用它时候才会加载到内存</span><br><span class="line">JVM会为这个Student<span class="class">.<span class="keyword">class</span>字节码文件创建一个对象,该对象我们称为<span class="title">Class</span>对象(字节码文件对象)</span></span><br></pre></td></tr></table></figure></li><li><p>类的加载时机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 创建类的实例。</span><br><span class="line"><span class="number">2</span>. 调用类的静态变量，或者为静态变量赋值。</span><br><span class="line"><span class="number">3</span>. 调用类的静态方法。  </span><br><span class="line"><span class="number">4</span>. 使用某个类的子类.</span><br><span class="line"><span class="number">5</span>. 直接使用java.exe命令来运行某个主类 </span><br><span class="line"><span class="number">6</span>. 使用反射强制加载某个类,并生成Class对象</span><br></pre></td></tr></table></figure></li><li><p>类加载器的作用和分类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们用到类都是由类加载器负责加载到内存的!!!</span><br><span class="line">类加载器有三种:</span><br><span class="line">启动类加载器(引导类加载器,Bootstrap ClassLoader),加载%JAVA_HOME%\bin目录下的所有类</span><br><span class="line">    扩展类加载器(Extension ClassLoader),加载一些%JAVA_HOME%\jre\lib\ext扩展类</span><br><span class="line">    应用程序类加载器(Application ClassLoader):用于加载我们自定义类的类加载器</span><br></pre></td></tr></table></figure></li><li><p>双亲委派机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当某个类加载器需要加载一个类时,它并不是直接去加载,而把加载的需要交给父级类加载器,最终请求会达到到达启动类加载器,启动类加载判断是否可以加载该类,如果加载不了再交给扩展类加载器,扩展类加载判断是否可以加载,如果加载不了,再交给应用程序类加载器.</span><br><span class="line">    </span><br><span class="line">双亲委派机制主要作用就是让一个类只会被加载一次!!!</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-什么是反射"><a href="#2-什么是反射" class="headerlink" title="2.什么是反射"></a>2.什么是反射</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反射就是在程序运行时获取一个类的Class对象(字节码文件对象),从解剖它,取出其中的各种成员,使用这些成员</span><br></pre></td></tr></table></figure><h5 id="3-反射中万物皆对象的概念"><a href="#3-反射中万物皆对象的概念" class="headerlink" title="3.反射中万物皆对象的概念"></a>3.反射中万物皆对象的概念</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Class对象 --&gt; 某个字节码文件 </span><br><span class="line">Field对象 --&gt; 某个成员变量</span><br><span class="line">Method对象 --&gt; 某个成员方法</span><br><span class="line">Constructor对象 --&gt; 某个构造方法</span><br><span class="line">newInstance --&gt; 创建对象</span><br><span class="line">invoke --&gt; 调用/执行  </span><br><span class="line">    </span><br><span class="line">书籍:&lt;&lt;深入理解JVM虚拟机&gt;&gt; 很有意思</span><br><span class="line">    </span><br><span class="line">体验一下反射的语法(和正常语法是反过来写的)</span><br><span class="line">    创建对象:</span><br><span class="line">正常语法: new 构造方法(参数);</span><br><span class="line">反射语法: 构造方法对象.newInstance(参数); </span><br><span class="line"></span><br><span class="line">调用方法:</span><br><span class="line">正常语法: 对象名.成员方法名(参数);</span><br><span class="line">反射语法: 成员方法对象.invoke(对象名,参数);</span><br></pre></td></tr></table></figure><h5 id="4-反射的第一步获取字节码文件对象-Class对象-【重点】"><a href="#4-反射的第一步获取字节码文件对象-Class对象-【重点】" class="headerlink" title="4.反射的第一步获取字节码文件对象(Class对象)【重点】"></a>4.反射的第一步获取字节码文件对象(Class对象)【重点】</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Java定义了三种获取Class对象的方式</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetClassDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个类的Class对象的三种方式</span></span><br><span class="line">        <span class="comment">//1.通过类的一个静态成员 class</span></span><br><span class="line">        Class clazz1 = Dog<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(clazz1);</span><br><span class="line">        <span class="comment">//2.通过该类的一个对象,获取该类的Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz2 = dd.getClass();</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line">        <span class="comment">//3.通过反射强制加载该类,并获取该类的Class对象</span></span><br><span class="line">        Class clazz3 = Class.forName(<span class="string">"com.itheima.demo02_GetClass.Dog"</span>);</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line">        <span class="comment">//注意:以上是三种获取Dog类Class对象的方式,并不是获取三个Class对象,实际上他们获取的是同一个Class对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-Class对象中的三个方法"><a href="#5-Class对象中的三个方法" class="headerlink" title="5.Class对象中的三个方法"></a>5.Class对象中的三个方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSimple</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class clazz = Dog<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">//Class对象中三个方法</span></span><br><span class="line">        <span class="comment">//1.获取全限定类名</span></span><br><span class="line">        System.out.println(clazz.getName());</span><br><span class="line">        <span class="comment">//2.获取类名</span></span><br><span class="line">        System.out.println(clazz.getSimpleName());</span><br><span class="line">        <span class="comment">//3.创建Class对象所代表的那个类的对象,底层实际上使用Dog的无参构造</span></span><br><span class="line">        Dog dog = (Dog) clazz.newInstance();</span><br><span class="line">        System.out.println(dog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line">com.itheima.demo03_ClassMathod.Dog</span><br><span class="line">Dog</span><br><span class="line">Dog&#123;age=<span class="number">0</span>, name=<span class="string">'null'</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="6-通过反射获取构造方法-amp-amp-使用构造方法创建对象【重点】"><a href="#6-通过反射获取构造方法-amp-amp-使用构造方法创建对象【重点】" class="headerlink" title="6.通过反射获取构造方法&amp;&amp;使用构造方法创建对象【重点】"></a>6.通过反射获取构造方法&amp;&amp;使用构造方法创建对象【重点】</h5><ul><li><p>反射获取构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Constructor <span class="title">getConstructor</span><span class="params">(Class... parameterTypes)</span></span>; 获取单个<span class="string">"public"</span>构造</span><br><span class="line"><span class="function"><span class="keyword">public</span> Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class... parameterTypes)</span></span>;获取单个<span class="string">"任意修饰"</span>构造</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> Constructor[] getConstructors(); 获取所有<span class="string">"public"</span>构造</span><br><span class="line"><span class="keyword">public</span> Constructor[] getDeclaredConstructors();获取所有<span class="string">"任意修饰"</span>构造    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetConstructorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//1.反射第一步,先获取Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz = dd.getClass();</span><br><span class="line">        <span class="comment">//2.获取单个"public"的构造方法</span></span><br><span class="line">        Constructor con1 = clazz.getConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Constructor con2 = clazz.getConstructor(int.class, String.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(con2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取单个"任意修饰符"的构造方法</span></span><br><span class="line">        Constructor con3 = clazz.getDeclaredConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(con3);</span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line">        <span class="comment">//4.获取所有"public"构造</span></span><br><span class="line">        Constructor[] cons = clazz.getConstructors();</span><br><span class="line">        System.out.println(cons.length);</span><br><span class="line">        <span class="keyword">for</span> (Constructor con : cons) &#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.获取所有"任意修饰符"构造</span></span><br><span class="line">        System.out.println(<span class="string">"========================"</span>);</span><br><span class="line"></span><br><span class="line">        Constructor[] conss = clazz.getDeclaredConstructors();</span><br><span class="line">        System.out.println(conss.length);</span><br><span class="line">        <span class="keyword">for</span> (Constructor con : conss) &#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用构造方法创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">构造方法对象.newInstance(参数);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用构造</span></span><br><span class="line">        <span class="comment">//1.反射第一步,先获取Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz = dd.getClass();</span><br><span class="line">        <span class="comment">//2.获取单个"public"的构造方法</span></span><br><span class="line">        Constructor con1 = clazz.getConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line">        Constructor con2 = clazz.getConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        <span class="comment">//3.使用构造创建对象</span></span><br><span class="line">        Dog dog1 = (Dog)con1.newInstance();</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line"></span><br><span class="line">        Dog dog2 = (Dog)con2.newInstance(<span class="number">10</span>,<span class="string">"旺财"</span>);</span><br><span class="line">        System.out.println(dog2);</span><br><span class="line">    &#125;</span><br><span class="line">输出结果:</span><br><span class="line"><span class="keyword">public</span> com.itheima.demo04_GetConstructor.Dog()</span><br><span class="line"><span class="keyword">public</span> com.itheima.demo04_GetConstructor.Dog(<span class="keyword">int</span>,java.lang.String)</span><br><span class="line">Dog&#123;age=<span class="number">0</span>, name=<span class="string">'null'</span>&#125;</span><br><span class="line">Dog&#123;age=<span class="number">10</span>, name=<span class="string">'旺财'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果是私有构造怎么办</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">私有构造必须先设置暴力权限,然后才能正常使用,否则抛出IllegalAccessException异常</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//使用构造</span></span><br><span class="line">        <span class="comment">//1.反射第一步,先获取Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz = dd.getClass();</span><br><span class="line">        <span class="comment">//2.获取单个"public"的构造方法</span></span><br><span class="line">        Constructor con1 = clazz.getConstructor();</span><br><span class="line">        System.out.println(con1);</span><br><span class="line"></span><br><span class="line">        Constructor con2 = clazz.getDeclaredConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(con2);</span><br><span class="line">        <span class="comment">//3.使用构造创建对象</span></span><br><span class="line">        Dog dog1 = (Dog)con1.newInstance();</span><br><span class="line">        System.out.println(dog1);</span><br><span class="line">        <span class="comment">//私有构造,不能直接使用,因为没有权限</span></span><br><span class="line">        <span class="comment">//设置暴力访问权限</span></span><br><span class="line">        con2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Dog dog2 = (Dog)con2.newInstance(<span class="number">10</span>,<span class="string">"旺财"</span>);</span><br><span class="line">        System.out.println(dog2);</span><br><span class="line">    &#125;</span><br><span class="line"> 输出结果:</span><br><span class="line">    <span class="keyword">public</span> com.itheima.demo04_GetConstructor.Dog()</span><br><span class="line">    <span class="keyword">private</span> com.itheima.demo04_GetConstructor.Dog(<span class="keyword">int</span>,java.lang.String)</span><br><span class="line">    Dog&#123;age=<span class="number">0</span>, name=<span class="string">'null'</span>&#125;</span><br><span class="line">    Dog&#123;age=<span class="number">10</span>, name=<span class="string">'旺财'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>反射获取成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name,Class...args)</span></span>;获取<span class="string">"public"</span>方法</span><br><span class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name,Class...args)</span></span>;获取<span class="string">"任意修饰"</span>方法</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> Method[] getMethods(); 获取所有<span class="string">"public"</span>方法,包括父类继承的 </span><br><span class="line"><span class="keyword">public</span> Method[] getDeclaredMethods(); 获取所有<span class="string">"任意修饰"</span>方法,不包含父类继承的     </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz = dd.getClass();</span><br><span class="line">        <span class="comment">//2.获取单个"public"成员方法</span></span><br><span class="line">        Method eat1 = clazz.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">        System.out.println(eat1);</span><br><span class="line"></span><br><span class="line">        Method eat2 = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(eat2);</span><br><span class="line">        <span class="comment">//3.获取单个"任意修饰"成员方法</span></span><br><span class="line">        Method eat3 = clazz.getDeclaredMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(eat3);</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        <span class="comment">//4.获取所有的"public"成员方法,包括父类继承的</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        System.out.println(methods.length);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line">        <span class="comment">//5.获取所有的"任意修饰"的成员方法,但是不包含父类继承的</span></span><br><span class="line">        Method[] methodss = clazz.getDeclaredMethods();</span><br><span class="line">        System.out.println(methodss.length);</span><br><span class="line">        <span class="keyword">for</span> (Method method : methodss) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>调用成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">语法格式:</span><br><span class="line">成员方法对象.invoke(对象名,参数);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//调用成员方法</span></span><br><span class="line">    <span class="comment">//1.获取Class对象</span></span><br><span class="line">    Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">    Class clazz = dd.getClass();</span><br><span class="line">    <span class="comment">//2.获取单个"public"成员方法</span></span><br><span class="line">    Method eat1 = clazz.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">    System.out.println(eat1);</span><br><span class="line"></span><br><span class="line">    Method eat2 = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    System.out.println(eat2);</span><br><span class="line">    <span class="comment">//3.使用成员方法</span></span><br><span class="line">    eat1.invoke(dd);</span><br><span class="line">    eat2.invoke(dd,<span class="string">"shi"</span>,<span class="string">"niao"</span>);</span><br><span class="line">&#125;</span><br><span class="line">输出结果:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> com.itheima.demo05_GetMethod.Dog.eat()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> com.itheima.demo05_GetMethod.Dog.eat(java.lang.String,java.lang.String)</span><br><span class="line">狗爱吃shi...</span><br><span class="line">狗爱吃shi,爱喝niao</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果是私有的成员方法怎么调用呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">私有成员方法不能直接调用,必须先设置暴力访问权限,否则抛出IllegalAccessException异常</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//调用成员方法</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        Class clazz = dd.getClass();</span><br><span class="line">        <span class="comment">//2.获取单个"public"成员方法</span></span><br><span class="line">        Method eat1 = clazz.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">        System.out.println(eat1);</span><br><span class="line"></span><br><span class="line">        Method eat2 = clazz.getMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(eat2);</span><br><span class="line"></span><br><span class="line">        Method eat3 = clazz.getDeclaredMethod(<span class="string">"eat"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">//3.使用成员方法</span></span><br><span class="line">        eat1.invoke(dd);</span><br><span class="line">        eat2.invoke(dd,<span class="string">"shi"</span>,<span class="string">"niao"</span>);</span><br><span class="line">        <span class="comment">//私有方法不能直接调用,必须先设置暴力访问权限</span></span><br><span class="line">        eat3.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        eat3.invoke(dd,<span class="string">"shi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">输出结果</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> com.itheima.demo05_GetMethod.Dog.eat()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> com.itheima.demo05_GetMethod.Dog.eat(java.lang.String,java.lang.String)</span><br><span class="line">狗爱吃shi...</span><br><span class="line">狗爱吃shi,爱喝niao</span><br><span class="line">狗爱吃shi</span><br></pre></td></tr></table></figure></li></ul><h4 id="二十、注解"><a href="#二十、注解" class="headerlink" title="二十、注解"></a>二十、注解</h4><h5 id="1-常见的注解介绍"><a href="#1-常见的注解介绍" class="headerlink" title="1.常见的注解介绍"></a>1.常见的注解介绍</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@author:用来标识作者名</span><br><span class="line">@version:用于标识对象的版本号  </span><br><span class="line">@Override: 用于标识该方法是重写的   </span><br><span class="line">@deprecated: 用于标识过期的API</span><br><span class="line">@Test: 用于单元测试的注解</span><br></pre></td></tr></table></figure><h5 id="2-自定义注解-Annotation"><a href="#2-自定义注解-Annotation" class="headerlink" title="2.自定义注解(Annotation)"></a>2.自定义注解(Annotation)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">自定义类: public class 类名</span><br><span class="line">自定义接口: public interface 接口</span><br><span class="line">自定义枚举: public enum 枚举名</span><br><span class="line">自定义注解: public @interface 注解名</span><br><span class="line">    </span><br><span class="line">格式:</span><br><span class="line">public @interface 注解名&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-给自定义注解添加属性"><a href="#3-给自定义注解添加属性" class="headerlink" title="3.给自定义注解添加属性"></a>3.给自定义注解添加属性</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line">public @interface 注解名&#123;</span><br><span class="line">        //注解内部只有属性,没有别的!!</span><br><span class="line">        数据类型 属性名();</span><br><span class="line">        数据类型 属性名() [default 默认值];</span><br><span class="line">    &#125;</span><br><span class="line">注解中并不是所有数据类型都可以的!!!</span><br><span class="line">    只能是以下三大类型:</span><br><span class="line">a.八大基本类型(byte,short,char,int,long,<span class="built_in">float</span>,double,boolean)</span><br><span class="line">        b.String,Class,注解类型,枚举类 </span><br><span class="line">        c.以上12具体数据类型的数组</span><br></pre></td></tr></table></figure><h5 id="4-使用注解时的注意事项"><a href="#4-使用注解时的注意事项" class="headerlink" title="4.使用注解时的注意事项"></a>4.使用注解时的注意事项</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用格式:</span><br><span class="line">@注解名(属性名=属性值,属性名=属性值)</span><br><span class="line"></span><br><span class="line">注意:</span><br><span class="line">a.使用注解时保证注解的每个属性都必须有值(有默认值我们可以不再赋值,没有默认值我们必须赋值)</span><br><span class="line">    b.如果是数组需要使用&#123;&#125;把值括起来,如果数组的值只有一个,那么大括号可以省略</span><br></pre></td></tr></table></figure><h5 id="5-自定义注解中的特殊属性名value"><a href="#5-自定义注解中的特殊属性名value" class="headerlink" title="5.自定义注解中的特殊属性名value"></a>5.自定义注解中的特殊属性名value</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.如果注解中<span class="string">"只有一个属性"</span>,并且名字叫做<span class="string">"value"</span>,那么使用时可以直接写属性的值,省略属性名</span><br><span class="line">b.如果注解中有value之外的其他属性,那么其他属性都有默认值,</span><br><span class="line">且使用注解时只给value赋值,那么直接写属性的值,省略属性名.</span><br></pre></td></tr></table></figure><h5 id="6-注解的注解–元注解"><a href="#6-注解的注解–元注解" class="headerlink" title="6.注解的注解–元注解"></a>6.注解的注解–元注解</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">元注解常见的有两个:</span><br><span class="line">@Target 元注解</span><br><span class="line">        作用:用来标识注解使用的位置，如果没有标识,那么我们的注解在各种地方都可以使用</span><br><span class="line">        取值:必须使用ElementType枚举下的值:</span><br><span class="line">TYPE，类，接口 </span><br><span class="line">            FIELD, 成员变量</span><br><span class="line">            METHOD, 成员方法 </span><br><span class="line">            PARAMETER, 方法参数 </span><br><span class="line">            CONSTRUCTOR, 构造方法 </span><br><span class="line">            LOCAL_VARIABLE, 局部变量</span><br><span class="line">    //元注解@Target</span><br><span class="line">    //@Target(ElementType.CONSTRUCTOR)</span><br><span class="line">    //@Target(ElementType.FIELD)</span><br><span class="line">    //@Target(ElementType.LOCAL_VARIABLE)</span><br><span class="line">    </span><br><span class="line">@Retention 元注解    </span><br><span class="line">        作用:用来标识我们注解的生命周期(有效范围) </span><br><span class="line">        取值:必须是RetentionPolicy枚举中的下面三个值之一</span><br><span class="line">            SOURCE 表示我们的注解只在源码阶段存在,编译成字节码文件后删除</span><br><span class="line">            CLASS 表示我们的注解在源码阶段和字节码阶段存在,加载到内存后删除</span><br><span class="line">            RUNTIME 表示我们的注解在源码阶段,字节码阶段,运行时都存在(永远不删除)</span><br></pre></td></tr></table></figure><h5 id="7-注解的解析"><a href="#7-注解的解析" class="headerlink" title="7.注解的解析"></a>7.注解的解析</h5><ul><li><p>什么是注解解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过写代码获取出来某个注解中的那些属性值</span><br></pre></td></tr></table></figure></li><li><p>注解解析的步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a.获取注解所在的那个类的Class对象</span><br><span class="line">b.获取注解所在的对象(可能Field,Method,Constructor) </span><br><span class="line">c.判断获取的对象中是否有该注解存在  </span><br><span class="line">d.如果有我们要的注解,取出我们要的注解即可</span><br><span class="line">e.从注解中取出属性值即可   </span><br><span class="line">    </span><br><span class="line">与之相关的API:</span><br><span class="line">Annotation: 注解类,Java中所有的注解的父类(了解)</span><br><span class="line">    我们学过的Field,Method,Constructor，Class等类都是实现了AnnotatedElement接口</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class annotationClass)</span></span>;判断是否存在某个注解</span><br><span class="line">    <span class="function">Annotation <span class="title">getAnnotation</span><span class="params">(Class annotationClass)</span></span>;获取指定类型的注解</span><br></pre></td></tr></table></figure></li><li><p>注解解析代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">a.获取注解所在的那个类的Class对象</span><br><span class="line">b.获取注解所在的对象(可能Field,Method,Constructor) </span><br><span class="line">c.判断获取的对象中是否有该注解存在  </span><br><span class="line">d.如果有我们要的注解,取出我们要的注解即可</span><br><span class="line">e.从注解中取出属性值即可</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Student &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    String[] boyFriends();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Student</span>(age = <span class="number">18</span>, name = <span class="string">"小花"</span>, boyFriends = &#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>, <span class="string">"王五"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//        a.获取注解所在的那个类的Class对象</span></span><br><span class="line">        Class clazz = Demo<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">//        b.获取注解所在的对象(可能Field,Method,Constructor)</span></span><br><span class="line">        Method showMethod = clazz.getMethod(<span class="string">"show"</span>);</span><br><span class="line"><span class="comment">//        c.判断获取的对象中是否有该注解存在</span></span><br><span class="line">        <span class="keyword">if</span> (showMethod.isAnnotationPresent(Student<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"有该注解"</span>);</span><br><span class="line">            <span class="comment">//        d.如果有我们要的注解,取出我们要的注解即可</span></span><br><span class="line">            Student anno = showMethod.getAnnotation(Student<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">//        e.从注解中取出属性值即可</span></span><br><span class="line">            <span class="keyword">int</span> age = anno.age();</span><br><span class="line">            String name = anno.name();</span><br><span class="line">            String[] friends = anno.boyFriends();</span><br><span class="line">            System.out.println(<span class="string">"姓名:"</span>+name);</span><br><span class="line">            System.out.println(<span class="string">"年龄:"</span>+age);</span><br><span class="line">            System.out.println(<span class="string">"男友们:"</span>+ Arrays.toString(friends));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"没有该注解"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二十一、XML、dom4j"><a href="#二十一、XML、dom4j" class="headerlink" title="二十一、XML、dom4j"></a>二十一、XML、dom4j</h4><p>XML 指可扩展标记语言(EXtensible Markup Language)</p><ul><li><p>XML 与 HTML 的主要差异</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.XML主要用于保存和传输数据,(现在很少使用XML传输数据,使用json)</span><br><span class="line">b.HTML主要用于展示数据</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-XML语法"><a href="#1-XML语法" class="headerlink" title="1.XML语法"></a>1.XML语法</h5><h6 id="1-1文档声明"><a href="#1-1文档声明" class="headerlink" title="1.1文档声明"></a>1.1文档声明</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">什么是文档声明: 表明这是一个XML文件</span><br><span class="line">文档声明必须写在xml文件的0行0列(左上角)</span><br><span class="line">固定格式:</span><br><span class="line"><span class="code">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="code">        当前XMl的版本1.0  当前XML的文件编码</span></span><br></pre></td></tr></table></figure><h6 id="1-2元素Element-标签Tag"><a href="#1-2元素Element-标签Tag" class="headerlink" title="1.2元素Element/标签Tag"></a>1.2元素Element/标签Tag</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line"><span class="code">&lt;标签名&gt;&lt;/标签名&gt;</span></span><br><span class="line"><span class="code">    或者</span></span><br><span class="line"><span class="code">    &lt;标签名/&gt; </span></span><br><span class="line">a.标签由三部分组成: 开始标签,结束标签,标签体(元素体) </span><br><span class="line">b.标签体(元素体) 可以写 其他标签(就是XML允许标签嵌套),也可以写 文本内容 </span><br><span class="line">c.如果标签体中没有任何内容,那么此时可以写成"自闭合"标签,<span class="xml"><span class="tag">&lt;<span class="name">标签名</span>/&gt;</span></span></span><br><span class="line">d.标签的命名也是有要求的:</span><br><span class="line"><span class="code">i.区分大小写: 这么写&lt;a&gt;&lt;/A&gt;是错误的!!    </span></span><br><span class="line"><span class="code">    ii.不能使用空格冒号等特殊字符: 这么写&lt;a b&gt;&lt;/a b&gt;也是错误的!! </span></span><br><span class="line"><span class="code">    iii.不建议以XML、xml、Xml开头: 这么写&lt;XMLA&gt;&lt;/XMLA&gt;是可以的,但是不建议!!!  </span></span><br><span class="line">e.格式化良好的XML文档，有且仅有一个根元素。  </span><br><span class="line"><span class="code">     什么是根元素?? 最最最外层的元素</span></span><br></pre></td></tr></table></figure><h6 id="1-3属性Attribute"><a href="#1-3属性Attribute" class="headerlink" title="1.3属性Attribute"></a>1.3属性Attribute</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="code">&lt;person id="heima001"&gt;&lt;/person&gt;</span></span><br><span class="line">a.属性只能写在开始标签中</span><br><span class="line">b.属性的格式: 属性名="属性值",其中属性值必须使用'或者"括起来</span><br><span class="line">c.一个元素可以有0~N个属性,但是不能有相同的属性名  </span><br><span class="line">d.属性名不能使用空格,不要使用冒号等特殊字符，且必须以字母开头</span><br></pre></td></tr></table></figure><h6 id="1-4注释"><a href="#1-4注释" class="headerlink" title="1.4注释"></a>1.4注释</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">    注释内容 </span></span><br><span class="line"><span class="xml">    注释内容 </span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line">在XML使用快捷键ctrl+shift+/,可以快速生成一个注释</span><br></pre></td></tr></table></figure><h6 id="1-5转义字符"><a href="#1-5转义字符" class="headerlink" title="1.5转义字符"></a>1.5转义字符</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;  <span class="attr">--</span>&gt;</span></span> &amp;lt; (less than)</span><br><span class="line"><span class="quote">&gt;  --&gt; &amp;gt; (great than)</span></span><br><span class="line">"  --&gt; &amp;quot;</span><br><span class="line">'  --&gt; &amp;apos;</span><br><span class="line">&amp;  --&gt; &amp;amp;</span><br></pre></td></tr></table></figure><h6 id="1-6字符区"><a href="#1-6字符区" class="headerlink" title="1.6字符区"></a>1.6字符区</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">&lt;![CDATA[</span></span><br><span class="line"><span class="xml">       可以任意的内存,其中所有的特殊字符会自动转译</span></span><br><span class="line"><span class="xml">   ]]&gt;</span>  </span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-XML的约束"><a href="#2-XML的约束" class="headerlink" title="2.XML的约束"></a>2.XML的约束</h5><h6 id="2-1-DTD约束"><a href="#2-1-DTD约束" class="headerlink" title="2.1  DTD约束"></a>2.1  DTD约束</h6><ul><li><p>DTD约束语法(了解)</p><ul><li><p>DTD的引入</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a.内部DTD (把DTD内容直接写在XML里面,这种方式只能对当前XML有效)</span><br><span class="line">    &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt; </span><br><span class="line">    &lt;!DOCTYPE 根元素 [...<span class="comment">//具体语法]&gt;&lt;!--内部DTD--&gt; </span></span><br><span class="line">    &lt;根元素&gt; &lt;/根元素&gt;</span><br><span class="line">                   </span><br><span class="line">b.外部DTD-本地DTD</span><br><span class="line">    &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt; </span><br><span class="line">    &lt;!DOCTYPE 根元素 SYSTEM <span class="string">"bookshelf.dtd"</span>&gt;&lt;!--外部本地DTD--&gt; </span><br><span class="line">    &lt;根元素&gt; &lt;/根元素&gt; </span><br><span class="line">                   </span><br><span class="line">c.外部DTD-公共DTD</span><br><span class="line">    &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt; </span><br><span class="line">    &lt;!DOCTYPE web-app PUBLIC <span class="string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> <span class="string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt; </span><br><span class="line">    &lt;web-app&gt; </span><br><span class="line">    &lt;/web-app&gt;</span><br></pre></td></tr></table></figure></li><li><p>DTD中的数量词</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">书*  表示标签<span class="xml"><span class="tag">&lt;<span class="name">书</span>&gt;</span></span>可以出现0-N次</span><br><span class="line">a+  表示标签<span class="xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span>可以出现1-N次</span><br><span class="line">西瓜?  表示标签<span class="xml"><span class="tag">&lt;<span class="name">西瓜</span>&gt;</span></span>只能出现0或者1次</span><br><span class="line">售价,书名,作者 表示标签出现的顺序必须是先<span class="xml"><span class="tag">&lt;<span class="name">售价</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">售价</span>&gt;</span></span> 再<span class="xml"><span class="tag">&lt;<span class="name">书名</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">书名</span>&gt;</span></span> 再<span class="xml"><span class="tag">&lt;<span class="name">作者</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">作者</span>&gt;</span></span>    </span><br><span class="line">西瓜|南瓜|冬瓜  表示这个三个标签中只能出现其中一个</span><br></pre></td></tr></table></figure></li><li><p>其他语法了解即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DTD的语法:(了解)</span><br><span class="line">DTD的属性:</span><br><span class="line"><span class="code">&lt;!ATTLIST 书  -- 给书标签添加属性</span></span><br><span class="line"><span class="code">        id ID #REQUIRED   -- 属性id 类型ID(代表属性值是唯一的)  必须有该属性</span></span><br><span class="line"><span class="code">        编号 CDATA #IMPLIED -- 属性编号 类型CDATA(代表普通内容) 可选</span></span><br><span class="line"><span class="code">        出版社 (清华|北大|人民) "人民" --属性出版社 类型(三选一) 默认值为"人民"</span></span><br><span class="line"><span class="code">        type CDATA #FIXED "IT" 属性type 类型CDATA(代表普通文件) #FIXED 必须是固定的IT</span></span><br><span class="line"><span class="code">        &gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="2-2-Schema约束"><a href="#2-2-Schema约束" class="headerlink" title="2.2  Schema约束"></a>2.2  Schema约束</h6><ul><li><p>Schema的语法和命名空间(了解即可) </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">命名空间 类似于 Java中包</span><br><span class="line">不同名的命名空间下可能有相同的标签&lt;书&gt;</span><br><span class="line">    xmlns=<span class="string">"http://www.bilibili.cn"</span>  这个命名空间下有&lt;书&gt;</span><br><span class="line">    xmlns:aa=<span class="string">"http://java.sun.com"</span>  这个命名空间下也有&lt;书&gt;</span><br><span class="line">此时我们引用了这两个命名空间</span><br><span class="line">如果直接写&lt;书&gt; 表示这个http:<span class="comment">//www.bilibili.cn命名空间下的书</span></span><br><span class="line">如果写&lt;aa:书&gt; 表示这个http:<span class="comment">//java.sun.com命名空间下的书</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3-XML解析"><a href="#3-XML解析" class="headerlink" title="3. XML解析"></a>3. XML解析</h5><p>通过代码将XML文件中保存的数据读取出来!!</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a.解析方式(思想)</span><br><span class="line"><span class="code">    DOM解析: 把整个XML加载到内存,进行解析,解析后生产一个Document对象</span></span><br><span class="line"><span class="code">        缺点: 如果XML文件过大可能导致内存溢出</span></span><br><span class="line"><span class="code">        优点: 解析之后文档结构是完整,我们甚至可以直接对标签进行增删改查</span></span><br><span class="line"><span class="code">    SAX解析(了解): 扫描XML文档,扫描一行解析一行,解析完毕之后释放这一行</span></span><br><span class="line"><span class="code">        缺点: 只能读，逐行后将释放资源</span></span><br><span class="line"><span class="code">        优点: 速度快,并且可以解析大文件        </span></span><br><span class="line"><span class="code">PULL解析(了解):是Android系统内置的解析方式</span></span><br><span class="line"><span class="code">             </span></span><br><span class="line">b.解析器:</span><br><span class="line"><span class="code">根据解析方式,进行实践,写出对应的解析代码(代码需要考虑解析过程中的每个细节非常繁琐)</span></span><br><span class="line">c.解析开发包:</span><br><span class="line"><span class="code">对解析器繁琐API的封装,提供我们简单又方便的API来操作XML文档</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line">常见的解析开发包:</span><br><span class="line"><span class="code">DOM4J解析开发包,性能高,并且API简单的要死【开发中最最最常见的解析开发包】</span></span><br></pre></td></tr></table></figure><h6 id="3-1-Dom4j的基本使用"><a href="#3-1-Dom4j的基本使用" class="headerlink" title="3.1 Dom4j的基本使用"></a>3.1 Dom4j的基本使用</h6><ul><li><p>DOM解析的原理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将整个XML文档加载到内存,进行解析,解析之后生成一个Document对象(倒立的DOM树)</span><br></pre></td></tr></table></figure></li><li><p>DOM4J的jar包和常用API</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.在模块下创建一个lib文件夹(必须叫lib),然后把dom4j-1.6.1.jar和jaxen-1.1.6放入其中</span><br><span class="line">2.将lib下的jar包添加到模块中来</span><br><span class="line"><span class="code">    a.选中右键--&gt;add as library</span></span><br><span class="line"><span class="code">        b.点击File--&gt;Project Structure --&gt;先在Library上添加jar包 ---&gt;然后在Module加入即可</span></span><br><span class="line">3.DOM4J中常见API</span><br><span class="line"><span class="code">    a.核心类: SAXReader </span></span><br><span class="line"><span class="code">        new SAXReader() 无参构造器</span></span><br><span class="line"><span class="code">        Document read(File file) 读取XML文件并解析生成Document</span></span><br><span class="line"><span class="code">    b.Document对象的API</span></span><br><span class="line"><span class="code">        Element getRootElement(); 获取文档中根标签</span></span><br><span class="line"><span class="code">    c.Element对象的API</span></span><br><span class="line"><span class="code">        List&lt;Element&gt; elements([String name]);获取当前标签对象的所有[指定名字]子标签</span></span><br><span class="line"><span class="code">        Element element([String name]);获取当前标签对象的第一个[指定名字]子标签</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        String getName(); 获取当前标签的名字</span></span><br><span class="line"><span class="code">        String attributeValue(String attrName);根据属性名获取当前标签的属性值</span></span><br><span class="line"><span class="code">        String getText(); 获取当前标签的文本内容</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        String elementText(Sting name);获取当前标签的某个指定名字的子标的文本内容</span></span><br></pre></td></tr></table></figure></li><li><p>DOM4J代码演示</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DOM4JDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建核心对象</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//2.读取xml文件</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"books.xml"</span>));</span><br><span class="line">        <span class="comment">//3.获取根标签</span></span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        System.out.println(<span class="string">"根标签是:"</span>+rootElement.getName());</span><br><span class="line">        <span class="comment">//4.获取book标签</span></span><br><span class="line">        List&lt;Element&gt; bookElements = rootElement.elements();</span><br><span class="line">        <span class="comment">//5.遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Element bookElement : bookElements) &#123;</span><br><span class="line">            <span class="comment">//6.获取标签名</span></span><br><span class="line">            String bookElementName = bookElement.getName();</span><br><span class="line">            System.out.println(<span class="string">"子标签:"</span>+bookElementName);</span><br><span class="line">            <span class="comment">//7.获取id属性值</span></span><br><span class="line">            String idValue = bookElement.attributeValue(<span class="string">"id"</span>);</span><br><span class="line">            System.out.println(<span class="string">"属性id:"</span>+idValue);</span><br><span class="line">            <span class="comment">//8.继续获取子标签</span></span><br><span class="line">            List&lt;Element&gt; elements = bookElement.elements();</span><br><span class="line">            <span class="comment">//9.遍历</span></span><br><span class="line">            <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">                <span class="comment">//10.获取标签名</span></span><br><span class="line">                System.out.println(element.getName());</span><br><span class="line">                <span class="comment">//11.获取文本</span></span><br><span class="line">                System.out.println(element.getText());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h6 id="3-2-Dom4J结合XPath解析XML"><a href="#3-2-Dom4J结合XPath解析XML" class="headerlink" title="3.2  Dom4J结合XPath解析XML"></a>3.2  Dom4J结合XPath解析XML</h6><ul><li><p>什么是XPath</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XPath称为XML的路径表达式,可以快速从n层标签中选出我们需要的标签</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>XPath使用步骤</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.在模块下创建一个lib文件夹(必须叫lib),然后把dom4j-1.6.1.jar和jaxen-1.1.6放入其中</span><br><span class="line">2.将lib下的jar包添加到模块中来</span><br><span class="line"><span class="code">    a.选中右键--&gt;add as library</span></span><br><span class="line"><span class="code">        b.点击File--&gt;Project Structure --&gt;先在Library上添加jar包 ---&gt;然后在Module加入即可   </span></span><br><span class="line">和XPath相关API的介绍</span><br><span class="line"><span class="code">    List selectNodes("表达式");获取所有符合XPath表达式的元素集合</span></span><br><span class="line"><span class="code">    Element selectSingleNode("表达式"); 获取符合XPath表达式的唯一元素</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>XPath语法(了解)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.绝对路径表达式</span><br><span class="line">2.相对路径表示</span><br><span class="line">3.全文搜索路径表达式</span><br><span class="line">4.谓语(条件筛选)表达式</span><br></pre></td></tr></table></figure></li><li><p>演示</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XPathDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> DocumentException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建核心对象</span></span><br><span class="line">        SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">        <span class="comment">//2.读取xml文件</span></span><br><span class="line">        Document document = reader.read(<span class="keyword">new</span> File(<span class="string">"books.xml"</span>));</span><br><span class="line">        <span class="comment">//3.使用Xpath</span></span><br><span class="line">        <span class="comment">//全文搜索路径表达式</span></span><br><span class="line">        List&lt;Element&gt; list = document.selectNodes(<span class="string">"//sale"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Element element : list) &#123;</span><br><span class="line">            System.out.println(element.getText());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//谓语表达式</span></span><br><span class="line">        Element ele = (Element) document.selectSingleNode(<span class="string">"//book[@id='0001']/sale"</span>);</span><br><span class="line">        System.out.println(ele.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二十二、设计模式"><a href="#二十二、设计模式" class="headerlink" title="二十二、设计模式"></a>二十二、设计模式</h4><h5 id="1-单例设计模式"><a href="#1-单例设计模式" class="headerlink" title="1.单例设计模式"></a>1.单例设计模式</h5><h6 id="1-1-单例设计模式介绍"><a href="#1-1-单例设计模式介绍" class="headerlink" title="1.1. 单例设计模式介绍"></a>1.1. 单例设计模式介绍</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.正常情况下一个类可以创建多个对象</span><br><span class="line">b.单例设计模式作用就是让某个类只能有一个对象</span><br></pre></td></tr></table></figure><h6 id="1-2-单例设计模式实现步骤"><a href="#1-2-单例设计模式实现步骤" class="headerlink" title="1.2. 单例设计模式实现步骤"></a>1.2. 单例设计模式实现步骤</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.将构造方法私有化(不让别人直接<span class="keyword">new</span>对象)</span><br><span class="line">b.在该类内部产生一个唯一的实例化对象,并且使用<span class="keyword">private</span> <span class="keyword">static</span>修饰 </span><br><span class="line">c.提供一个<span class="keyword">public</span> staic 的静态方法,该方法返回这个静态对象</span><br></pre></td></tr></table></figure><h6 id="1-3-单例设计模式的类型"><a href="#1-3-单例设计模式的类型" class="headerlink" title="1.3 单例设计模式的类型"></a>1.3 单例设计模式的类型</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">懒汉式:</span><br><span class="line">不立即创建本类的对象,当别人调用静态方法获取本类的对象时,才去创建</span><br><span class="line">饿汉式: </span><br><span class="line">先把对象创建出来,当别人调用静态方法获取本类的对象时,直接返回对象即可</span><br></pre></td></tr></table></figure><h6 id="1-4-饿汉单例设计模式"><a href="#1-4-饿汉单例设计模式" class="headerlink" title="1.4, 饿汉单例设计模式"></a>1.4, 饿汉单例设计模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求Dog类采用单例模式中的饿汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个静态方法,获取dd对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Dog <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.自己定义一个对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有化构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Dog对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Dog dog = Dog.getInstance();</span><br><span class="line">            System.out.println(dog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-5-懒汉单例设计模式"><a href="#1-5-懒汉单例设计模式" class="headerlink" title="1.5. 懒汉单例设计模式"></a>1.5. 懒汉单例设计模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求Cat类采用单例模式中的懒汉式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有化构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Cat</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.内部定义一个Cat类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cat cc = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供静态方法,多线程情况下 需要使用synchronized保证该方法的原子性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Cat <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="keyword">if</span> (cc == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果不加synchronized,可能会出现</span></span><br><span class="line">            <span class="comment">//线程1执行到这,被线程2抢走了</span></span><br><span class="line">            <span class="comment">//线程2也进来了,执行到这</span></span><br><span class="line">            cc = <span class="keyword">new</span> Cat();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再返回</span></span><br><span class="line">        <span class="keyword">return</span> cc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Cat对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Cat cc = Cat.getInstance();</span><br><span class="line">            System.out.println(cc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-多例设计模式"><a href="#2-多例设计模式" class="headerlink" title="2.多例设计模式"></a>2.多例设计模式</h5><h6 id="2-1-多例设计模式的介绍"><a href="#2-1-多例设计模式的介绍" class="headerlink" title="2.1. 多例设计模式的介绍"></a>2.1. 多例设计模式的介绍</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多例设计模式保证我们的类具有指定个数的对象</span><br></pre></td></tr></table></figure><h6 id="2-2-多例设计模式的实现步骤"><a href="#2-2-多例设计模式的实现步骤" class="headerlink" title="2.2. 多例设计模式的实现步骤"></a>2.2. 多例设计模式的实现步骤</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.私有化构造(不让别人可以正常创建对象)</span><br><span class="line">b.在类内部创建一个<span class="keyword">private</span> <span class="keyword">static</span>修饰的集合,用于保存我们自己创建的对象</span><br><span class="line">c.使用静态代码块,向集合中添加指定个数对象</span><br><span class="line">d.通过一个<span class="keyword">public</span> <span class="keyword">static</span>静态方法,随机返回集合中的某个对象</span><br></pre></td></tr></table></figure><h6 id="2-3-多例设计模式的代码实现"><a href="#2-3-多例设计模式的代码实现" class="headerlink" title="2.3. 多例设计模式的代码实现"></a>2.3. 多例设计模式的代码实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要求Pig类使用多例设计模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//0.定义一个变量,指定集合中对象个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.私有化构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Pig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建一个集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Pig&gt; list = <span class="keyword">new</span> ArrayList&lt;Pig&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//添加指定个数的对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Pig());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.提供一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pig <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="keyword">new</span> Random().nextInt(COUNT);</span><br><span class="line">        Pig pig = list.get(index);</span><br><span class="line">        <span class="keyword">return</span> pig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取Pig对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Pig p1 = Pig.getInstance();</span><br><span class="line">            System.out.println(p1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-动态代理"><a href="#3-动态代理" class="headerlink" title="3.动态代理"></a>3.动态代理</h5><h6 id="3-1-动态代理和静态代理的区别"><a href="#3-1-动态代理和静态代理的区别" class="headerlink" title="3.1.动态代理和静态代理的区别"></a>3.1.动态代理和静态代理的区别</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">动态代理和静态代理区别在于代理类是否已经写好,</span><br><span class="line"><span class="code">静态代理,代理类ArrayListProxy已经编译时期定义好了</span></span><br><span class="line"><span class="code">    而动态代理,它的代理类在运行时期通过代码动态生成!!!</span></span><br><span class="line"><span class="code">     </span></span><br><span class="line">动态代理的作用:</span><br><span class="line"><span class="code">拦截对真实对象(被代理对象)方法的直接访问，增强真实对象(被代理对象)方法的功能进行增强(减弱)</span></span><br></pre></td></tr></table></figure><h6 id="3-2-案例重点类和方法"><a href="#3-2-案例重点类和方法" class="headerlink" title="3.2.案例重点类和方法"></a>3.2.案例重点类和方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.java.lang.reflect.Proxy类 他可以为我们动态生成一个对象的代理对象</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ClassLoader classLoader, //类加载器,一般我们使用和被代理对象一样类加载器</span></span></span><br><span class="line"><span class="function"><span class="params">    Class[] interfaces, // 被代理对象实现的所有接口的字节码文件数组</span></span></span><br><span class="line"><span class="function"><span class="params">    InvocationHandler ()</span></span>;<span class="comment">//处理类对象,用于拦截我们调用的所有方法,判断到底是否应该被代理对象的真实方法</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span>.InvocationHandler处理类,实际上它是一个接口</span><br><span class="line">    <span class="comment">//invoke方法就是用于拦截我们调用的真实方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">    Object proxy  代理对象</span></span><br><span class="line"><span class="function">    Method method 被拦截到的方法</span></span><br><span class="line"><span class="function">    Object[] args 被拦截到方法的参数,如果没有就是<span class="keyword">null</span></span></span><br></pre></td></tr></table></figure><h6 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3.代码实现"></a>3.3.代码实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个ArrayList</span></span><br><span class="line">        ArrayList&lt;String&gt; arr = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="comment">//保存用户的信息</span></span><br><span class="line">        arr.add(<span class="string">"张三"</span>);</span><br><span class="line">        arr.add(<span class="string">"18"</span>);</span><br><span class="line">        arr.add(<span class="string">"北京中关村"</span>);</span><br><span class="line">        arr.add(<span class="string">"188888块"</span>);</span><br><span class="line">        <span class="comment">//2.调用unmodifiableList</span></span><br><span class="line">      <span class="comment">//unmodifiableList 该方法返回的就是arr的代理对象,类似于我们自己的ArraylistProxy对象</span></span><br><span class="line">        <span class="comment">//但是unmodifiableList生成的代理对象,是通过动态方式在运行时期创建出来</span></span><br><span class="line">        List&lt;String&gt; list = unmodifiableList(arr);</span><br><span class="line"><span class="comment">//        list.add("aaa");</span></span><br><span class="line"><span class="comment">//        list.set(1, "28");</span></span><br><span class="line"><span class="comment">//        list.remove(1);</span></span><br><span class="line"><span class="comment">//        System.out.println(list.get(1));</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">"18"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//要求该方法和Collections的unmodifiableList一样,接收一个集合,返回一个该集合的代理对象(是动态代理对象)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">unmodifiableList</span><span class="params">(List&lt;String&gt; arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.使用API 创建一个动态代理对象</span></span><br><span class="line">        List&lt;String&gt; list = (List&lt;String&gt;) Proxy.newProxyInstance(DynamicProxy<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">arr</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="comment">//该方法就是用来拦截真实对象方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//获取方法名字</span></span><br><span class="line">                String name = method.getName();</span><br><span class="line">                <span class="comment">//需要拦截 add set remove 开头的哪些方法</span></span><br><span class="line">                <span class="keyword">if</span> (name.startsWith(<span class="string">"add"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span>  <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"add相关方法不让执行!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (name.startsWith(<span class="string">"set"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span>  <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"set相关方法不让执行!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (name.startsWith(<span class="string">"remove"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"remove相关方法不让执行!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//其他方法正常执行</span></span><br><span class="line">                Object result = method.invoke(arr, args);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-4-动态代理的优缺点总结"><a href="#3-4-动态代理的优缺点总结" class="headerlink" title="3.4.动态代理的优缺点总结"></a>3.4.<strong>动态代理的优缺点总结</strong></h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Proxy创建动态代理的优点: </span><br><span class="line"><span class="code">  a,可以为任意接口的实现类做动态代理</span></span><br><span class="line"><span class="code">      b.极大提高了我们的开发效率</span></span><br><span class="line"><span class="code">      c.不会改变被代理对象的代码</span></span><br><span class="line">Proxy创建动态代理的缺点:  </span><br><span class="line"><span class="code">  java的Proxy创建动态代理必须有接口,没有接口不行(以后的CGLib可以)</span></span><br></pre></td></tr></table></figure><h5 id="4-工厂设计模式"><a href="#4-工厂设计模式" class="headerlink" title="4.工厂设计模式"></a>4.工厂设计模式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将创建对象的过程交给工厂去执行,我们只从工厂中获取对象即可</span><br><span class="line">作用：解决类与类之间的耦合问题</span><br><span class="line"></span><br><span class="line">工厂模式实现步骤</span><br><span class="line">a.提供一个所有类的父类/接口,提供一个Car接口</span><br><span class="line">b.我们的各种实现类都需要实现该接口,重写接口中的方法 </span><br><span class="line">c.提供一个返回不同实现类对象的工厂</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有汽车的共同接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Aotuo</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奥拓以8公里/小时的速度慢游..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenChi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奔驰以500公里/小时的速度奔驰..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaLaLi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"法拉利以800公里/小时的速度飞驰..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提供工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义方法,生产汽车</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getACar</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回一辆真正的汽车对象</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Aotuo();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BenChi();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FaLaLi();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchIdCarException(<span class="string">"您的id:"</span>+id+<span class="string">"不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一辆汽车</span></span><br><span class="line">        Car aCar = CarFactory.getACar(<span class="number">2</span>);</span><br><span class="line">        aCar.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充:我们可以使用配置文件,来代替具体的代码中的id值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">car.properties</span><br><span class="line">id=<span class="number">3</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//0.从配置文件去读id</span></span><br><span class="line">        Properties ps = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//加载配置文件</span></span><br><span class="line">        ps.load(<span class="keyword">new</span> FileInputStream(<span class="string">"car.properties的路径"</span>));</span><br><span class="line">        <span class="comment">//取出数据</span></span><br><span class="line">        String id = ps.getProperty(<span class="string">"id"</span>);</span><br><span class="line">        <span class="comment">//转成int</span></span><br><span class="line">        <span class="keyword">int</span> ID = Integer.parseInt(id);</span><br><span class="line">        <span class="comment">//1.创建一辆汽车 高耦合  低耦合</span></span><br><span class="line">        Car aCar = CarFactory.getACar(ID);</span><br><span class="line">        aCar.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二十三、枚举、方法引用、Base64"><a href="#二十三、枚举、方法引用、Base64" class="headerlink" title="二十三、枚举、方法引用、Base64"></a>二十三、枚举、方法引用、Base64</h4><h5 id="1-定义枚举的格式"><a href="#1-定义枚举的格式" class="headerlink" title="1.定义枚举的格式"></a>1.定义枚举的格式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> 枚举名&#123;</span><br><span class="line">    <span class="comment">//枚举项</span></span><br><span class="line">    枚举项<span class="number">1</span>,枚举项<span class="number">2</span>,...,枚举项n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//以前的性别sex是String类型,导致任何值都可以</span></span><br><span class="line">    <span class="comment">//private String sex;</span></span><br><span class="line">    <span class="comment">//现在我们已经有枚举类型</span></span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Sex sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//省略getter，setter，toString方法</span></span><br></pre></td></tr></table></figure><h5 id="2-枚举的本质"><a href="#2-枚举的本质" class="headerlink" title="2.枚举的本质"></a>2.枚举的本质</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">枚举的本质其实就是一个类,枚举项的本质其实当前类的一个对象</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别的枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;</span><br><span class="line">        Male,Female,Yao; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">本质===&gt;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sex</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Enum</span>&lt;<span class="title">Sex</span>&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex Male = <span class="keyword">new</span> Sex();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex Female = <span class="keyword">new</span> Sex();</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Sex Yao = <span class="keyword">new</span> Sex();</span><br><span class="line">        构造方法是私有化的</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">()</span></span>&#123;&#125;    </span><br><span class="line">    &#125;</span><br><span class="line">枚举本质是一个类,那么我们就可以在枚举中添加各种成员变量,成员方法,构造方法等!!!</span><br><span class="line">    成员变量和成员方法和普通类没有区别!!</span><br><span class="line">    构造方法: a.必须是私有的 b.使用时 枚举项(参数);</span><br></pre></td></tr></table></figure><h5 id="3-枚举的应用场景"><a href="#3-枚举的应用场景" class="headerlink" title="3.枚举的应用场景"></a>3.枚举的应用场景</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">枚举表示性别：</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123; </span><br><span class="line">    MAIL, FEMAIL; </span><br><span class="line">&#125;</span><br><span class="line">枚举表示方向:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Orientation &#123; </span><br><span class="line">        UP, RIGHT, DOWN, LEFT; </span><br><span class="line">    &#125;</span><br><span class="line">枚举表示季度:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Season &#123; </span><br><span class="line">        SPRING, SUMMER, AUTUMN, WINTER; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4-方法引用"><a href="#4-方法引用" class="headerlink" title="4.方法引用"></a>4.方法引用</h5><p>所谓的方法引用,就是把已经存在的方法,直接拿过来用!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行了...汪汪汪.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bark1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行了...汪汪汪.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodReferencesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个线程,使用实现的方法</span></span><br><span class="line">        <span class="comment">//a.使用接口的实现类对象,给Runnable接口类型赋值</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRunnable()).start();</span><br><span class="line">        <span class="comment">//b.使用接口的匿名内部类对象,给Runnable接口类型赋值</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"线程执行了..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="comment">//c.使用Lambda,直接给Runnable接口类型赋值</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;System.out.println(<span class="string">"线程执行了..."</span>)).start();</span><br><span class="line">        <span class="comment">//d.把已经存在的方法直接引用过来</span></span><br><span class="line">        <span class="comment">//new Thread(Dog::bark).start(); //通过类名引用静态方法</span></span><br><span class="line">        Dog dd = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="keyword">new</span> Thread(dd::bark1).start(); <span class="comment">//通过对象名引用成员方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"线程执行了..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法引用基本使用格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">通过类名引用其中的静态方法</span><br><span class="line"><span class="code">    类名::静态方法名</span></span><br><span class="line">通过对象引用其中的普通方法</span><br><span class="line"><span class="code">    对象名::普通方法名</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line">通过类名引用其构造方法:</span><br><span class="line"><span class="code">类名::new   Person o = new Person();</span></span><br><span class="line">通过数组引用其构造方法:</span><br><span class="line"><span class="code">数据类型[]::new  int[] arr = new int[10];</span></span><br></pre></td></tr></table></figure><h5 id="5-Base64"><a href="#5-Base64" class="headerlink" title="5.Base64"></a>5.Base64</h5><p><strong>Base64内嵌类和方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Decoder和Encoder</span><br><span class="line">UrlDecoder和UrlEncoder</span><br><span class="line">MimeDecoder和MimeDecoder</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">encodeToString</span><span class="params">(<span class="keyword">byte</span>[] bs)</span></span>; <span class="comment">//编码  </span></span><br><span class="line"><span class="keyword">byte</span>[] decode(String str);<span class="comment">//解码</span></span><br></pre></td></tr></table></figure><p><strong>代码演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.Base64提供了三种编码器和解码器</span></span><br><span class="line">        <span class="comment">//a.基本的编码和解码</span></span><br><span class="line">        String encodeToString = Base64.getEncoder().encodeToString(<span class="string">"HelloWorld"</span>.getBytes());</span><br><span class="line">        System.out.println(encodeToString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Base64.getDecoder().decode(encodeToString);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//b.url的编码和解码</span></span><br><span class="line">        String encodeToString1 = Base64.getUrlEncoder().encodeToString(<span class="string">"www.itheima.com"</span>.getBytes());</span><br><span class="line">        System.out.println(encodeToString1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bs1 = Base64.getUrlDecoder().decode(encodeToString1);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bs1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//c.MIME类型编码器和解码器</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            UUID uuid = UUID.randomUUID();</span><br><span class="line">            sb.append(uuid.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        String content = sb.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String encodeToString2 = Base64.getMimeEncoder().encodeToString(content.getBytes());</span></span><br><span class="line"><span class="comment">//        System.out.println(encodeToString2);</span></span><br><span class="line">        String encodeToString2 = Base64.getMimeEncoder(<span class="number">8</span>,<span class="string">"-"</span>.getBytes()).encodeToString(content.getBytes());</span><br><span class="line">        System.out.println(encodeToString2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bs2 = Base64.getMimeDecoder().decode(encodeToString2);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bs2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二十四、正则表达式"><a href="#二十四、正则表达式" class="headerlink" title="二十四、正则表达式"></a>二十四、正则表达式</h4><h5 id="1-正则表达式-字符类"><a href="#1-正则表达式-字符类" class="headerlink" title="1.正则表达式-字符类"></a>1.正则表达式-字符类</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>[abc]：代表a或者b，或者c字符中的一个。</span><br><span class="line"><span class="bullet">2. </span>[^abc]：代表除a,b,c以外的任何字符。</span><br><span class="line"><span class="bullet">3. </span>[a-z]：代表a-z的所有小写字符中的一个。</span><br><span class="line"><span class="bullet">4. </span>[A-Z]：代表A-Z的所有大写字符中的一个。</span><br><span class="line"><span class="bullet">5. </span>[0-9]：代表0-9之间的某一个数字字符。</span><br><span class="line"><span class="bullet">6. </span>[a-zA-Z0-9]：代表a-z或者A-Z或者0-9之间的任意一个字符。</span><br><span class="line"><span class="bullet">7. </span>[a-dm-p]：a 到 d 或 m 到 p之间的任意一个字符。</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正则的字符类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"aad"</span>;</span><br><span class="line">        <span class="comment">//1.验证str是否以h开头，以d结尾，中间是a,e,i,o,u中某个字符</span></span><br><span class="line">        System.out.println(<span class="string">"1."</span> + str.matches(<span class="string">"h[aeiou]d"</span>));</span><br><span class="line">        <span class="comment">//2.验证str是否以h开头，以d结尾，中间不是a,e,i,o,u中的某个字符</span></span><br><span class="line">        System.out.println(<span class="string">"2."</span> + str.matches(<span class="string">"h[^aeiou]d"</span>));</span><br><span class="line">        <span class="comment">//3.验证str是否a-z的任何一个小写字符开头，后跟ad</span></span><br><span class="line">        System.out.println(<span class="string">"3."</span> + str.matches(<span class="string">"[a-z]ad"</span>));</span><br><span class="line">        <span class="comment">//4.验证str是否以a-d或者m-p之间某个字符开头，后跟ad</span></span><br><span class="line">        System.out.println(<span class="string">"4."</span> + str.matches(<span class="string">"[a-dm-p]ad"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-正则表达式-逻辑运算符"><a href="#2-正则表达式-逻辑运算符" class="headerlink" title="2. 正则表达式-逻辑运算符"></a>2. 正则表达式-逻辑运算符</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>&amp;&amp;：并且</span><br><span class="line"><span class="bullet">2. </span>| ：或者</span><br></pre></td></tr></table></figure><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式逻辑运算符类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"bad"</span>;</span><br><span class="line">        <span class="comment">//1.要求字符串是否是除a、e、i、o、u外的其它小写字符开头，后跟ad</span></span><br><span class="line">        System.out.println(<span class="string">"1."</span> + str.matches(<span class="string">"[a-z&amp;&amp;[^aeiou]]ad"</span>));</span><br><span class="line">        <span class="comment">//2.要求字符串是aeiou中的某个字符开头，后跟ad</span></span><br><span class="line">        System.out.println(<span class="string">"2."</span> + str.matches(<span class="string">"[a|e|i|o|u]ad"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-正则表达式-预定义字符"><a href="#3-正则表达式-预定义字符" class="headerlink" title="3.正则表达式-预定义字符"></a>3.正则表达式-预定义字符</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>"." ： 匹配任何字符。</span><br><span class="line"><span class="bullet">2. </span>"\d"：任何数字[0-9]的简写；</span><br><span class="line"><span class="bullet">3. </span>"\D"：任何非数字[^0-9]的简写；</span><br><span class="line"><span class="bullet">4. </span>"\s"： 空白字符：[ \t\n\x0B\f\r] 的简写</span><br><span class="line"><span class="bullet">5. </span>"\S"： 非空白字符：[^\s] 的简写</span><br><span class="line"><span class="bullet">6. </span>"\w"：单词字符：[a-zA-Z_0-9]的简写</span><br><span class="line"><span class="bullet">7. </span>"\W"：非单词字符：[^\w]</span><br></pre></td></tr></table></figure><h5 id="4-正则表达式-数量词"><a href="#4-正则表达式-数量词" class="headerlink" title="4.正则表达式-数量词"></a>4.正则表达式-数量词</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>X? : 0次或1次 </span><br><span class="line"><span class="bullet">2. </span>X* : 0次到多次</span><br><span class="line"><span class="bullet">3. </span>X+ : 1次或多次</span><br><span class="line"><span class="bullet">4. </span>X&#123;n&#125; : 恰好n次 </span><br><span class="line"><span class="bullet">5. </span>X&#123;n,&#125; : 至少n次 </span><br><span class="line"><span class="bullet">6. </span>X&#123;n,m&#125;: n到m次(n和m都是包含的)</span><br></pre></td></tr></table></figure><h5 id="5-正则表达式-分组括号"><a href="#5-正则表达式-分组括号" class="headerlink" title="5.正则表达式-分组括号( )"></a>5.正则表达式-分组括号( )</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式-分组()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"DG8FV-B9TKY-FRT9J-99899-XPQ4G"</span>;</span><br><span class="line">        <span class="comment">//验证这个序列号：分为5组，每组之间使用-隔开，每组由5位A-Z或者0-9的字符组成</span></span><br><span class="line">        System.out.println(str.matches(<span class="string">"([A-Z0-9]&#123;5&#125;-)&#123;4&#125;[A-Z0-9]&#123;5&#125;"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-String的split方法"><a href="#6-String的split方法" class="headerlink" title="6.String的split方法"></a>6.String的split方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex); 可以使用正则表达式来切换字符串</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式-split方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"18,,4,,,567,,,,99,56"</span>;</span><br><span class="line">        <span class="comment">//切割</span></span><br><span class="line">        String[] nums = str.split(<span class="string">",+"</span>);</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        <span class="keyword">for</span> (String num : nums) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-String类的replaceAll方法"><a href="#7-String类的replaceAll方法" class="headerlink" title="7.String类的replaceAll方法"></a>7.String类的replaceAll方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex,String newStr)</span></span>;<span class="comment">//将当前字符串中的旧串替换为新串,其他旧串可以使用正则去匹配</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 正则表达式-replaceAll</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将下面字符串中的"数字"替换为"*"</span></span><br><span class="line">        String str = <span class="string">"jfdk432jfdk2jk24354j47jk5l31324"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将每个数字,都替换为一个*号</span></span><br><span class="line">        String newStr1 = str.replaceAll(<span class="string">"\\d"</span>, <span class="string">"*"</span>);</span><br><span class="line">        System.out.println(newStr1);</span><br><span class="line">        <span class="comment">//将所有相邻的数字,只替换为一个*</span></span><br><span class="line">        String newStr2 = str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">"*"</span>);</span><br><span class="line">        System.out.println(newStr2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;学如逆水行舟，不进则退&lt;/strong&gt;，砥砺前行，不是为了自己在奋斗，肩负的是责任。每个人想要的都很多，不努力，只能看着喜欢的东西进入别人的口袋，不要说我现在不努力就活的很好这样的蠢话，那是没有见过井外面的世界，你以为有钱人就会快乐吗，是的，而且他们的快乐是你想象不到的！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://wanghaisong0-0.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://wanghaisong0-0.github.io/tags/Java/"/>
    
      <category term="总结" scheme="https://wanghaisong0-0.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
